#include "bind_common.h"


//
//
// FILE GENERATED BY PYTHON SCRIPT - DO NOT MODIFY IT DIRECTLY.
//
//



NB_MODULE(rprs, m) {
	m.attr("RPRLOADSTORE_PARAMETER_TYPE_UNDEF") = 0x0 ;
	m.attr("RPRLOADSTORE_PARAMETER_TYPE_INT") = 0x1 ;
	m.attr("RPRLOADSTORE_PARAMETER_TYPE_FLOAT") = 0x2 ;
	m.attr("RPRLOADSTORE_EXPORTFLAG_EXTERNALFILES") = (1 << 0) ;
	m.attr("RPRLOADSTORE_EXPORTFLAG_COMPRESS_IMAGE_LEVEL_1") = (1 << 1) ;
	m.attr("RPRLOADSTORE_EXPORTFLAG_COMPRESS_IMAGE_LEVEL_2") = (1 << 2) ;
	m.attr("RPRLOADSTORE_EXPORTFLAG_COMPRESS_FLOAT_TO_HALF_NORMALS") = (1 << 3) ;
	m.attr("RPRLOADSTORE_EXPORTFLAG_COMPRESS_FLOAT_TO_HALF_UV") = (1 << 4) ;
	m.attr("RPRLOADSTORE_EXPORTFLAG_EMBED_FILE_IMAGES_USING_OBJECTNAME") = (1 << 5) ;
	m.attr("RPRLOADSTORE_EXPORTFLAG_USE_IMAGE_CACHE") = (1 << 6) ;
	m.attr("RPRLOADSTORE_EXPORTFLAG_ONLY_EXPORT_ATTACHED_RENDER_LAYERS") = (1 << 7) ;
	m.def("Export", []( std::string rprsFileName,  PyRprContext* context,  PyRprScene* scene,  int extraCustomParam_int_number,  std::vector<std::string> extraCustomParam_int_names,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> extraCustomParam_int_values,  int extraCustomParam_float_number,  std::vector<std::string> extraCustomParam_float_names,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> extraCustomParam_float_values,  rpr_uint exportFlags,  PyRprsContext* rprsCtx )
	{

		std::vector<const char*> extraCustomParam_int_names___pycast1;
		for(int i=0; i<extraCustomParam_int_names.size(); i++)
			extraCustomParam_int_names___pycast1.push_back(extraCustomParam_int_names[i].c_str());
		const char** extraCustomParam_int_names___pycast = extraCustomParam_int_names.size() == 0 ? nullptr : &(extraCustomParam_int_names___pycast1[0]);

		const int32_t* extraCustomParam_int_values___pycast =    extraCustomParam_int_values.size() == 0 ? nullptr :     &(((int32_t*)extraCustomParam_int_values.data())[0]);

		std::vector<const char*> extraCustomParam_float_names___pycast1;
		for(int i=0; i<extraCustomParam_float_names.size(); i++)
			extraCustomParam_float_names___pycast1.push_back(extraCustomParam_float_names[i].c_str());
		const char** extraCustomParam_float_names___pycast = extraCustomParam_float_names.size() == 0 ? nullptr : &(extraCustomParam_float_names___pycast1[0]);

		const rpr_float* extraCustomParam_float_values___pycast =    extraCustomParam_float_values.size() == 0 ? nullptr :      &(((rpr_float*)extraCustomParam_float_values.data())[0]);

		PYRPR_CHECK_ERROR( rprsExport(  rprsFileName.c_str(),  context->h,  scene->h,  extraCustomParam_int_number,  extraCustomParam_int_names___pycast,  extraCustomParam_int_values___pycast,  extraCustomParam_float_number,  extraCustomParam_float_names___pycast,  extraCustomParam_float_values___pycast,  exportFlags,  rprsCtx->h   )  );
		return ret;
	});
	m.def("Import", []( std::string rprsFileName,  PyRprContext* context,  PyRprMaterialSystem* materialSystem,  PyRprScene* scene,  bool useAlreadyExistingScene,  PyRprsContext* rprsCtx )
	{

		PYRPR_CHECK_ERROR( rprsImport(  rprsFileName.c_str(),  context->h,  materialSystem->h,  &(scene->h),  useAlreadyExistingScene,  rprsCtx->h   )  );
		return ret;
	});
	m.def("ImportFromData", []( rpr_uchar* data,  size_t dataSize,  PyRprContext* context,  PyRprMaterialSystem* materialSystem,  PyRprScene* scene,  bool useAlreadyExistingScene,  PyRprsContext* rprsCtx )
	{

		PYRPR_CHECK_ERROR( rprsImportFromData(  data,  dataSize,  context->h,  materialSystem->h,  &(scene->h),  useAlreadyExistingScene,  rprsCtx->h   )  );
		return ret;
	});
	m.def("BuildOCIOFiles", []( std::string rprsFileName,  PyRprContext* context,  std::string basePath,  PyRprsContext* rprsCtx )
	{

		PYRPR_CHECK_ERROR( rprsBuildOCIOFiles(  rprsFileName.c_str(),  context->h,  basePath.c_str(),  rprsCtx->h   )  );
		return ret;
	});
	m.def("ExportCustomList", []( std::string rprsFileName,  int materialNode_number,  PyRprMaterialNode* materialNode_list,  int camera_number,  PyRprCamera* camera_list,  int light_number,  PyRprLight* light_list,  int shape_number,  PyRprShape* shape_list,  int image_number,  PyRprImage* image_list,  PyRprsContext* rprsCtx )
	{

		PYRPR_CHECK_ERROR( rprsExportCustomList(  rprsFileName.c_str(),  materialNode_number,  &(materialNode_list->h),  camera_number,  &(camera_list->h),  light_number,  &(light_list->h),  shape_number,  &(shape_list->h),  image_number,  &(image_list->h),  rprsCtx->h   )  );
		return ret;
	});
	m.def("AddExtraCamera", []( PyRprCamera* extraCam )
	{

		PYRPR_CHECK_ERROR( rprsAddExtraCamera(  extraCam->h   )  );
		return ret;
	});
	m.def("AddExtraCameraEx", []( PyRprsContext* rprsCtx,  PyRprCamera* extraCam )
	{

		PYRPR_CHECK_ERROR( rprsAddExtraCameraEx(  rprsCtx->h,  extraCam->h   )  );
		return ret;
	});
	m.def("AddExtraShapeParameter", []( PyRprShape* shape,  std::string parameterName,  rpr_int value )
	{

		PYRPR_CHECK_ERROR( rprsAddExtraShapeParameter(  shape->h,  parameterName.c_str(),  value   )  );
		return ret;
	});
	m.def("AddExtraShapeParameterEx", []( PyRprsContext* rprsCtx,  PyRprShape* shape,  std::string parameterName,  rpr_int value )
	{

		PYRPR_CHECK_ERROR( rprsAddExtraShapeParameterEx(  rprsCtx->h,  shape->h,  parameterName.c_str(),  value   )  );
		return ret;
	});
	m.def("ExportToXML", []( std::string rprsFilePath,  std::string xmlFileOut )
	{

		PYRPR_CHECK_ERROR( rprsExportToXML(  rprsFilePath.c_str(),  xmlFileOut.c_str()   )  );
		return ret;
	});
	m.def("ExportToXMLEx", []( PyRprsContext* rprsCtx,  std::string rprsFilePath,  std::string xmlFileOut )
	{

		PYRPR_CHECK_ERROR( rprsExportToXMLEx(  rprsCtx->h,  rprsFilePath.c_str(),  xmlFileOut.c_str()   )  );
		return ret;
	});
	m.def("AssignShapeToGroup", []( PyRprShape* shape,  std::string groupName )
	{

		PYRPR_CHECK_ERROR( rprsAssignShapeToGroup(  shape->h,  groupName.c_str()   )  );
		return ret;
	});
	m.def("AssignShapeToGroupEx", []( PyRprsContext* rprsCtx,  PyRprShape* shape,  std::string groupName )
	{

		PYRPR_CHECK_ERROR( rprsAssignShapeToGroupEx(  rprsCtx->h,  shape->h,  groupName.c_str()   )  );
		return ret;
	});
	m.def("AssignLightToGroup", []( PyRprLight* light,  std::string groupName )
	{

		PYRPR_CHECK_ERROR( rprsAssignLightToGroup(  light->h,  groupName.c_str()   )  );
		return ret;
	});
	m.def("AssignLightToGroupEx", []( PyRprsContext* rprsCtx,  PyRprLight* light,  std::string groupName )
	{

		PYRPR_CHECK_ERROR( rprsAssignLightToGroupEx(  rprsCtx->h,  light->h,  groupName.c_str()   )  );
		return ret;
	});
	m.def("AssignCameraToGroup", []( PyRprCamera* camera,  std::string groupName )
	{

		PYRPR_CHECK_ERROR( rprsAssignCameraToGroup(  camera->h,  groupName.c_str()   )  );
		return ret;
	});
	m.def("AssignCameraToGroupEx", []( PyRprsContext* rprsCtx,  PyRprCamera* camera,  std::string groupName )
	{

		PYRPR_CHECK_ERROR( rprsAssignCameraToGroupEx(  rprsCtx->h,  camera->h,  groupName.c_str()   )  );
		return ret;
	});
	m.def("AssignParentGroupToGroup", []( std::string groupChild,  std::string groupParent )
	{

		PYRPR_CHECK_ERROR( rprsAssignParentGroupToGroup(  groupChild.c_str(),  groupParent.c_str()   )  );
		return ret;
	});
	m.def("AssignParentGroupToGroupEx", []( PyRprsContext* rprsCtx,  std::string groupChild,  std::string groupParent )
	{

		PYRPR_CHECK_ERROR( rprsAssignParentGroupToGroupEx(  rprsCtx->h,  groupChild.c_str(),  groupParent.c_str()   )  );
		return ret;
	});
	m.def("SetTransformGroup", []( std::string groupChild,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> matrixComponents )
	{
		const rpr_float* matrixComponents___pycast =    matrixComponents.size() == 0 ? nullptr :      &(((rpr_float*)matrixComponents.data())[0]);

		PYRPR_CHECK_ERROR( rprsSetTransformGroup(  groupChild.c_str(),  matrixComponents___pycast   )  );
		return ret;
	});
	m.def("SetTransformGroupEx", []( PyRprsContext* rprsCtx,  std::string groupChild,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> matrixComponents )
	{
		const rpr_float* matrixComponents___pycast =    matrixComponents.size() == 0 ? nullptr :      &(((rpr_float*)matrixComponents.data())[0]);

		PYRPR_CHECK_ERROR( rprsSetTransformGroupEx(  rprsCtx->h,  groupChild.c_str(),  matrixComponents___pycast   )  );
		return ret;
	});
	m.def("CreateContext", []( PyRprsContext* out_rprsCtx )
	{

		PYRPR_CHECK_ERROR( rprsCreateContext(  &(out_rprsCtx->h)   )  );
		return ret;
	});
	m.def("DeleteContext", []( PyRprsContext* rprsCtx )
	{

		PYRPR_CHECK_ERROR( rprsDeleteContext(  rprsCtx->h   )  );
		return ret;
	});
	m.def("ReleaseImportedData", [](  )
	{

		PYRPR_CHECK_ERROR( rprsReleaseImportedData(     )  );
		return ret;
	});
	m.def("DeleteListImportedObjects", []( void* contextX__NOT_USED_ANYMORE )
	{

		PYRPR_CHECK_ERROR( rprsDeleteListImportedObjects(  contextX__NOT_USED_ANYMORE   )  );
		return ret;
	});
	m.def("DeleteListImportedObjectsEx", []( PyRprsContext* rprsCtx )
	{

		PYRPR_CHECK_ERROR( rprsDeleteListImportedObjectsEx(  rprsCtx->h   )  );
		return ret;
	});
	m.attr("RPRS_ANIMATION_MOVEMENTTYPE_TRANSLATION") = 0x1 ;
	m.attr("RPRS_ANIMATION_MOVEMENTTYPE_ROTATION") = 0x2 ;
	m.attr("RPRS_ANIMATION_MOVEMENTTYPE_SCALE") = 0x3 ;



	RPRPY_ADDITIONAL_DEFINES_rprs;


}
