#include "bind_common.h"


//
//
// FILE GENERATED BY PYTHON SCRIPT - DO NOT MODIFY IT DIRECTLY.
//
//


enum class Status : rpr_status {
	SUCCESS = 0 ,
	ERROR_COMPUTE_API_NOT_SUPPORTED = -1 ,
	ERROR_OUT_OF_SYSTEM_MEMORY = -2 ,
	ERROR_OUT_OF_VIDEO_MEMORY = -3 ,
	ERROR_SHADER_COMPILATION = -4 ,
	ERROR_INVALID_LIGHTPATH_EXPR = -5 ,
	ERROR_INVALID_IMAGE = -6 ,
	ERROR_INVALID_AA_METHOD = -7 ,
	ERROR_UNSUPPORTED_IMAGE_FORMAT = -8 ,
	ERROR_INVALID_GL_TEXTURE = -9 ,
	ERROR_INVALID_CL_IMAGE = -10 ,
	ERROR_INVALID_OBJECT = -11 ,
	ERROR_INVALID_PARAMETER = -12 ,
	ERROR_INVALID_TAG = -13 ,
	ERROR_INVALID_LIGHT = -14 ,
	ERROR_INVALID_CONTEXT = -15 ,
	ERROR_UNIMPLEMENTED = -16 ,
	ERROR_INVALID_API_VERSION = -17 ,
	ERROR_INTERNAL_ERROR = -18 ,
	ERROR_IO_ERROR = -19 ,
	ERROR_UNSUPPORTED_SHADER_PARAMETER_TYPE = -20 ,
	ERROR_MATERIAL_STACK_OVERFLOW = -21 ,
	ERROR_INVALID_PARAMETER_TYPE = -22 ,
	ERROR_UNSUPPORTED = -23 ,
	ERROR_OPENCL_OUT_OF_HOST_MEMORY = -24 ,
	ERROR_OPENGL = -25 ,
	ERROR_OPENCL = -26 ,
	ERROR_NULLPTR = -27 ,
	ERROR_NODETYPE = -28 ,
	ERROR_ABORTED = -29 ,
};
enum class ParameterType : rpr_parameter_type {
	UNDEF = 0x0 ,
	FLOAT = 0x1 ,
	FLOAT2 = 0x2 ,
	FLOAT3 = 0x3 ,
	FLOAT4 = 0x4 ,
	IMAGE = 0x5 ,
	STRING = 0x6 ,
	SHADER = 0x7 ,
	UINT = 0x8 ,
	ULONG = 0x9 ,
	LONGLONG = 0xa ,
};
enum class CreationFlags : rpr_creation_flags {
	ENABLE_GPU0 = (1 << 0) ,
	ENABLE_GPU1 = (1 << 1) ,
	ENABLE_GPU2 = (1 << 2) ,
	ENABLE_GPU3 = (1 << 3) ,
	ENABLE_CPU = (1 << 4) ,
	ENABLE_GL_INTEROP = (1 << 5) ,
	ENABLE_GPU4 = (1 << 6) ,
	ENABLE_GPU5 = (1 << 7) ,
	ENABLE_GPU6 = (1 << 8) ,
	ENABLE_GPU7 = (1 << 9) ,
	ENABLE_METAL = (1 << 10) ,
	ENABLE_GPU8 = (1 << 11) ,
	ENABLE_GPU9 = (1 << 12) ,
	ENABLE_GPU10 = (1 << 13) ,
	ENABLE_GPU11 = (1 << 14) ,
	ENABLE_GPU12 = (1 << 15) ,
	ENABLE_GPU13 = (1 << 16) ,
	ENABLE_GPU14 = (1 << 17) ,
	ENABLE_GPU15 = (1 << 18) ,
	ENABLE_HIP = (1 << 19) ,
	ENABLE_OPENCL = (1 << 20) ,
	ENABLE_DEBUG = (uint32_t)(1 << 31) ,
};
enum class FilterType : rpr_aa_filter {
	NONE = 0x0 ,
	BOX = 0x1 ,
	TRIANGLE = 0x2 ,
	GAUSSIAN = 0x3 ,
	MITCHELL = 0x4 ,
	LANCZOS = 0x5 ,
	BLACKMANHARRIS = 0x6 ,
};
enum class ContextSamplerType : rpr_context_sampler_type {
	SOBOL = 0x1 ,
	RANDOM = 0x2 ,
	CMJ = 0x3 ,
};
enum class PrimvarInterpolationType : rpr_primvar_interpolation_type {
	CONSTANT = 0x1 ,
	UNIFORM = 0x2 ,
	VERTEX = 0x3 ,
	FACEVARYING_NORMAL = 0x4 ,
	FACEVARYING_UV = 0x5 ,
};
enum class ShapeType : rpr_shape_type {
	MESH = 0x1 ,
	INSTANCE = 0x2 ,
};
enum class LightType : rpr_light_type {
	POINT = 0x1 ,
	DIRECTIONAL = 0x2 ,
	SPOT = 0x3 ,
	ENVIRONMENT = 0x4 ,
	SKY = 0x5 ,
	IES = 0x6 ,
	SPHERE = 0x7 ,
	DISK = 0x8 ,
};
enum class ContextInfo : rpr_context_info {
	CREATION_FLAGS = 0x102 ,
	CACHE_PATH = 0x103 ,
	RENDER_STATUS = 0x104 ,
	RENDER_STATISTICS = 0x105 ,
	DEVICE_COUNT = 0x106 ,
	PARAMETER_COUNT = 0x107 ,
	ACTIVE_PLUGIN = 0x108 ,
	SCENE = 0x109 ,
	ITERATIONS = 0x10B ,
	IMAGE_FILTER_TYPE = 0x10C ,
	TONE_MAPPING_TYPE = 0x113 ,
	TONE_MAPPING_LINEAR_SCALE = 0x114 ,
	TONE_MAPPING_PHOTO_LINEAR_SENSITIVITY = 0x115 ,
	TONE_MAPPING_PHOTO_LINEAR_EXPOSURE = 0x116 ,
	TONE_MAPPING_PHOTO_LINEAR_FSTOP = 0x117 ,
	TONE_MAPPING_REINHARD02_PRE_SCALE = 0x118 ,
	TONE_MAPPING_REINHARD02_POST_SCALE = 0x119 ,
	TONE_MAPPING_REINHARD02_BURN = 0x11A ,
	MAX_RECURSION = 0x11B ,
	RAY_CAST_EPSILON = 0x11C ,
	RADIANCE_CLAMP = 0x11D ,
	X_FLIP = 0x11E ,
	Y_FLIP = 0x11F ,
	TEXTURE_GAMMA = 0x120 ,
	PDF_THRESHOLD = 0x121 ,
	RENDER_MODE = 0x122 ,
	ROUGHNESS_CAP = 0x123 ,
	DISPLAY_GAMMA = 0x124 ,
	MATERIAL_STACK_SIZE = 0x125 ,
	CUTTING_PLANES = 0x126 ,
	GPU0_NAME = 0x127 ,
	GPU1_NAME = 0x128 ,
	GPU2_NAME = 0x129 ,
	GPU3_NAME = 0x12A ,
	CPU_NAME = 0x12B ,
	GPU4_NAME = 0x12C ,
	GPU5_NAME = 0x12D ,
	GPU6_NAME = 0x12E ,
	GPU7_NAME = 0x12F ,
	TONE_MAPPING_EXPONENTIAL_INTENSITY = 0x130 ,
	FRAMECOUNT = 0x131 ,
	TEXTURE_COMPRESSION = 0x132 ,
	AO_RAY_LENGTH = 0x133 ,
	OOC_TEXTURE_CACHE = 0x134 ,
	PREVIEW = 0x135 ,
	CPU_THREAD_LIMIT = 0x136 ,
	LAST_ERROR_MESSAGE = 0x137 ,
	MAX_DEPTH_DIFFUSE = 0x138 ,
	MAX_DEPTH_GLOSSY = 0x139 ,
	OOC_CACHE_PATH = 0x13a ,
	MAX_DEPTH_REFRACTION = 0x13B ,
	MAX_DEPTH_GLOSSY_REFRACTION = 0x13C ,
	RENDER_LAYER_MASK = 0x13D ,
	SINGLE_LEVEL_BVH_ENABLED = 0x13E ,
	TRANSPARENT_BACKGROUND = 0x13F ,
	MAX_DEPTH_SHADOW = 0x140 ,
	API_VERSION = 0x141 ,
	GPU8_NAME = 0x142 ,
	GPU9_NAME = 0x143 ,
	GPU10_NAME = 0x144 ,
	GPU11_NAME = 0x145 ,
	GPU12_NAME = 0x146 ,
	GPU13_NAME = 0x147 ,
	GPU14_NAME = 0x148 ,
	GPU15_NAME = 0x149 ,
	API_VERSION_MINOR = 0x14A ,
	METAL_PERFORMANCE_SHADER = 0x14B ,
	USER_TEXTURE_0 = 0x14C ,
	USER_TEXTURE_1 = 0x14D ,
	USER_TEXTURE_2 = 0x14E ,
	USER_TEXTURE_3 = 0x14F ,
	MIPMAP_LOD_OFFSET = 0x150 ,
	AO_RAY_COUNT = 0x151 ,
	SAMPLER_TYPE = 0x152 ,
	ADAPTIVE_SAMPLING_TILE_SIZE = 0x153 ,
	ADAPTIVE_SAMPLING_MIN_SPP = 0x154 ,
	ADAPTIVE_SAMPLING_THRESHOLD = 0x155 ,
	TILE_SIZE = 0x156 ,
	LIST_CREATED_CAMERAS = 0x157 ,
	LIST_CREATED_MATERIALNODES = 0x158 ,
	LIST_CREATED_LIGHTS = 0x159 ,
	LIST_CREATED_SHAPES = 0x15A ,
	LIST_CREATED_POSTEFFECTS = 0x15B ,
	LIST_CREATED_HETEROVOLUMES = 0x15C ,
	LIST_CREATED_GRIDS = 0x15D ,
	LIST_CREATED_BUFFERS = 0x15E ,
	LIST_CREATED_IMAGES = 0x15F ,
	LIST_CREATED_FRAMEBUFFERS = 0x160 ,
	LIST_CREATED_SCENES = 0x161 ,
	LIST_CREATED_CURVES = 0x162 ,
	LIST_CREATED_MATERIALSYSTEM = 0x163 ,
	LIST_CREATED_COMPOSITE = 0x164 ,
	LIST_CREATED_LUT = 0x165 ,
	AA_ENABLED = 0x166 ,
	ACTIVE_PIXEL_COUNT = 0x167 ,
	TRACING_ENABLED = 0x168 ,
	TRACING_PATH = 0x169 ,
	TILE_RECT = 0x16A ,
	PLUGIN_VERSION = 0x16B ,
	RUSSIAN_ROULETTE_DEPTH = 0x16C ,
	SHADOW_CATCHER_BAKING = 0x16D ,
	RENDER_UPDATE_CALLBACK_FUNC = 0x16E ,
	RENDER_UPDATE_CALLBACK_DATA = 0x16F ,
	COMPILE_CALLBACK_FUNC = 0x601 ,
	COMPILE_CALLBACK_DATA = 0x602 ,
	TEXTURE_CACHE_PATH = 0x170 ,
	OCIO_CONFIG_PATH = 0x171 ,
	OCIO_RENDERING_COLOR_SPACE = 0x172 ,
	CONTOUR_USE_OBJECTID = 0x173 ,
	CONTOUR_USE_MATERIALID = 0x174 ,
	CONTOUR_USE_NORMAL = 0x175 ,
	CONTOUR_USE_UV = 0x186 ,
	CONTOUR_NORMAL_THRESHOLD = 0x176 ,
	CONTOUR_UV_THRESHOLD = 0x187 ,
	CONTOUR_UV_SECONDARY = 0x194 ,
	CONTOUR_LINEWIDTH_OBJECTID = 0x177 ,
	CONTOUR_LINEWIDTH_MATERIALID = 0x178 ,
	CONTOUR_LINEWIDTH_NORMAL = 0x179 ,
	CONTOUR_LINEWIDTH_UV = 0x188 ,
	CONTOUR_ANTIALIASING = 0x17A ,
	CONTOUR_DEBUG_ENABLED = 0x17F ,
	GPUINTEGRATOR = 0x17B ,
	CPUINTEGRATOR = 0x17C ,
	BEAUTY_MOTION_BLUR = 0x17D ,
	CAUSTICS_REDUCTION = 0x17E ,
	GPU_MEMORY_LIMIT = 0x180 ,
	RENDER_LAYER_LIST = 0x181 ,
	WINDING_ORDER_CORRECTION = 0x182 ,
	DEEP_SUBPIXEL_MERGE_Z_THRESHOLD = 0x183 ,
	DEEP_GPU_ALLOCATION_LEVEL = 0x184 ,
	DEEP_COLOR_ENABLED = 0x185 ,
	FOG_COLOR = 0x189 ,
	FOG_DISTANCE = 0x18A ,
	FOG_HEIGHT = 0x18B ,
	ATMOSPHERE_VOLUME_COLOR = 0x18C ,
	ATMOSPHERE_VOLUME_DENSITY = 0x18D ,
	ATMOSPHERE_VOLUME_RADIANCE_CLAMP = 0x18F ,
	FOG_HEIGHT_OFFSET = 0x18E ,
	INDIRECT_DOWNSAMPLE = 0x190 ,
	CRYPTOMATTE_EXTENDED = 0x191 ,
	CRYPTOMATTE_SPLIT_INDIRECT = 0x192 ,
	FOG_DIRECTION = 0x193 ,
	RANDOM_SEED = 0x1000 ,
	IBL_DISPLAY = 0x195 ,
	FRAMEBUFFER_SAVE_FLOAT32 = 0x196 ,
	UPDATE_TIME_CALLBACK_FUNC = 0x197 ,
	UPDATE_TIME_CALLBACK_DATA = 0x198 ,
	RENDER_TIME_CALLBACK_FUNC = 0x199 ,
	RENDER_TIME_CALLBACK_DATA = 0x19A ,
	FIRST_ITERATION_TIME_CALLBACK_FUNC = 0x19B ,
	FIRST_ITERATION_TIME_CALLBACK_DATA = 0x19C ,
	IMAGE_FILTER_RADIUS = 0x19D ,
	PRECOMPILED_BINARY_PATH = 0x19E ,
	NAME = RPR_OBJECT_NAME,
	UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
};
enum class CameraInfo : rpr_camera_info {
	TRANSFORM = 0x201 ,
	FSTOP = 0x202 ,
	APERTURE_BLADES = 0x203 ,
	RESPONSE = 0x204 ,
	EXPOSURE = 0x205 ,
	FOCAL_LENGTH = 0x206 ,
	SENSOR_SIZE = 0x207 ,
	MODE = 0x208 ,
	ORTHO_WIDTH = 0x209 ,
	ORTHO_HEIGHT = 0x20A ,
	FOCUS_DISTANCE = 0x20B ,
	POSITION = 0x20C ,
	LOOKAT = 0x20D ,
	UP = 0x20E ,
	FOCAL_TILT = 0x20F ,
	LENS_SHIFT = 0x210 ,
	IPD = 0x211 ,
	TILT_CORRECTION = 0x212 ,
	NEAR_PLANE = 0x213 ,
	FAR_PLANE = 0x214 ,
	LINEAR_MOTION = 0x215 ,
	ANGULAR_MOTION = 0x216 ,
	MOTION_TRANSFORMS_COUNT = 0x217 ,
	MOTION_TRANSFORMS = 0x218 ,
	POST_SCALE = 0x219 ,
	UV_DISTORTION = 0x21A ,
	NAME = RPR_OBJECT_NAME,
	UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
};
enum class ImageInfo : rpr_image_info {
	FORMAT = 0x301 ,
	DESC = 0x302 ,
	DATA = 0x303 ,
	DATA_SIZEBYTE = 0x304 ,
	WRAP = 0x305 ,
	FILTER = 0x306 ,
	GAMMA = 0x307 ,
	MIPMAP_ENABLED = 0x308 ,
	MIP_COUNT = 0x309 ,
	GAMMA_FROM_FILE = 0x30A ,
	UDIM = 0x30B ,
	OCIO_COLORSPACE = 0x30C ,
	INTERNAL_COMPRESSION = 0x30D ,
	NAME = RPR_OBJECT_NAME,
	UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
};
enum class Buffer : rpr_buffer_info {
	DESC = 0x350 ,
	DATA = 0x351 ,
	NAME = RPR_OBJECT_NAME,
	UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
};
enum class ShapeInfo : rpr_shape_info {
	TYPE = 0x401 ,
	VIDMEM_USAGE = 0x402 ,
	TRANSFORM = 0x403 ,
	MATERIAL = 0x404 ,
	LINEAR_MOTION = 0x405 ,
	ANGULAR_MOTION = 0x406 ,
	SHADOW_FLAG = 0x408,
	SUBDIVISION_FACTOR = 0x409 ,
	DISPLACEMENT_SCALE = 0x40A ,
	SHADOW_CATCHER_FLAG = 0x40E ,
	VOLUME_MATERIAL = 0x40F ,
	OBJECT_GROUP_ID = 0x410 ,
	SUBDIVISION_CREASEWEIGHT = 0x411 ,
	SUBDIVISION_BOUNDARYINTEROP = 0x412 ,
	DISPLACEMENT_MATERIAL = 0x413 ,
	MATERIALS_PER_FACE = 0x415 ,
	SCALE_MOTION = 0x416 ,
	HETERO_VOLUME = 0x417 ,
	LAYER_MASK = 0x418 ,
	VISIBILITY_PRIMARY_ONLY_FLAG = 0x40C ,
	VISIBILITY_SHADOW = 0x41A ,
	VISIBILITY_REFLECTION = 0x41B ,
	VISIBILITY_REFRACTION = 0x41C ,
	VISIBILITY_TRANSPARENT = 0x41D ,
	VISIBILITY_DIFFUSE = 0x41E ,
	VISIBILITY_GLOSSY_REFLECTION = 0x41F ,
	VISIBILITY_GLOSSY_REFRACTION = 0x420 ,
	VISIBILITY_LIGHT = 0x421 ,
	LIGHT_GROUP_ID = 0x422 ,
	STATIC = 0x423,
	PER_VERTEX_VALUE0 = 0x424,
	PER_VERTEX_VALUE1 = 0x425,
	PER_VERTEX_VALUE2 = 0x426,
	PER_VERTEX_VALUE3 = 0x427,
	REFLECTION_CATCHER_FLAG = 0x428 ,
	OBJECT_ID = 0x429 ,
	SUBDIVISION_AUTO_RATIO_CAP = 0x42A ,
	MOTION_TRANSFORMS_COUNT = 0x42B ,
	MOTION_TRANSFORMS = 0x42C ,
	CONTOUR_IGNORE = 0x42D ,
	RENDER_LAYER_LIST = 0x42E ,
	SHADOW_COLOR = 0x42F ,
	VISIBILITY_RECEIVE_SHADOW = 0x430 ,
	PRIMVARS = 0x431,
	ENVIRONMENT_LIGHT = 0x432,
	NAME = RPR_OBJECT_NAME,
	UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
};
enum class Mesh : rpr_mesh_info {
	POLYGON_COUNT = 0x501 ,
	VERTEX_COUNT = 0x502 ,
	NORMAL_COUNT = 0x503 ,
	UV_COUNT = 0x504 ,
	VERTEX_ARRAY = 0x505 ,
	NORMAL_ARRAY = 0x506 ,
	UV_ARRAY = 0x507 ,
	VERTEX_INDEX_ARRAY = 0x508 ,
	NORMAL_INDEX_ARRAY = 0x509 ,
	UV_INDEX_ARRAY = 0x50A ,
	VERTEX_STRIDE = 0x50C ,
	NORMAL_STRIDE = 0x50D ,
	UV_STRIDE = 0x50E ,
	VERTEX_INDEX_STRIDE = 0x50F ,
	NORMAL_INDEX_STRIDE = 0x510 ,
	UV_INDEX_STRIDE = 0x511 ,
	NUM_FACE_VERTICES_ARRAY = 0x512 ,
	UV2_COUNT = 0x513 ,
	UV2_ARRAY = 0x514 ,
	UV2_INDEX_ARRAY = 0x515 ,
	UV2_STRIDE = 0x516 ,
	UV2_INDEX_STRIDE = 0x517 ,
	UV_DIM = 0x518 ,
	MOTION_DIMENSION = 0x519 ,
	VOLUME_FLAG = 0x51A ,
};
enum class Scene : rpr_scene_info {
	SHAPE_COUNT = 0x701 ,
	LIGHT_COUNT = 0x702 ,
	SHAPE_LIST = 0x704 ,
	LIGHT_LIST = 0x705 ,
	CAMERA = 0x706 ,
	CAMERA_RIGHT = 0x707 ,
	BACKGROUND_IMAGE = 0x708 ,
	AABB = 0x70D ,
	HETEROVOLUME_LIST = 0x70E ,
	HETEROVOLUME_COUNT = 0x70F ,
	CURVE_LIST = 0x710 ,
	CURVE_COUNT = 0x711 ,
	ENVIRONMENT_LIGHT = 0x712 ,
	NAME = RPR_OBJECT_NAME,
	UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
};
enum class Lut : rpr_lut_info {
	LUT_FILENAME = 0x850 ,
	LUT_DATA = 0x851 ,
};
enum class Light : rpr_light_info {
	LIGHT_TYPE = 0x801 ,
	LIGHT_TRANSFORM = 0x803 ,
	LIGHT_GROUP_ID = 0x805 ,
	LIGHT_RENDER_LAYER_LIST = 0x806 ,
	LIGHT_VISIBILITY_LIGHT = 0x807 ,
	LIGHT_NAME = RPR_OBJECT_NAME,
	LIGHT_UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	LIGHT_CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
	POINT_LIGHT_RADIANT_POWER = 0x804 ,
	DIRECTIONAL_LIGHT_RADIANT_POWER = 0x808 ,
	DIRECTIONAL_LIGHT_SHADOW_SOFTNESS_ANGLE = 0x80A ,
	SPOT_LIGHT_RADIANT_POWER = 0x80B ,
	SPOT_LIGHT_CONE_SHAPE = 0x80C ,
	SPOT_LIGHT_IMAGE = 0x80D ,
	ENVIRONMENT_LIGHT_IMAGE = 0x80F ,
	ENVIRONMENT_LIGHT_INTENSITY_SCALE = 0x810 ,
	ENVIRONMENT_LIGHT_PORTAL_LIST = 0x818 ,
	ENVIRONMENT_LIGHT_PORTAL_COUNT = 0x819 ,
	ENVIRONMENT_LIGHT_OVERRIDE_REFLECTION = 0x81A ,
	ENVIRONMENT_LIGHT_OVERRIDE_REFRACTION = 0x81B ,
	ENVIRONMENT_LIGHT_OVERRIDE_TRANSPARENCY = 0x81C ,
	ENVIRONMENT_LIGHT_OVERRIDE_BACKGROUND = 0x81D ,
	ENVIRONMENT_LIGHT_OVERRIDE_IRRADIANCE = 0x81E ,
	SKY_LIGHT_TURBIDITY = 0x812 ,
	SKY_LIGHT_ALBEDO = 0x813 ,
	SKY_LIGHT_SCALE = 0x814 ,
	SKY_LIGHT_DIRECTION = 0x815 ,
	SKY_LIGHT_PORTAL_LIST = 0x820 ,
	SKY_LIGHT_PORTAL_COUNT = 0x821 ,
	IES_LIGHT_RADIANT_POWER = 0x816 ,
	IES_LIGHT_IMAGE_DESC = 0x817 ,
	SPHERE_LIGHT_RADIANT_POWER = 0x822 ,
	SPHERE_LIGHT_RADIUS = 0x824 ,
	DISK_LIGHT_RADIANT_POWER = 0x823 ,
	DISK_LIGHT_RADIUS = 0x825 ,
	DISK_LIGHT_ANGLE = 0x826 ,
	DISK_LIGHT_INNER_ANGLE = 0x827 ,
};
enum class Parameter : rpr_parameter_info {
	NAME = 0x1201 ,
	TYPE = 0x1203 ,
	DESCRIPTION = 0x1204 ,
	VALUE = 0x1205 ,
};
enum class FrameBuffer : rpr_framebuffer_info {
	FORMAT = 0x1301 ,
	DESC = 0x1302 ,
	DATA = 0x1303 ,
	GL_TARGET = 0x1304 ,
	GL_MIPLEVEL = 0x1305 ,
	GL_TEXTURE = 0x1306 ,
	LPE = 0x1307 ,
	NAME = RPR_OBJECT_NAME,
	UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
};
enum class ComponentType : rpr_component_type {
	UINT8 = 0x1 ,
	FLOAT16 = 0x2,
	FLOAT32 = 0x3,
	UNKNOWN = 0x4,
	DEEP = 0x5,
	UINT32 = 0x6,
};
enum class BufferElementType : rpr_buffer_element_type {
	INT32 = 0x1 ,
	FLOAT32 = 0x2 ,
};
enum class RenderMode : rpr_render_mode {
	GLOBAL_ILLUMINATION = 0x1 ,
	DIRECT_ILLUMINATION = 0x2 ,
	DIRECT_ILLUMINATION_NO_SHADOW = 0x3 ,
	WIREFRAME = 0x4 ,
	MATERIAL_INDEX = 0x5 ,
	POSITION = 0x6 ,
	NORMAL = 0x7 ,
	TEXCOORD = 0x8 ,
	AMBIENT_OCCLUSION = 0x9 ,
	DIFFUSE = 0x0a ,
};
enum class CameraMode : rpr_camera_mode {
	PERSPECTIVE = 0x1 ,
	ORTHOGRAPHIC = 0x2 ,
	LATITUDE_LONGITUDE_360 = 0x3 ,
	LATITUDE_LONGITUDE_STEREO = 0x4 ,
	CUBEMAP = 0x5 ,
	CUBEMAP_STEREO = 0x6 ,
	FISHEYE = 0x7 ,
};
enum class ToneMappingOperator : rpr_tonemapping_operator {
	NONE = 0x0 ,
	LINEAR = 0x1 ,
	PHOTOLINEAR = 0x2 ,
	AUTOLINEAR = 0x3 ,
	MAXWHITE = 0x4 ,
	REINHARD02 = 0x5 ,
	EXPONENTIAL = 0x6 ,
};
enum class VolumeType : rpr_volume_type {
	NONE = 0xFFFF ,
	HOMOGENEOUS = 0x0 ,
	HETEROGENEOUS = 0x1 ,
};
enum class MaterialSystemInfo : rpr_material_system_info {
	NODE_LIST = 0x1100,
};
enum class MaterialNodeInfo : rpr_material_node_info {
	TYPE = 0x1101 ,
	SYSTEM = 0x1102 ,
	INPUT_COUNT = 0x1103 ,
	ID = 0x1104 ,
	NAME = RPR_OBJECT_NAME,
	UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
};
enum class MaterialNodeInput : rpr_material_node_input_info {
	NAME = 0x1103 ,
	DESCRIPTION = 0x1105 ,
	VALUE = 0x1106 ,
	TYPE = 0x1107 ,
};
enum class MaterialNodeType : rpr_material_node_type {
	DIFFUSE = 0x1 ,
	MICROFACET = 0x2 ,
	REFLECTION = 0x3 ,
	REFRACTION = 0x4 ,
	MICROFACET_REFRACTION = 0x5 ,
	TRANSPARENT = 0x6 ,
	EMISSIVE = 0x7 ,
	WARD = 0x8 ,
	ADD = 0x9 ,
	BLEND = 0xA ,
	ARITHMETIC = 0xB ,
	FRESNEL = 0xC ,
	NORMAL_MAP = 0xD ,
	IMAGE_TEXTURE = 0xE ,
	NOISE2D_TEXTURE = 0xF ,
	DOT_TEXTURE = 0x10 ,
	GRADIENT_TEXTURE = 0x11 ,
	CHECKER_TEXTURE = 0x12 ,
	CONSTANT_TEXTURE = 0x13 ,
	INPUT_LOOKUP = 0x14 ,
	BLEND_VALUE = 0x16 ,
	PASSTHROUGH = 0x17 ,
	ORENNAYAR = 0x18 ,
	FRESNEL_SCHLICK = 0x19 ,
	DIFFUSE_REFRACTION = 0x1B ,
	BUMP_MAP = 0x1C ,
	VOLUME = 0x1D ,
	MICROFACET_ANISOTROPIC_REFLECTION = 0x1E ,
	MICROFACET_ANISOTROPIC_REFRACTION = 0x1F ,
	TWOSIDED = 0x20 ,
	UV_PROCEDURAL = 0x21 ,
	MICROFACET_BECKMANN = 0x22 ,
	PHONG = 0x23 ,
	BUFFER_SAMPLER = 0x24 ,
	UV_TRIPLANAR = 0x25 ,
	AO_MAP = 0x26 ,
	USER_TEXTURE_0 = 0x27 ,
	USER_TEXTURE_1 = 0x28 ,
	USER_TEXTURE_2 = 0x29 ,
	USER_TEXTURE_3 = 0x2a ,
	UBERV2 = 0x2b,
	TRANSFORM = 0x2c,
	RGB_TO_HSV = 0x2d,
	HSV_TO_RGB = 0x2e,
	USER_TEXTURE = 0x2f,
	TOON_CLOSURE = 0x30,
	TOON_RAMP = 0x31,
	VORONOI_TEXTURE = 0x32 ,
	GRID_SAMPLER = 0x33 ,
	BLACKBODY = 0x34 ,
	RAMP = 0x35 ,
	PRIMVAR_LOOKUP = 0x36 ,
	ROUNDED_CORNER = 0x37 ,
	MATX_DIFFUSE_BRDF = 0x1000,
	MATX_DIELECTRIC_BRDF = 0x1001,
	MATX_GENERALIZED_SCHLICK_BRDF = 0x1002,
	MATX_NOISE3D = 0x1003,
	MATX_TANGENT = 0x1004,
	MATX_NORMAL = 0x1005,
	MATX_POSITION = 0x1006,
	MATX_ROUGHNESS_ANISOTROPY = 0x1007,
	MATX_ROTATE3D = 0x1008,
	MATX_NORMALIZE = 0x1009,
	MATX_IFGREATER = 0x100A,
	MATX_SHEEN_BRDF = 0x100B,
	MATX_DIFFUSE_BTDF = 0x100C,
	MATX_CONVERT = 0x100D,
	MATX_SUBSURFACE_BRDF = 0x100E,
	MATX_DIELECTRIC_BTDF = 0x100F,
	MATX_CONDUCTOR_BRDF = 0x1010,
	MATX_FRESNEL = 0x1011,
	MATX_LUMINANCE = 0x1012,
	MATX_FRACTAL3D = 0x1013,
	MATX_MIX = 0x1014,
	MATX = 0x1015,
	MATX_ARTISTIC_IOR = 0x1016,
	MATX_GENERALIZED_SCHLICK_BTDF = 0x1017,
	MATX_LAYER = 0x1018,
	MATX_THIN_FILM = 0x1019,
	MATX_BITANGENT = 0x101A,
	MATX_TEXCOORD = 0x101B,
	MATX_MODULO = 0x101C,
	MATX_ABSVAL = 0x101D,
	MATX_SIGN = 0x101E,
	MATX_FLOOR = 0x101F,
	MATX_CEIL = 0x1020,
	MATX_ATAN2 = 0x1021,
	MATX_SQRT = 0x1022,
	MATX_LN = 0x1023,
	MATX_EXP = 0x1024,
	MATX_CLAMP = 0x1025,
	MATX_MIN = 0x1026,
	MATX_MAX = 0x1027,
	MATX_MAGNITUDE = 0x1028,
	MATX_CROSSPRODUCT = 0x1029,
	MATX_REMAP = 0x102A,
	MATX_SMOOTHSTEP = 0x102B,
	MATX_RGBTOHSV = 0x102C,
	MATX_HSVTORGB = 0x102D,
	MATX_IFGREATEREQ = 0x102E,
	MATX_IFEQUAL = 0x102F,
	MATX_SWIZZLE = 0x1030,
	MATX_NOISE2D = 0x1031,
	MATX_PLUS = 0x1032,
	MATX_MINUS = 0x1033,
	MATX_DIFFERENCE = 0x1034,
	MATX_BURN = 0x1035,
	MATX_DODGE = 0x1036,
	MATX_SCREEN = 0x1037,
	MATX_OVERLAY = 0x1038,
	MATX_INSIDE = 0x1039,
	MATX_OUTSIDE = 0x103A,
	MATX_RAMPLR = 0x103B,
	MATX_RAMPTB = 0x103C,
	MATX_SPLITLR = 0x103D,
	MATX_SPLITTB = 0x103E,
	MATX_CELLNOISE2D = 0x103F,
	MATX_CELLNOISE3D = 0x1040,
	MATX_ROTATE2D = 0x1041,
	MATX_DOT = 0x1042,
	MATX_RANGE = 0x1043,
	MATX_SWITCH = 0x1044,
	MATX_EXTRACT = 0x1045,
	MATX_COMBINE2 = 0x1046,
	MATX_COMBINE3 = 0x1047,
	MATX_COMBINE4 = 0x1048,
	MATX_TRIPLANARPROJECTION = 0x1049,
	MATX_MULTIPLY = 0x104A,
};
enum class MaterialInput : rpr_material_node_input {
	COLOR = 0x0 ,
	COLOR0 = 0x1 ,
	COLOR1 = 0x2 ,
	NORMAL = 0x3 ,
	UV = 0x4 ,
	DATA = 0x5 ,
	ROUGHNESS = 0x6 ,
	IOR = 0x7 ,
	ROUGHNESS_X = 0x8 ,
	ROUGHNESS_Y = 0x9 ,
	ROTATION = 0xA ,
	WEIGHT = 0xB ,
	OP = 0xC ,
	INVEC = 0xD ,
	UV_SCALE = 0xE ,
	VALUE = 0xF ,
	REFLECTANCE = 0x10 ,
	SCALE = 0x11 ,
	SCATTERING = 0x12 ,
	ABSORBTION = 0x13 ,
	EMISSION = 0x14 ,
	G = 0x15 ,
	MULTISCATTER = 0x16 ,
	COLOR2 = 0x17 ,
	COLOR3 = 0x18 ,
	ANISOTROPIC = 0x19 ,
	FRONTFACE = 0x1a ,
	BACKFACE = 0x1b ,
	ORIGIN = 0x1c ,
	ZAXIS = 0x1d ,
	XAXIS = 0x1e ,
	THRESHOLD = 0x1f ,
	OFFSET = 0x20 ,
	UV_TYPE = 0x21 ,
	RADIUS = 0x22 ,
	SIDE = 0x23 ,
	CAUSTICS = 0x24 ,
	TRANSMISSION_COLOR = 0x25 ,
	THICKNESS = 0x26 ,
	input_0 = 0x27 ,
	input_1 = 0x28 ,
	input_2 = 0x29 ,
	input_3 = 0x2a ,
	input_4 = 0x2b ,
	SCHLICK_APPROXIMATION = 0x2c ,
	APPLYSURFACE = 0x2d ,
	TANGENT = 0x2e ,
	DISTRIBUTION = 0x2f ,
	BASE = 0x30 ,
	TINT = 0x31 ,
	EXPONENT = 0x32 ,
	AMPLITUDE = 0x33 ,
	PIVOT = 0x34 ,
	POSITION = 0x35 ,
	AMOUNT = 0x36 ,
	AXIS = 0x37 ,
	LUMACOEFF = 0x38 ,
	REFLECTIVITY = 0x39 ,
	EDGE_COLOR = 0x3a ,
	VIEW_DIRECTION = 0x3b ,
	INTERIOR = 0x3c ,
	OCTAVES = 0x3d ,
	LACUNARITY = 0x3e ,
	DIMINISH = 0x3f ,
	WRAP_U = 0x40 ,
	WRAP_V = 0x41 ,
	WRAP_W = 0x42 ,
	input_5 = 0x43 ,
	input_6 = 0x44 ,
	input_7 = 0x45 ,
	input_8 = 0x46 ,
	input_9 = 0x47 ,
	input_10 = 0x48 ,
	input_11 = 0x49 ,
	input_12 = 0x4a ,
	input_13 = 0x4b ,
	input_14 = 0x4c ,
	input_15 = 0x4d ,
	DIFFUSE_RAMP = 0x4e ,
	SHADOW = 0x4f ,
	MID = 0x50 ,
	HIGHLIGHT = 0x51 ,
	POSITION1 = 0x52 ,
	POSITION2 = 0x53 ,
	RANGE1 = 0x54 ,
	RANGE2 = 0x55 ,
	INTERPOLATION = 0x56 ,
	RANDOMNESS = 0x57 ,
	DIMENSION = 0x58 ,
	OUTTYPE = 0x59 ,
	DENSITY = 0x5a ,
	DENSITYGRID = 0x5b ,
	DISPLACEMENT = 0x5c ,
	TEMPERATURE = 0x5d ,
	KELVIN = 0x5e ,
	EXTINCTION = 0x5f ,
	THIN_FILM = 0x60 ,
	TOP = 0x61 ,
	HIGHLIGHT2 = 0x62 ,
	SHADOW2 = 0x63 ,
	POSITION_SHADOW = 0x64 ,
	POSITION_HIGHLIGHT = 0x65 ,
	RANGE_SHADOW = 0x66 ,
	RANGE_HIGHLIGHT = 0x67 ,
	TOON_5_COLORS = 0x68 ,
	X = 0x69 ,
	Y = 0x6a ,
	Z = 0x6b ,
	W = 0x6c ,
	LIGHT = 0x6d ,
	MID_IS_ALBEDO = 0x6e ,
	SAMPLES = 0x6f ,
	BASE_NORMAL = 0x70 ,
	UBER_DIFFUSE_COLOR = 0x910,
	UBER_DIFFUSE_WEIGHT = 0x927,
	UBER_DIFFUSE_ROUGHNESS = 0x911,
	UBER_DIFFUSE_NORMAL = 0x912,
	UBER_REFLECTION_COLOR = 0x913,
	UBER_REFLECTION_WEIGHT = 0x928,
	UBER_REFLECTION_ROUGHNESS = 0x914,
	UBER_REFLECTION_ANISOTROPY = 0x915,
	UBER_REFLECTION_ANISOTROPY_ROTATION = 0x916,
	UBER_REFLECTION_MODE = 0x917,
	UBER_REFLECTION_IOR = 0x918,
	UBER_REFLECTION_METALNESS = 0x919,
	UBER_REFLECTION_NORMAL = 0x929,
	UBER_REFLECTION_DIELECTRIC_REFLECTANCE = 0x93e,
	UBER_REFRACTION_COLOR = 0x91A,
	UBER_REFRACTION_WEIGHT = 0x92a,
	UBER_REFRACTION_ROUGHNESS = 0x91B,
	UBER_REFRACTION_IOR = 0x91C,
	UBER_REFRACTION_NORMAL = 0x92b,
	UBER_REFRACTION_THIN_SURFACE = 0x91D,
	UBER_REFRACTION_ABSORPTION_COLOR = 0x92c,
	UBER_REFRACTION_ABSORPTION_DISTANCE = 0x92d,
	UBER_REFRACTION_CAUSTICS = 0x92e,
	UBER_COATING_COLOR = 0x91E,
	UBER_COATING_WEIGHT = 0x92f,
	UBER_COATING_ROUGHNESS = 0x91F,
	UBER_COATING_MODE = 0x920,
	UBER_COATING_IOR = 0x921,
	UBER_COATING_METALNESS = 0x922,
	UBER_COATING_NORMAL = 0x923,
	UBER_COATING_TRANSMISSION_COLOR = 0x930,
	UBER_COATING_THICKNESS = 0x931,
	UBER_SHEEN = 0x932,
	UBER_SHEEN_TINT = 0x933,
	UBER_SHEEN_WEIGHT = 0x934,
	UBER_EMISSION_COLOR = 0x924,
	UBER_EMISSION_WEIGHT = 0x925,
	UBER_EMISSION_MODE = 0x935,
	UBER_TRANSPARENCY = 0x926,
	UBER_SSS_SCATTER_COLOR = 0x937,
	UBER_SSS_SCATTER_DISTANCE = 0x938,
	UBER_SSS_SCATTER_DIRECTION = 0x939,
	UBER_SSS_WEIGHT = 0x93a,
	UBER_SSS_MULTISCATTER = 0x93b,
	UBER_BACKSCATTER_WEIGHT = 0x93c,
	UBER_BACKSCATTER_COLOR = 0x93d,
	ADDRESS = 0x93e,
	TYPE = 0x93f,
	UBER_FRESNEL_SCHLICK_APPROXIMATION = RPR_MATERIAL_INPUT_SCHLICK_APPROXIMATION,
};
enum class InterpolationMode : rpr_interpolation_mode {
	NONE = 0x0,
	LINEAR = 0x1,
	EXPONENTIAL_UP = 0x2,
	EXPONENTIAL_DOWN = 0x3,
	SMOOTH = 0x4,
	BUMP = 0x5,
	SPIKE = 0x6,
};
enum class UberMaterialMode : rpr_ubermaterial_ior_mode {
	PBR = 0x1,
	METALNESS = 0x2,
};
enum class UberMaterialEmissionMode : rpr_ubermaterial_emission_mode {
	SINGLESIDED = 0x1,
	DOUBLESIDED = 0x2,
};
enum class MaterialNodeOp : rpr_material_node_arithmetic_operation {
	ADD = 0x00 ,
	SUB = 0x01 ,
	MUL = 0x02 ,
	DIV = 0x03 ,
	SIN = 0x04 ,
	COS = 0x05 ,
	TAN = 0x06 ,
	SELECT_X = 0x07 ,
	SELECT_Y = 0x08 ,
	SELECT_Z = 0x09 ,
	COMBINE = 0x0A ,
	DOT3 = 0x0B ,
	CROSS3 = 0x0C ,
	LENGTH3 = 0x0D ,
	NORMALIZE3 = 0x0E ,
	POW = 0x0F ,
	ACOS = 0x10 ,
	ASIN = 0x11 ,
	ATAN = 0x12 ,
	AVERAGE_XYZ = 0x13 ,
	AVERAGE = 0x14 ,
	MIN = 0x15 ,
	MAX = 0x16 ,
	FLOOR = 0x17 ,
	MOD = 0x18 ,
	ABS = 0x19 ,
	SHUFFLE_YZWX = 0x1a ,
	SHUFFLE_ZWXY = 0x1b ,
	SHUFFLE_WXYZ = 0x1c ,
	MAT_MUL = 0x1d ,
	SELECT_W = 0x1e ,
	DOT4 = 0x1f ,
	LOG = 0x20 ,
	LOWER_OR_EQUAL = 0x21 ,
	LOWER = 0x22 ,
	GREATER_OR_EQUAL = 0x23 ,
	GREATER = 0x24 ,
	EQUAL = 0x25 ,
	NOT_EQUAL = 0x26 ,
	AND = 0x27 ,
	OR = 0x28 ,
	TERNARY = 0x29 ,
	EXP = 0x2a ,
	ROTATE2D = 0x2b ,
	ROTATE3D = 0x2c ,
	NOP = 0x2d ,
	CEIL = 0x102a ,
	ROUND = 0x102b ,
	SIGN = 0x102c ,
	SQRT = 0x102f ,
	CLAMP = 0x1035 ,
};
enum class MaterialNodeLookup : rpr_material_node_lookup_value {
	UV = 0x0 ,
	N = 0x1 ,
	P = 0x2 ,
	INVEC = 0x3 ,
	OUTVEC = 0x4 ,
	UV1 = 0x5 ,
	P_LOCAL = 0x6 ,
	VERTEX_VALUE0 = 0x7 ,
	VERTEX_VALUE1 = 0x8 ,
	VERTEX_VALUE2 = 0x9 ,
	VERTEX_VALUE3 = 0xa ,
	SHAPE_RANDOM_COLOR = 0xb ,
	OBJECT_ID = 0xc ,
	PRIMITIVE_RANDOM_COLOR = 0xd ,
};
enum class MaterialGradientProceduralType : rpr_material_gradient_procedural_type {
	LINEAR = 0x1 ,
	QUADRATIC = 0x2 ,
	EASING = 0x3 ,
	DIAGONAL = 0x4 ,
	SPHERICAL = 0x5 ,
	QUAD_SPHERE = 0x6 ,
	RADIAL = 0x7 ,
};
enum class MaterialNodeUvtype : rpr_material_node_uvtype_value {
	PLANAR = 0x0 ,
	CYLINDICAL = 0x1 ,
	SPHERICAL = 0x2 ,
	PROJECT = 0x3 ,
};
enum class MaterialNodeTransformType : rpr_material_node_transform_op {
	ROTATE_LOCAL_TO_WORLD = 0x1 ,
};
enum class PostEffectInfo : rpr_post_effect_info {
	TYPE = 0x0 ,
	WHITE_BALANCE_COLOR_SPACE = 0x4 ,
	WHITE_BALANCE_COLOR_TEMPERATURE = 0x5 ,
	SIMPLE_TONEMAP_EXPOSURE = 0x6 ,
	SIMPLE_TONEMAP_CONTRAST = 0x7 ,
	SIMPLE_TONEMAP_ENABLE_TONEMAP = 0x8 ,
	BLOOM_RADIUS = 0x9 ,
	BLOOM_THRESHOLD = 0x0a ,
	BLOOM_WEIGHT = 0x0b ,
	NAME = RPR_OBJECT_NAME,
	UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
};
enum class Aov : rpr_aov {
	COLOR = 0x0 ,
	OPACITY = 0x1 ,
	WORLD_COORDINATE = 0x2 ,
	UV = 0x3 ,
	MATERIAL_ID = 0x4 ,
	GEOMETRIC_NORMAL = 0x5 ,
	SHADING_NORMAL = 0x6 ,
	DEPTH = 0x7 ,
	OBJECT_ID = 0x8 ,
	OBJECT_GROUP_ID = 0x9 ,
	SHADOW_CATCHER = 0x0a ,
	BACKGROUND = 0x0b ,
	EMISSION = 0x0c ,
	VELOCITY = 0x0d ,
	DIRECT_ILLUMINATION = 0x0e ,
	INDIRECT_ILLUMINATION = 0x0f ,
	AO = 0x10 ,
	DIRECT_DIFFUSE = 0x11 ,
	DIRECT_REFLECT = 0x12 ,
	INDIRECT_DIFFUSE = 0x13 ,
	INDIRECT_REFLECT = 0x14 ,
	REFRACT = 0x15 ,
	VOLUME = 0x16 ,
	LIGHT_GROUP0 = 0x17 ,
	LIGHT_GROUP1 = 0x18 ,
	LIGHT_GROUP2 = 0x19 ,
	LIGHT_GROUP3 = 0x1a ,
	DIFFUSE_ALBEDO = 0x1b ,
	VARIANCE = 0x1c ,
	VIEW_SHADING_NORMAL = 0x1d,
	REFLECTION_CATCHER = 0x1e,
	COLOR_RIGHT = 0x1f ,
	LPE_0 = 0x20 ,
	LPE_1 = 0x21 ,
	LPE_2 = 0x22 ,
	LPE_3 = 0x23 ,
	LPE_4 = 0x24 ,
	LPE_5 = 0x25 ,
	LPE_6 = 0x26 ,
	LPE_7 = 0x27 ,
	LPE_8 = 0x28 ,
	CAMERA_NORMAL = 0x29 ,
	MATTE_PASS = 0x2a ,
	SSS = 0x2b ,
	CRYPTOMATTE_MAT0 = 0x30,
	CRYPTOMATTE_MAT1 = 0x31,
	CRYPTOMATTE_MAT2 = 0x32,
	CRYPTOMATTE_MAT3 = 0x33,
	CRYPTOMATTE_MAT4 = 0x34,
	CRYPTOMATTE_MAT5 = 0x35,
	CRYPTOMATTE_OBJ0 = 0x38,
	CRYPTOMATTE_OBJ1 = 0x39,
	CRYPTOMATTE_OBJ2 = 0x3a,
	CRYPTOMATTE_OBJ3 = 0x3b,
	CRYPTOMATTE_OBJ4 = 0x3c,
	CRYPTOMATTE_OBJ5 = 0x3d,
	DEEP_COLOR = 0x40,
	LIGHT_GROUP4 = 0x50 ,
	LIGHT_GROUP5 = 0x51 ,
	LIGHT_GROUP6 = 0x52 ,
	LIGHT_GROUP7 = 0x53 ,
	LIGHT_GROUP8 = 0x54 ,
	LIGHT_GROUP9 = 0x55 ,
	LIGHT_GROUP10 = 0x56 ,
	LIGHT_GROUP11 = 0x57 ,
	LIGHT_GROUP12 = 0x58 ,
	LIGHT_GROUP13 = 0x59 ,
	LIGHT_GROUP14 = 0x5a ,
	LIGHT_GROUP15 = 0x5b ,
	MESH_ID = 0x60 ,
};
enum class PostEffectType : rpr_post_effect_type {
	TONE_MAP = 0x0 ,
	WHITE_BALANCE = 0x1 ,
	SIMPLE_TONEMAP = 0x2 ,
	NORMALIZATION = 0x3 ,
	GAMMA_CORRECTION = 0x4 ,
	BLOOM = 0x5 ,
};
enum class ColorSpace : rpr_color_space {
	SRGB = 0x1 ,
	ADOBE_RGB = 0x2 ,
	REC2020 = 0x3 ,
	DCIP3 = 0x4 ,
};
enum class MaterialNodeInputType : rpr_material_node_input_type {
	FLOAT4 = 0x1 ,
	UINT = 0x2 ,
	NODE = 0x3 ,
	IMAGE = 0x4 ,
	BUFFER = 0x5 ,
	GRID = 0x6 ,
	DATA = 0x7 ,
	LIGHT = 0x8 ,
};
enum class SubdivBoundaryInteropType : rpr_subdiv_boundary_interfop_type {
	EDGE_AND_CORNER = 0x1 ,
	EDGE_ONLY = 0x2 ,
};
enum class ImageWrapType : rpr_image_wrap_type {
	REPEAT = 0x1 ,
	MIRRORED_REPEAT = 0x2 ,
	CLAMP_TO_EDGE = 0x3 ,
	CLAMP_ZERO = 0x5 ,
	CLAMP_ONE = 0x6 ,
};
enum class VoronoiOutType : rpr_voronoi_out_type {
	DISTANCE = 0x1 ,
	COLOR = 0x2 ,
	POSITION = 0x3 ,
};
enum class ImageFilterType : rpr_image_filter_type {
	NEAREST = 0x1 ,
	LINEAR = 0x2 ,
};
enum class CompositeInfo : rpr_composite_info {
	TYPE = 0x1  ,
	FRAMEBUFFER_INPUT_FB = 0x2  ,
	NORMALIZE_INPUT_COLOR = 0x3  ,
	NORMALIZE_INPUT_AOVTYPE = 0x4  ,
	CONSTANT_INPUT_VALUE = 0x5  ,
	LERP_VALUE_INPUT_COLOR0 = 0x6  ,
	LERP_VALUE_INPUT_COLOR1 = 0x7  ,
	LERP_VALUE_INPUT_WEIGHT = 0x8  ,
	ARITHMETIC_INPUT_COLOR0 = 0x9  ,
	ARITHMETIC_INPUT_COLOR1 = 0x0a  ,
	ARITHMETIC_INPUT_OP = 0x0b  ,
	GAMMA_CORRECTION_INPUT_COLOR = 0x0c  ,
	LUT_INPUT_LUT = 0x0d  ,
	LUT_INPUT_COLOR = 0x0e  ,
	NAME = RPR_OBJECT_NAME,
	UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
};
enum class CompositeType : rpr_composite_type {
	ARITHMETIC = 0x1  ,
	LERP_VALUE = 0x2  ,
	INVERSE = 0x3  ,
	NORMALIZE = 0x4  ,
	GAMMA_CORRECTION = 0x5  ,
	EXPOSURE = 0x6  ,
	CONTRAST = 0x7  ,
	SIDE_BY_SIDE = 0x8  ,
	TONEMAP_ACES = 0x9  ,
	TONEMAP_REINHARD = 0xa  ,
	TONEMAP_LINEAR = 0xb  ,
	FRAMEBUFFER = 0xc  ,
	CONSTANT = 0xd  ,
	LUT = 0xe  ,
};
enum class Grid : rpr_grid_parameter {
	SIZE_X = 0x930 ,
	SIZE_Y = 0x931 ,
	SIZE_Z = 0x932 ,
	DATA = 0x933 ,
	DATA_SIZEBYTE = 0x934 ,
	INDICES = 0x936 ,
	INDICES_NUMBER = 0x937 ,
	INDICES_TOPOLOGY = 0x938 ,
	NAME = RPR_OBJECT_NAME,
	UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
};
enum class HeteroVolume : rpr_hetero_volume_parameter {
	TRANSFORM = 0x735 ,
	ALBEDO_V2 = 0x73c ,
	DENSITY_V2 = 0x73d ,
	EMISSION_V2 = 0x73e ,
	ALBEDO_LOOKUP_VALUES = 0x73f ,
	ALBEDO_LOOKUP_VALUES_COUNT = 0x740 ,
	DENSITY_LOOKUP_VALUES = 0x741 ,
	DENSITY_LOOKUP_VALUES_COUNT = 0x742 ,
	EMISSION_LOOKUP_VALUES = 0x743 ,
	EMISSION_LOOKUP_VALUES_COUNT = 0x744 ,
	ALBEDO_SCALE = 0x745 ,
	DENSITY_SCALE = 0x746 ,
	EMISSION_SCALE = 0x747 ,
	NAME = RPR_OBJECT_NAME,
	UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
};
enum class GridIndicesTopology : rpr_grid_indices_topology {
	I_U64 = 0x950 ,
	XYZ_U32 = 0x951 ,
	I_S64 = 0x952 ,
	XYZ_S32 = 0x953 ,
};
enum class Curve : rpr_curve_parameter {
	CONTROLPOINTS_COUNT = 0x830 ,
	CONTROLPOINTS_DATA = 0x831 ,
	CONTROLPOINTS_STRIDE = 0x832 ,
	INDICES_COUNT = 0x833 ,
	INDICES_DATA = 0x834 ,
	RADIUS = 0x835 ,
	UV = 0x836 ,
	COUNT_CURVE = 0x837 ,
	SEGMENTS_PER_CURVE = 0x838 ,
	CREATION_FLAG = 0x839 ,
	NAME = RPR_OBJECT_NAME,
	UNIQUE_ID = RPR_OBJECT_UNIQUE_ID,
	CUSTOM_PTR = RPR_OBJECT_CUSTOM_PTR,
	TRANSFORM = RPR_SHAPE_TRANSFORM,
	MATERIAL = RPR_SHAPE_MATERIAL,
	VISIBILITY_PRIMARY_ONLY_FLAG = RPR_SHAPE_VISIBILITY_PRIMARY_ONLY_FLAG,
	VISIBILITY_SHADOW = RPR_SHAPE_VISIBILITY_SHADOW,
	VISIBILITY_REFLECTION = RPR_SHAPE_VISIBILITY_REFLECTION,
	VISIBILITY_REFRACTION = RPR_SHAPE_VISIBILITY_REFRACTION,
	VISIBILITY_TRANSPARENT = RPR_SHAPE_VISIBILITY_TRANSPARENT,
	VISIBILITY_DIFFUSE = RPR_SHAPE_VISIBILITY_DIFFUSE,
	VISIBILITY_GLOSSY_REFLECTION = RPR_SHAPE_VISIBILITY_GLOSSY_REFLECTION,
	VISIBILITY_GLOSSY_REFRACTION = RPR_SHAPE_VISIBILITY_GLOSSY_REFRACTION,
	VISIBILITY_LIGHT = RPR_SHAPE_VISIBILITY_LIGHT,
	VISIBILITY_RECEIVE_SHADOW = RPR_SHAPE_VISIBILITY_RECEIVE_SHADOW,
};

NB_MODULE(rpr, m) {
	m.attr("VERSION_MAJOR") = 3 ;
	m.attr("VERSION_MINOR") = 1 ;
	m.attr("VERSION_REVISION") = 6 ;
	m.attr("VERSION_BUILD") = 0x1f29f423 ;
	m.attr("VERSION_MAJOR_MINOR_REVISION") = 0x00300106 ;
	m.attr("API_VERSION") = RPR_VERSION_MAJOR_MINOR_REVISION ;
	m.attr("API_VERSION_MINOR") = RPR_VERSION_BUILD ;
	nb::enum_<Status>(m, "Status")
		.value("SUCCESS", Status::SUCCESS)
		.value("ERROR_COMPUTE_API_NOT_SUPPORTED", Status::ERROR_COMPUTE_API_NOT_SUPPORTED)
		.value("ERROR_OUT_OF_SYSTEM_MEMORY", Status::ERROR_OUT_OF_SYSTEM_MEMORY)
		.value("ERROR_OUT_OF_VIDEO_MEMORY", Status::ERROR_OUT_OF_VIDEO_MEMORY)
		.value("ERROR_SHADER_COMPILATION", Status::ERROR_SHADER_COMPILATION)
		.value("ERROR_INVALID_LIGHTPATH_EXPR", Status::ERROR_INVALID_LIGHTPATH_EXPR)
		.value("ERROR_INVALID_IMAGE", Status::ERROR_INVALID_IMAGE)
		.value("ERROR_INVALID_AA_METHOD", Status::ERROR_INVALID_AA_METHOD)
		.value("ERROR_UNSUPPORTED_IMAGE_FORMAT", Status::ERROR_UNSUPPORTED_IMAGE_FORMAT)
		.value("ERROR_INVALID_GL_TEXTURE", Status::ERROR_INVALID_GL_TEXTURE)
		.value("ERROR_INVALID_CL_IMAGE", Status::ERROR_INVALID_CL_IMAGE)
		.value("ERROR_INVALID_OBJECT", Status::ERROR_INVALID_OBJECT)
		.value("ERROR_INVALID_PARAMETER", Status::ERROR_INVALID_PARAMETER)
		.value("ERROR_INVALID_TAG", Status::ERROR_INVALID_TAG)
		.value("ERROR_INVALID_LIGHT", Status::ERROR_INVALID_LIGHT)
		.value("ERROR_INVALID_CONTEXT", Status::ERROR_INVALID_CONTEXT)
		.value("ERROR_UNIMPLEMENTED", Status::ERROR_UNIMPLEMENTED)
		.value("ERROR_INVALID_API_VERSION", Status::ERROR_INVALID_API_VERSION)
		.value("ERROR_INTERNAL_ERROR", Status::ERROR_INTERNAL_ERROR)
		.value("ERROR_IO_ERROR", Status::ERROR_IO_ERROR)
		.value("ERROR_UNSUPPORTED_SHADER_PARAMETER_TYPE", Status::ERROR_UNSUPPORTED_SHADER_PARAMETER_TYPE)
		.value("ERROR_MATERIAL_STACK_OVERFLOW", Status::ERROR_MATERIAL_STACK_OVERFLOW)
		.value("ERROR_INVALID_PARAMETER_TYPE", Status::ERROR_INVALID_PARAMETER_TYPE)
		.value("ERROR_UNSUPPORTED", Status::ERROR_UNSUPPORTED)
		.value("ERROR_OPENCL_OUT_OF_HOST_MEMORY", Status::ERROR_OPENCL_OUT_OF_HOST_MEMORY)
		.value("ERROR_OPENGL", Status::ERROR_OPENGL)
		.value("ERROR_OPENCL", Status::ERROR_OPENCL)
		.value("ERROR_NULLPTR", Status::ERROR_NULLPTR)
		.value("ERROR_NODETYPE", Status::ERROR_NODETYPE)
		.value("ERROR_ABORTED", Status::ERROR_ABORTED)
	;
	nb::enum_<ParameterType>(m, "ParameterType")
		.value("UNDEF", ParameterType::UNDEF)
		.value("FLOAT", ParameterType::FLOAT)
		.value("FLOAT2", ParameterType::FLOAT2)
		.value("FLOAT3", ParameterType::FLOAT3)
		.value("FLOAT4", ParameterType::FLOAT4)
		.value("IMAGE", ParameterType::IMAGE)
		.value("STRING", ParameterType::STRING)
		.value("SHADER", ParameterType::SHADER)
		.value("UINT", ParameterType::UINT)
		.value("ULONG", ParameterType::ULONG)
		.value("LONGLONG", ParameterType::LONGLONG)
	;
	nb::enum_<CreationFlags>(m, "CreationFlags")
		.value("ENABLE_GPU0", CreationFlags::ENABLE_GPU0)
		.value("ENABLE_GPU1", CreationFlags::ENABLE_GPU1)
		.value("ENABLE_GPU2", CreationFlags::ENABLE_GPU2)
		.value("ENABLE_GPU3", CreationFlags::ENABLE_GPU3)
		.value("ENABLE_CPU", CreationFlags::ENABLE_CPU)
		.value("ENABLE_GL_INTEROP", CreationFlags::ENABLE_GL_INTEROP)
		.value("ENABLE_GPU4", CreationFlags::ENABLE_GPU4)
		.value("ENABLE_GPU5", CreationFlags::ENABLE_GPU5)
		.value("ENABLE_GPU6", CreationFlags::ENABLE_GPU6)
		.value("ENABLE_GPU7", CreationFlags::ENABLE_GPU7)
		.value("ENABLE_METAL", CreationFlags::ENABLE_METAL)
		.value("ENABLE_GPU8", CreationFlags::ENABLE_GPU8)
		.value("ENABLE_GPU9", CreationFlags::ENABLE_GPU9)
		.value("ENABLE_GPU10", CreationFlags::ENABLE_GPU10)
		.value("ENABLE_GPU11", CreationFlags::ENABLE_GPU11)
		.value("ENABLE_GPU12", CreationFlags::ENABLE_GPU12)
		.value("ENABLE_GPU13", CreationFlags::ENABLE_GPU13)
		.value("ENABLE_GPU14", CreationFlags::ENABLE_GPU14)
		.value("ENABLE_GPU15", CreationFlags::ENABLE_GPU15)
		.value("ENABLE_HIP", CreationFlags::ENABLE_HIP)
		.value("ENABLE_OPENCL", CreationFlags::ENABLE_OPENCL)
		.value("ENABLE_DEBUG", CreationFlags::ENABLE_DEBUG)
	;
	nb::enum_<FilterType>(m, "FilterType")
		.value("NONE", FilterType::NONE)
		.value("BOX", FilterType::BOX)
		.value("TRIANGLE", FilterType::TRIANGLE)
		.value("GAUSSIAN", FilterType::GAUSSIAN)
		.value("MITCHELL", FilterType::MITCHELL)
		.value("LANCZOS", FilterType::LANCZOS)
		.value("BLACKMANHARRIS", FilterType::BLACKMANHARRIS)
	;
	nb::enum_<ContextSamplerType>(m, "ContextSamplerType")
		.value("SOBOL", ContextSamplerType::SOBOL)
		.value("RANDOM", ContextSamplerType::RANDOM)
		.value("CMJ", ContextSamplerType::CMJ)
	;
	nb::enum_<PrimvarInterpolationType>(m, "PrimvarInterpolationType")
		.value("CONSTANT", PrimvarInterpolationType::CONSTANT)
		.value("UNIFORM", PrimvarInterpolationType::UNIFORM)
		.value("VERTEX", PrimvarInterpolationType::VERTEX)
		.value("FACEVARYING_NORMAL", PrimvarInterpolationType::FACEVARYING_NORMAL)
		.value("FACEVARYING_UV", PrimvarInterpolationType::FACEVARYING_UV)
	;
	nb::enum_<ShapeType>(m, "ShapeType")
		.value("MESH", ShapeType::MESH)
		.value("INSTANCE", ShapeType::INSTANCE)
	;
	nb::enum_<LightType>(m, "LightType")
		.value("POINT", LightType::POINT)
		.value("DIRECTIONAL", LightType::DIRECTIONAL)
		.value("SPOT", LightType::SPOT)
		.value("ENVIRONMENT", LightType::ENVIRONMENT)
		.value("SKY", LightType::SKY)
		.value("IES", LightType::IES)
		.value("SPHERE", LightType::SPHERE)
		.value("DISK", LightType::DISK)
	;
	m.attr("OBJECT_NAME") = 0x777777 ;
	m.attr("OBJECT_UNIQUE_ID") = 0x777778 ;
	m.attr("OBJECT_CUSTOM_PTR") = 0x777779 ;
	nb::enum_<ContextInfo>(m, "ContextInfo")
		.value("CREATION_FLAGS", ContextInfo::CREATION_FLAGS)
		.value("CACHE_PATH", ContextInfo::CACHE_PATH)
		.value("RENDER_STATUS", ContextInfo::RENDER_STATUS)
		.value("RENDER_STATISTICS", ContextInfo::RENDER_STATISTICS)
		.value("DEVICE_COUNT", ContextInfo::DEVICE_COUNT)
		.value("PARAMETER_COUNT", ContextInfo::PARAMETER_COUNT)
		.value("ACTIVE_PLUGIN", ContextInfo::ACTIVE_PLUGIN)
		.value("SCENE", ContextInfo::SCENE)
		.value("ITERATIONS", ContextInfo::ITERATIONS)
		.value("IMAGE_FILTER_TYPE", ContextInfo::IMAGE_FILTER_TYPE)
		.value("TONE_MAPPING_TYPE", ContextInfo::TONE_MAPPING_TYPE)
		.value("TONE_MAPPING_LINEAR_SCALE", ContextInfo::TONE_MAPPING_LINEAR_SCALE)
		.value("TONE_MAPPING_PHOTO_LINEAR_SENSITIVITY", ContextInfo::TONE_MAPPING_PHOTO_LINEAR_SENSITIVITY)
		.value("TONE_MAPPING_PHOTO_LINEAR_EXPOSURE", ContextInfo::TONE_MAPPING_PHOTO_LINEAR_EXPOSURE)
		.value("TONE_MAPPING_PHOTO_LINEAR_FSTOP", ContextInfo::TONE_MAPPING_PHOTO_LINEAR_FSTOP)
		.value("TONE_MAPPING_REINHARD02_PRE_SCALE", ContextInfo::TONE_MAPPING_REINHARD02_PRE_SCALE)
		.value("TONE_MAPPING_REINHARD02_POST_SCALE", ContextInfo::TONE_MAPPING_REINHARD02_POST_SCALE)
		.value("TONE_MAPPING_REINHARD02_BURN", ContextInfo::TONE_MAPPING_REINHARD02_BURN)
		.value("MAX_RECURSION", ContextInfo::MAX_RECURSION)
		.value("RAY_CAST_EPSILON", ContextInfo::RAY_CAST_EPSILON)
		.value("RADIANCE_CLAMP", ContextInfo::RADIANCE_CLAMP)
		.value("X_FLIP", ContextInfo::X_FLIP)
		.value("Y_FLIP", ContextInfo::Y_FLIP)
		.value("TEXTURE_GAMMA", ContextInfo::TEXTURE_GAMMA)
		.value("PDF_THRESHOLD", ContextInfo::PDF_THRESHOLD)
		.value("RENDER_MODE", ContextInfo::RENDER_MODE)
		.value("ROUGHNESS_CAP", ContextInfo::ROUGHNESS_CAP)
		.value("DISPLAY_GAMMA", ContextInfo::DISPLAY_GAMMA)
		.value("MATERIAL_STACK_SIZE", ContextInfo::MATERIAL_STACK_SIZE)
		.value("CUTTING_PLANES", ContextInfo::CUTTING_PLANES)
		.value("GPU0_NAME", ContextInfo::GPU0_NAME)
		.value("GPU1_NAME", ContextInfo::GPU1_NAME)
		.value("GPU2_NAME", ContextInfo::GPU2_NAME)
		.value("GPU3_NAME", ContextInfo::GPU3_NAME)
		.value("CPU_NAME", ContextInfo::CPU_NAME)
		.value("GPU4_NAME", ContextInfo::GPU4_NAME)
		.value("GPU5_NAME", ContextInfo::GPU5_NAME)
		.value("GPU6_NAME", ContextInfo::GPU6_NAME)
		.value("GPU7_NAME", ContextInfo::GPU7_NAME)
		.value("TONE_MAPPING_EXPONENTIAL_INTENSITY", ContextInfo::TONE_MAPPING_EXPONENTIAL_INTENSITY)
		.value("FRAMECOUNT", ContextInfo::FRAMECOUNT)
		.value("TEXTURE_COMPRESSION", ContextInfo::TEXTURE_COMPRESSION)
		.value("AO_RAY_LENGTH", ContextInfo::AO_RAY_LENGTH)
		.value("OOC_TEXTURE_CACHE", ContextInfo::OOC_TEXTURE_CACHE)
		.value("PREVIEW", ContextInfo::PREVIEW)
		.value("CPU_THREAD_LIMIT", ContextInfo::CPU_THREAD_LIMIT)
		.value("LAST_ERROR_MESSAGE", ContextInfo::LAST_ERROR_MESSAGE)
		.value("MAX_DEPTH_DIFFUSE", ContextInfo::MAX_DEPTH_DIFFUSE)
		.value("MAX_DEPTH_GLOSSY", ContextInfo::MAX_DEPTH_GLOSSY)
		.value("OOC_CACHE_PATH", ContextInfo::OOC_CACHE_PATH)
		.value("MAX_DEPTH_REFRACTION", ContextInfo::MAX_DEPTH_REFRACTION)
		.value("MAX_DEPTH_GLOSSY_REFRACTION", ContextInfo::MAX_DEPTH_GLOSSY_REFRACTION)
		.value("RENDER_LAYER_MASK", ContextInfo::RENDER_LAYER_MASK)
		.value("SINGLE_LEVEL_BVH_ENABLED", ContextInfo::SINGLE_LEVEL_BVH_ENABLED)
		.value("TRANSPARENT_BACKGROUND", ContextInfo::TRANSPARENT_BACKGROUND)
		.value("MAX_DEPTH_SHADOW", ContextInfo::MAX_DEPTH_SHADOW)
		.value("API_VERSION", ContextInfo::API_VERSION)
		.value("GPU8_NAME", ContextInfo::GPU8_NAME)
		.value("GPU9_NAME", ContextInfo::GPU9_NAME)
		.value("GPU10_NAME", ContextInfo::GPU10_NAME)
		.value("GPU11_NAME", ContextInfo::GPU11_NAME)
		.value("GPU12_NAME", ContextInfo::GPU12_NAME)
		.value("GPU13_NAME", ContextInfo::GPU13_NAME)
		.value("GPU14_NAME", ContextInfo::GPU14_NAME)
		.value("GPU15_NAME", ContextInfo::GPU15_NAME)
		.value("API_VERSION_MINOR", ContextInfo::API_VERSION_MINOR)
		.value("METAL_PERFORMANCE_SHADER", ContextInfo::METAL_PERFORMANCE_SHADER)
		.value("USER_TEXTURE_0", ContextInfo::USER_TEXTURE_0)
		.value("USER_TEXTURE_1", ContextInfo::USER_TEXTURE_1)
		.value("USER_TEXTURE_2", ContextInfo::USER_TEXTURE_2)
		.value("USER_TEXTURE_3", ContextInfo::USER_TEXTURE_3)
		.value("MIPMAP_LOD_OFFSET", ContextInfo::MIPMAP_LOD_OFFSET)
		.value("AO_RAY_COUNT", ContextInfo::AO_RAY_COUNT)
		.value("SAMPLER_TYPE", ContextInfo::SAMPLER_TYPE)
		.value("ADAPTIVE_SAMPLING_TILE_SIZE", ContextInfo::ADAPTIVE_SAMPLING_TILE_SIZE)
		.value("ADAPTIVE_SAMPLING_MIN_SPP", ContextInfo::ADAPTIVE_SAMPLING_MIN_SPP)
		.value("ADAPTIVE_SAMPLING_THRESHOLD", ContextInfo::ADAPTIVE_SAMPLING_THRESHOLD)
		.value("TILE_SIZE", ContextInfo::TILE_SIZE)
		.value("LIST_CREATED_CAMERAS", ContextInfo::LIST_CREATED_CAMERAS)
		.value("LIST_CREATED_MATERIALNODES", ContextInfo::LIST_CREATED_MATERIALNODES)
		.value("LIST_CREATED_LIGHTS", ContextInfo::LIST_CREATED_LIGHTS)
		.value("LIST_CREATED_SHAPES", ContextInfo::LIST_CREATED_SHAPES)
		.value("LIST_CREATED_POSTEFFECTS", ContextInfo::LIST_CREATED_POSTEFFECTS)
		.value("LIST_CREATED_HETEROVOLUMES", ContextInfo::LIST_CREATED_HETEROVOLUMES)
		.value("LIST_CREATED_GRIDS", ContextInfo::LIST_CREATED_GRIDS)
		.value("LIST_CREATED_BUFFERS", ContextInfo::LIST_CREATED_BUFFERS)
		.value("LIST_CREATED_IMAGES", ContextInfo::LIST_CREATED_IMAGES)
		.value("LIST_CREATED_FRAMEBUFFERS", ContextInfo::LIST_CREATED_FRAMEBUFFERS)
		.value("LIST_CREATED_SCENES", ContextInfo::LIST_CREATED_SCENES)
		.value("LIST_CREATED_CURVES", ContextInfo::LIST_CREATED_CURVES)
		.value("LIST_CREATED_MATERIALSYSTEM", ContextInfo::LIST_CREATED_MATERIALSYSTEM)
		.value("LIST_CREATED_COMPOSITE", ContextInfo::LIST_CREATED_COMPOSITE)
		.value("LIST_CREATED_LUT", ContextInfo::LIST_CREATED_LUT)
		.value("AA_ENABLED", ContextInfo::AA_ENABLED)
		.value("ACTIVE_PIXEL_COUNT", ContextInfo::ACTIVE_PIXEL_COUNT)
		.value("TRACING_ENABLED", ContextInfo::TRACING_ENABLED)
		.value("TRACING_PATH", ContextInfo::TRACING_PATH)
		.value("TILE_RECT", ContextInfo::TILE_RECT)
		.value("PLUGIN_VERSION", ContextInfo::PLUGIN_VERSION)
		.value("RUSSIAN_ROULETTE_DEPTH", ContextInfo::RUSSIAN_ROULETTE_DEPTH)
		.value("SHADOW_CATCHER_BAKING", ContextInfo::SHADOW_CATCHER_BAKING)
		.value("RENDER_UPDATE_CALLBACK_FUNC", ContextInfo::RENDER_UPDATE_CALLBACK_FUNC)
		.value("RENDER_UPDATE_CALLBACK_DATA", ContextInfo::RENDER_UPDATE_CALLBACK_DATA)
		.value("COMPILE_CALLBACK_FUNC", ContextInfo::COMPILE_CALLBACK_FUNC)
		.value("COMPILE_CALLBACK_DATA", ContextInfo::COMPILE_CALLBACK_DATA)
		.value("TEXTURE_CACHE_PATH", ContextInfo::TEXTURE_CACHE_PATH)
		.value("OCIO_CONFIG_PATH", ContextInfo::OCIO_CONFIG_PATH)
		.value("OCIO_RENDERING_COLOR_SPACE", ContextInfo::OCIO_RENDERING_COLOR_SPACE)
		.value("CONTOUR_USE_OBJECTID", ContextInfo::CONTOUR_USE_OBJECTID)
		.value("CONTOUR_USE_MATERIALID", ContextInfo::CONTOUR_USE_MATERIALID)
		.value("CONTOUR_USE_NORMAL", ContextInfo::CONTOUR_USE_NORMAL)
		.value("CONTOUR_USE_UV", ContextInfo::CONTOUR_USE_UV)
		.value("CONTOUR_NORMAL_THRESHOLD", ContextInfo::CONTOUR_NORMAL_THRESHOLD)
		.value("CONTOUR_UV_THRESHOLD", ContextInfo::CONTOUR_UV_THRESHOLD)
		.value("CONTOUR_UV_SECONDARY", ContextInfo::CONTOUR_UV_SECONDARY)
		.value("CONTOUR_LINEWIDTH_OBJECTID", ContextInfo::CONTOUR_LINEWIDTH_OBJECTID)
		.value("CONTOUR_LINEWIDTH_MATERIALID", ContextInfo::CONTOUR_LINEWIDTH_MATERIALID)
		.value("CONTOUR_LINEWIDTH_NORMAL", ContextInfo::CONTOUR_LINEWIDTH_NORMAL)
		.value("CONTOUR_LINEWIDTH_UV", ContextInfo::CONTOUR_LINEWIDTH_UV)
		.value("CONTOUR_ANTIALIASING", ContextInfo::CONTOUR_ANTIALIASING)
		.value("CONTOUR_DEBUG_ENABLED", ContextInfo::CONTOUR_DEBUG_ENABLED)
		.value("GPUINTEGRATOR", ContextInfo::GPUINTEGRATOR)
		.value("CPUINTEGRATOR", ContextInfo::CPUINTEGRATOR)
		.value("BEAUTY_MOTION_BLUR", ContextInfo::BEAUTY_MOTION_BLUR)
		.value("CAUSTICS_REDUCTION", ContextInfo::CAUSTICS_REDUCTION)
		.value("GPU_MEMORY_LIMIT", ContextInfo::GPU_MEMORY_LIMIT)
		.value("RENDER_LAYER_LIST", ContextInfo::RENDER_LAYER_LIST)
		.value("WINDING_ORDER_CORRECTION", ContextInfo::WINDING_ORDER_CORRECTION)
		.value("DEEP_SUBPIXEL_MERGE_Z_THRESHOLD", ContextInfo::DEEP_SUBPIXEL_MERGE_Z_THRESHOLD)
		.value("DEEP_GPU_ALLOCATION_LEVEL", ContextInfo::DEEP_GPU_ALLOCATION_LEVEL)
		.value("DEEP_COLOR_ENABLED", ContextInfo::DEEP_COLOR_ENABLED)
		.value("FOG_COLOR", ContextInfo::FOG_COLOR)
		.value("FOG_DISTANCE", ContextInfo::FOG_DISTANCE)
		.value("FOG_HEIGHT", ContextInfo::FOG_HEIGHT)
		.value("ATMOSPHERE_VOLUME_COLOR", ContextInfo::ATMOSPHERE_VOLUME_COLOR)
		.value("ATMOSPHERE_VOLUME_DENSITY", ContextInfo::ATMOSPHERE_VOLUME_DENSITY)
		.value("ATMOSPHERE_VOLUME_RADIANCE_CLAMP", ContextInfo::ATMOSPHERE_VOLUME_RADIANCE_CLAMP)
		.value("FOG_HEIGHT_OFFSET", ContextInfo::FOG_HEIGHT_OFFSET)
		.value("INDIRECT_DOWNSAMPLE", ContextInfo::INDIRECT_DOWNSAMPLE)
		.value("CRYPTOMATTE_EXTENDED", ContextInfo::CRYPTOMATTE_EXTENDED)
		.value("CRYPTOMATTE_SPLIT_INDIRECT", ContextInfo::CRYPTOMATTE_SPLIT_INDIRECT)
		.value("FOG_DIRECTION", ContextInfo::FOG_DIRECTION)
		.value("RANDOM_SEED", ContextInfo::RANDOM_SEED)
		.value("IBL_DISPLAY", ContextInfo::IBL_DISPLAY)
		.value("FRAMEBUFFER_SAVE_FLOAT32", ContextInfo::FRAMEBUFFER_SAVE_FLOAT32)
		.value("UPDATE_TIME_CALLBACK_FUNC", ContextInfo::UPDATE_TIME_CALLBACK_FUNC)
		.value("UPDATE_TIME_CALLBACK_DATA", ContextInfo::UPDATE_TIME_CALLBACK_DATA)
		.value("RENDER_TIME_CALLBACK_FUNC", ContextInfo::RENDER_TIME_CALLBACK_FUNC)
		.value("RENDER_TIME_CALLBACK_DATA", ContextInfo::RENDER_TIME_CALLBACK_DATA)
		.value("FIRST_ITERATION_TIME_CALLBACK_FUNC", ContextInfo::FIRST_ITERATION_TIME_CALLBACK_FUNC)
		.value("FIRST_ITERATION_TIME_CALLBACK_DATA", ContextInfo::FIRST_ITERATION_TIME_CALLBACK_DATA)
		.value("IMAGE_FILTER_RADIUS", ContextInfo::IMAGE_FILTER_RADIUS)
		.value("PRECOMPILED_BINARY_PATH", ContextInfo::PRECOMPILED_BINARY_PATH)
		.value("NAME", ContextInfo::NAME)
		.value("UNIQUE_ID", ContextInfo::UNIQUE_ID)
		.value("CUSTOM_PTR", ContextInfo::CUSTOM_PTR)
	;
	nb::enum_<CameraInfo>(m, "CameraInfo")
		.value("TRANSFORM", CameraInfo::TRANSFORM)
		.value("FSTOP", CameraInfo::FSTOP)
		.value("APERTURE_BLADES", CameraInfo::APERTURE_BLADES)
		.value("RESPONSE", CameraInfo::RESPONSE)
		.value("EXPOSURE", CameraInfo::EXPOSURE)
		.value("FOCAL_LENGTH", CameraInfo::FOCAL_LENGTH)
		.value("SENSOR_SIZE", CameraInfo::SENSOR_SIZE)
		.value("MODE", CameraInfo::MODE)
		.value("ORTHO_WIDTH", CameraInfo::ORTHO_WIDTH)
		.value("ORTHO_HEIGHT", CameraInfo::ORTHO_HEIGHT)
		.value("FOCUS_DISTANCE", CameraInfo::FOCUS_DISTANCE)
		.value("POSITION", CameraInfo::POSITION)
		.value("LOOKAT", CameraInfo::LOOKAT)
		.value("UP", CameraInfo::UP)
		.value("FOCAL_TILT", CameraInfo::FOCAL_TILT)
		.value("LENS_SHIFT", CameraInfo::LENS_SHIFT)
		.value("IPD", CameraInfo::IPD)
		.value("TILT_CORRECTION", CameraInfo::TILT_CORRECTION)
		.value("NEAR_PLANE", CameraInfo::NEAR_PLANE)
		.value("FAR_PLANE", CameraInfo::FAR_PLANE)
		.value("LINEAR_MOTION", CameraInfo::LINEAR_MOTION)
		.value("ANGULAR_MOTION", CameraInfo::ANGULAR_MOTION)
		.value("MOTION_TRANSFORMS_COUNT", CameraInfo::MOTION_TRANSFORMS_COUNT)
		.value("MOTION_TRANSFORMS", CameraInfo::MOTION_TRANSFORMS)
		.value("POST_SCALE", CameraInfo::POST_SCALE)
		.value("UV_DISTORTION", CameraInfo::UV_DISTORTION)
		.value("NAME", CameraInfo::NAME)
		.value("UNIQUE_ID", CameraInfo::UNIQUE_ID)
		.value("CUSTOM_PTR", CameraInfo::CUSTOM_PTR)
	;
	nb::enum_<ImageInfo>(m, "ImageInfo")
		.value("FORMAT", ImageInfo::FORMAT)
		.value("DESC", ImageInfo::DESC)
		.value("DATA", ImageInfo::DATA)
		.value("DATA_SIZEBYTE", ImageInfo::DATA_SIZEBYTE)
		.value("WRAP", ImageInfo::WRAP)
		.value("FILTER", ImageInfo::FILTER)
		.value("GAMMA", ImageInfo::GAMMA)
		.value("MIPMAP_ENABLED", ImageInfo::MIPMAP_ENABLED)
		.value("MIP_COUNT", ImageInfo::MIP_COUNT)
		.value("GAMMA_FROM_FILE", ImageInfo::GAMMA_FROM_FILE)
		.value("UDIM", ImageInfo::UDIM)
		.value("OCIO_COLORSPACE", ImageInfo::OCIO_COLORSPACE)
		.value("INTERNAL_COMPRESSION", ImageInfo::INTERNAL_COMPRESSION)
		.value("NAME", ImageInfo::NAME)
		.value("UNIQUE_ID", ImageInfo::UNIQUE_ID)
		.value("CUSTOM_PTR", ImageInfo::CUSTOM_PTR)
	;
	nb::enum_<Buffer>(m, "Buffer")
		.value("DESC", Buffer::DESC)
		.value("DATA", Buffer::DATA)
		.value("NAME", Buffer::NAME)
		.value("UNIQUE_ID", Buffer::UNIQUE_ID)
		.value("CUSTOM_PTR", Buffer::CUSTOM_PTR)
	;
	nb::enum_<ShapeInfo>(m, "ShapeInfo")
		.value("TYPE", ShapeInfo::TYPE)
		.value("VIDMEM_USAGE", ShapeInfo::VIDMEM_USAGE)
		.value("TRANSFORM", ShapeInfo::TRANSFORM)
		.value("MATERIAL", ShapeInfo::MATERIAL)
		.value("LINEAR_MOTION", ShapeInfo::LINEAR_MOTION)
		.value("ANGULAR_MOTION", ShapeInfo::ANGULAR_MOTION)
		.value("SHADOW_FLAG", ShapeInfo::SHADOW_FLAG)
		.value("SUBDIVISION_FACTOR", ShapeInfo::SUBDIVISION_FACTOR)
		.value("DISPLACEMENT_SCALE", ShapeInfo::DISPLACEMENT_SCALE)
		.value("SHADOW_CATCHER_FLAG", ShapeInfo::SHADOW_CATCHER_FLAG)
		.value("VOLUME_MATERIAL", ShapeInfo::VOLUME_MATERIAL)
		.value("OBJECT_GROUP_ID", ShapeInfo::OBJECT_GROUP_ID)
		.value("SUBDIVISION_CREASEWEIGHT", ShapeInfo::SUBDIVISION_CREASEWEIGHT)
		.value("SUBDIVISION_BOUNDARYINTEROP", ShapeInfo::SUBDIVISION_BOUNDARYINTEROP)
		.value("DISPLACEMENT_MATERIAL", ShapeInfo::DISPLACEMENT_MATERIAL)
		.value("MATERIALS_PER_FACE", ShapeInfo::MATERIALS_PER_FACE)
		.value("SCALE_MOTION", ShapeInfo::SCALE_MOTION)
		.value("HETERO_VOLUME", ShapeInfo::HETERO_VOLUME)
		.value("LAYER_MASK", ShapeInfo::LAYER_MASK)
		.value("VISIBILITY_PRIMARY_ONLY_FLAG", ShapeInfo::VISIBILITY_PRIMARY_ONLY_FLAG)
		.value("VISIBILITY_SHADOW", ShapeInfo::VISIBILITY_SHADOW)
		.value("VISIBILITY_REFLECTION", ShapeInfo::VISIBILITY_REFLECTION)
		.value("VISIBILITY_REFRACTION", ShapeInfo::VISIBILITY_REFRACTION)
		.value("VISIBILITY_TRANSPARENT", ShapeInfo::VISIBILITY_TRANSPARENT)
		.value("VISIBILITY_DIFFUSE", ShapeInfo::VISIBILITY_DIFFUSE)
		.value("VISIBILITY_GLOSSY_REFLECTION", ShapeInfo::VISIBILITY_GLOSSY_REFLECTION)
		.value("VISIBILITY_GLOSSY_REFRACTION", ShapeInfo::VISIBILITY_GLOSSY_REFRACTION)
		.value("VISIBILITY_LIGHT", ShapeInfo::VISIBILITY_LIGHT)
		.value("LIGHT_GROUP_ID", ShapeInfo::LIGHT_GROUP_ID)
		.value("STATIC", ShapeInfo::STATIC)
		.value("PER_VERTEX_VALUE0", ShapeInfo::PER_VERTEX_VALUE0)
		.value("PER_VERTEX_VALUE1", ShapeInfo::PER_VERTEX_VALUE1)
		.value("PER_VERTEX_VALUE2", ShapeInfo::PER_VERTEX_VALUE2)
		.value("PER_VERTEX_VALUE3", ShapeInfo::PER_VERTEX_VALUE3)
		.value("REFLECTION_CATCHER_FLAG", ShapeInfo::REFLECTION_CATCHER_FLAG)
		.value("OBJECT_ID", ShapeInfo::OBJECT_ID)
		.value("SUBDIVISION_AUTO_RATIO_CAP", ShapeInfo::SUBDIVISION_AUTO_RATIO_CAP)
		.value("MOTION_TRANSFORMS_COUNT", ShapeInfo::MOTION_TRANSFORMS_COUNT)
		.value("MOTION_TRANSFORMS", ShapeInfo::MOTION_TRANSFORMS)
		.value("CONTOUR_IGNORE", ShapeInfo::CONTOUR_IGNORE)
		.value("RENDER_LAYER_LIST", ShapeInfo::RENDER_LAYER_LIST)
		.value("SHADOW_COLOR", ShapeInfo::SHADOW_COLOR)
		.value("VISIBILITY_RECEIVE_SHADOW", ShapeInfo::VISIBILITY_RECEIVE_SHADOW)
		.value("PRIMVARS", ShapeInfo::PRIMVARS)
		.value("ENVIRONMENT_LIGHT", ShapeInfo::ENVIRONMENT_LIGHT)
		.value("NAME", ShapeInfo::NAME)
		.value("UNIQUE_ID", ShapeInfo::UNIQUE_ID)
		.value("CUSTOM_PTR", ShapeInfo::CUSTOM_PTR)
	;
	nb::enum_<Mesh>(m, "Mesh")
		.value("POLYGON_COUNT", Mesh::POLYGON_COUNT)
		.value("VERTEX_COUNT", Mesh::VERTEX_COUNT)
		.value("NORMAL_COUNT", Mesh::NORMAL_COUNT)
		.value("UV_COUNT", Mesh::UV_COUNT)
		.value("VERTEX_ARRAY", Mesh::VERTEX_ARRAY)
		.value("NORMAL_ARRAY", Mesh::NORMAL_ARRAY)
		.value("UV_ARRAY", Mesh::UV_ARRAY)
		.value("VERTEX_INDEX_ARRAY", Mesh::VERTEX_INDEX_ARRAY)
		.value("NORMAL_INDEX_ARRAY", Mesh::NORMAL_INDEX_ARRAY)
		.value("UV_INDEX_ARRAY", Mesh::UV_INDEX_ARRAY)
		.value("VERTEX_STRIDE", Mesh::VERTEX_STRIDE)
		.value("NORMAL_STRIDE", Mesh::NORMAL_STRIDE)
		.value("UV_STRIDE", Mesh::UV_STRIDE)
		.value("VERTEX_INDEX_STRIDE", Mesh::VERTEX_INDEX_STRIDE)
		.value("NORMAL_INDEX_STRIDE", Mesh::NORMAL_INDEX_STRIDE)
		.value("UV_INDEX_STRIDE", Mesh::UV_INDEX_STRIDE)
		.value("NUM_FACE_VERTICES_ARRAY", Mesh::NUM_FACE_VERTICES_ARRAY)
		.value("UV2_COUNT", Mesh::UV2_COUNT)
		.value("UV2_ARRAY", Mesh::UV2_ARRAY)
		.value("UV2_INDEX_ARRAY", Mesh::UV2_INDEX_ARRAY)
		.value("UV2_STRIDE", Mesh::UV2_STRIDE)
		.value("UV2_INDEX_STRIDE", Mesh::UV2_INDEX_STRIDE)
		.value("UV_DIM", Mesh::UV_DIM)
		.value("MOTION_DIMENSION", Mesh::MOTION_DIMENSION)
		.value("VOLUME_FLAG", Mesh::VOLUME_FLAG)
	;
	nb::enum_<Scene>(m, "Scene")
		.value("SHAPE_COUNT", Scene::SHAPE_COUNT)
		.value("LIGHT_COUNT", Scene::LIGHT_COUNT)
		.value("SHAPE_LIST", Scene::SHAPE_LIST)
		.value("LIGHT_LIST", Scene::LIGHT_LIST)
		.value("CAMERA", Scene::CAMERA)
		.value("CAMERA_RIGHT", Scene::CAMERA_RIGHT)
		.value("BACKGROUND_IMAGE", Scene::BACKGROUND_IMAGE)
		.value("AABB", Scene::AABB)
		.value("HETEROVOLUME_LIST", Scene::HETEROVOLUME_LIST)
		.value("HETEROVOLUME_COUNT", Scene::HETEROVOLUME_COUNT)
		.value("CURVE_LIST", Scene::CURVE_LIST)
		.value("CURVE_COUNT", Scene::CURVE_COUNT)
		.value("ENVIRONMENT_LIGHT", Scene::ENVIRONMENT_LIGHT)
		.value("NAME", Scene::NAME)
		.value("UNIQUE_ID", Scene::UNIQUE_ID)
		.value("CUSTOM_PTR", Scene::CUSTOM_PTR)
	;
	nb::enum_<Lut>(m, "Lut")
		.value("LUT_FILENAME", Lut::LUT_FILENAME)
		.value("LUT_DATA", Lut::LUT_DATA)
	;
	nb::enum_<Light>(m, "Light")
		.value("LIGHT_TYPE", Light::LIGHT_TYPE)
		.value("LIGHT_TRANSFORM", Light::LIGHT_TRANSFORM)
		.value("LIGHT_GROUP_ID", Light::LIGHT_GROUP_ID)
		.value("LIGHT_RENDER_LAYER_LIST", Light::LIGHT_RENDER_LAYER_LIST)
		.value("LIGHT_VISIBILITY_LIGHT", Light::LIGHT_VISIBILITY_LIGHT)
		.value("LIGHT_NAME", Light::LIGHT_NAME)
		.value("LIGHT_UNIQUE_ID", Light::LIGHT_UNIQUE_ID)
		.value("LIGHT_CUSTOM_PTR", Light::LIGHT_CUSTOM_PTR)
		.value("POINT_LIGHT_RADIANT_POWER", Light::POINT_LIGHT_RADIANT_POWER)
		.value("DIRECTIONAL_LIGHT_RADIANT_POWER", Light::DIRECTIONAL_LIGHT_RADIANT_POWER)
		.value("DIRECTIONAL_LIGHT_SHADOW_SOFTNESS_ANGLE", Light::DIRECTIONAL_LIGHT_SHADOW_SOFTNESS_ANGLE)
		.value("SPOT_LIGHT_RADIANT_POWER", Light::SPOT_LIGHT_RADIANT_POWER)
		.value("SPOT_LIGHT_CONE_SHAPE", Light::SPOT_LIGHT_CONE_SHAPE)
		.value("SPOT_LIGHT_IMAGE", Light::SPOT_LIGHT_IMAGE)
		.value("ENVIRONMENT_LIGHT_IMAGE", Light::ENVIRONMENT_LIGHT_IMAGE)
		.value("ENVIRONMENT_LIGHT_INTENSITY_SCALE", Light::ENVIRONMENT_LIGHT_INTENSITY_SCALE)
		.value("ENVIRONMENT_LIGHT_PORTAL_LIST", Light::ENVIRONMENT_LIGHT_PORTAL_LIST)
		.value("ENVIRONMENT_LIGHT_PORTAL_COUNT", Light::ENVIRONMENT_LIGHT_PORTAL_COUNT)
		.value("ENVIRONMENT_LIGHT_OVERRIDE_REFLECTION", Light::ENVIRONMENT_LIGHT_OVERRIDE_REFLECTION)
		.value("ENVIRONMENT_LIGHT_OVERRIDE_REFRACTION", Light::ENVIRONMENT_LIGHT_OVERRIDE_REFRACTION)
		.value("ENVIRONMENT_LIGHT_OVERRIDE_TRANSPARENCY", Light::ENVIRONMENT_LIGHT_OVERRIDE_TRANSPARENCY)
		.value("ENVIRONMENT_LIGHT_OVERRIDE_BACKGROUND", Light::ENVIRONMENT_LIGHT_OVERRIDE_BACKGROUND)
		.value("ENVIRONMENT_LIGHT_OVERRIDE_IRRADIANCE", Light::ENVIRONMENT_LIGHT_OVERRIDE_IRRADIANCE)
		.value("SKY_LIGHT_TURBIDITY", Light::SKY_LIGHT_TURBIDITY)
		.value("SKY_LIGHT_ALBEDO", Light::SKY_LIGHT_ALBEDO)
		.value("SKY_LIGHT_SCALE", Light::SKY_LIGHT_SCALE)
		.value("SKY_LIGHT_DIRECTION", Light::SKY_LIGHT_DIRECTION)
		.value("SKY_LIGHT_PORTAL_LIST", Light::SKY_LIGHT_PORTAL_LIST)
		.value("SKY_LIGHT_PORTAL_COUNT", Light::SKY_LIGHT_PORTAL_COUNT)
		.value("IES_LIGHT_RADIANT_POWER", Light::IES_LIGHT_RADIANT_POWER)
		.value("IES_LIGHT_IMAGE_DESC", Light::IES_LIGHT_IMAGE_DESC)
		.value("SPHERE_LIGHT_RADIANT_POWER", Light::SPHERE_LIGHT_RADIANT_POWER)
		.value("SPHERE_LIGHT_RADIUS", Light::SPHERE_LIGHT_RADIUS)
		.value("DISK_LIGHT_RADIANT_POWER", Light::DISK_LIGHT_RADIANT_POWER)
		.value("DISK_LIGHT_RADIUS", Light::DISK_LIGHT_RADIUS)
		.value("DISK_LIGHT_ANGLE", Light::DISK_LIGHT_ANGLE)
		.value("DISK_LIGHT_INNER_ANGLE", Light::DISK_LIGHT_INNER_ANGLE)
	;
	nb::enum_<Parameter>(m, "Parameter")
		.value("NAME", Parameter::NAME)
		.value("TYPE", Parameter::TYPE)
		.value("DESCRIPTION", Parameter::DESCRIPTION)
		.value("VALUE", Parameter::VALUE)
	;
	nb::enum_<FrameBuffer>(m, "FrameBuffer")
		.value("FORMAT", FrameBuffer::FORMAT)
		.value("DESC", FrameBuffer::DESC)
		.value("DATA", FrameBuffer::DATA)
		.value("GL_TARGET", FrameBuffer::GL_TARGET)
		.value("GL_MIPLEVEL", FrameBuffer::GL_MIPLEVEL)
		.value("GL_TEXTURE", FrameBuffer::GL_TEXTURE)
		.value("LPE", FrameBuffer::LPE)
		.value("NAME", FrameBuffer::NAME)
		.value("UNIQUE_ID", FrameBuffer::UNIQUE_ID)
		.value("CUSTOM_PTR", FrameBuffer::CUSTOM_PTR)
	;
	m.attr("INSTANCE_PARENT_SHAPE") = 0x1601 ;
	nb::enum_<ComponentType>(m, "ComponentType")
		.value("UINT8", ComponentType::UINT8)
		.value("FLOAT16", ComponentType::FLOAT16)
		.value("FLOAT32", ComponentType::FLOAT32)
		.value("UNKNOWN", ComponentType::UNKNOWN)
		.value("DEEP", ComponentType::DEEP)
		.value("UINT32", ComponentType::UINT32)
	;
	nb::enum_<BufferElementType>(m, "BufferElementType")
		.value("INT32", BufferElementType::INT32)
		.value("FLOAT32", BufferElementType::FLOAT32)
	;
	nb::enum_<RenderMode>(m, "RenderMode")
		.value("GLOBAL_ILLUMINATION", RenderMode::GLOBAL_ILLUMINATION)
		.value("DIRECT_ILLUMINATION", RenderMode::DIRECT_ILLUMINATION)
		.value("DIRECT_ILLUMINATION_NO_SHADOW", RenderMode::DIRECT_ILLUMINATION_NO_SHADOW)
		.value("WIREFRAME", RenderMode::WIREFRAME)
		.value("MATERIAL_INDEX", RenderMode::MATERIAL_INDEX)
		.value("POSITION", RenderMode::POSITION)
		.value("NORMAL", RenderMode::NORMAL)
		.value("TEXCOORD", RenderMode::TEXCOORD)
		.value("AMBIENT_OCCLUSION", RenderMode::AMBIENT_OCCLUSION)
		.value("DIFFUSE", RenderMode::DIFFUSE)
	;
	nb::enum_<CameraMode>(m, "CameraMode")
		.value("PERSPECTIVE", CameraMode::PERSPECTIVE)
		.value("ORTHOGRAPHIC", CameraMode::ORTHOGRAPHIC)
		.value("LATITUDE_LONGITUDE_360", CameraMode::LATITUDE_LONGITUDE_360)
		.value("LATITUDE_LONGITUDE_STEREO", CameraMode::LATITUDE_LONGITUDE_STEREO)
		.value("CUBEMAP", CameraMode::CUBEMAP)
		.value("CUBEMAP_STEREO", CameraMode::CUBEMAP_STEREO)
		.value("FISHEYE", CameraMode::FISHEYE)
	;
	nb::enum_<ToneMappingOperator>(m, "ToneMappingOperator")
		.value("NONE", ToneMappingOperator::NONE)
		.value("LINEAR", ToneMappingOperator::LINEAR)
		.value("PHOTOLINEAR", ToneMappingOperator::PHOTOLINEAR)
		.value("AUTOLINEAR", ToneMappingOperator::AUTOLINEAR)
		.value("MAXWHITE", ToneMappingOperator::MAXWHITE)
		.value("REINHARD02", ToneMappingOperator::REINHARD02)
		.value("EXPONENTIAL", ToneMappingOperator::EXPONENTIAL)
	;
	nb::enum_<VolumeType>(m, "VolumeType")
		.value("NONE", VolumeType::NONE)
		.value("HOMOGENEOUS", VolumeType::HOMOGENEOUS)
		.value("HETEROGENEOUS", VolumeType::HETEROGENEOUS)
	;
	nb::enum_<MaterialSystemInfo>(m, "MaterialSystemInfo")
		.value("NODE_LIST", MaterialSystemInfo::NODE_LIST)
	;
	nb::enum_<MaterialNodeInfo>(m, "MaterialNodeInfo")
		.value("TYPE", MaterialNodeInfo::TYPE)
		.value("SYSTEM", MaterialNodeInfo::SYSTEM)
		.value("INPUT_COUNT", MaterialNodeInfo::INPUT_COUNT)
		.value("ID", MaterialNodeInfo::ID)
		.value("NAME", MaterialNodeInfo::NAME)
		.value("UNIQUE_ID", MaterialNodeInfo::UNIQUE_ID)
		.value("CUSTOM_PTR", MaterialNodeInfo::CUSTOM_PTR)
	;
	nb::enum_<MaterialNodeInput>(m, "MaterialNodeInput")
		.value("NAME", MaterialNodeInput::NAME)
		.value("DESCRIPTION", MaterialNodeInput::DESCRIPTION)
		.value("VALUE", MaterialNodeInput::VALUE)
		.value("TYPE", MaterialNodeInput::TYPE)
	;
	nb::enum_<MaterialNodeType>(m, "MaterialNodeType")
		.value("DIFFUSE", MaterialNodeType::DIFFUSE)
		.value("MICROFACET", MaterialNodeType::MICROFACET)
		.value("REFLECTION", MaterialNodeType::REFLECTION)
		.value("REFRACTION", MaterialNodeType::REFRACTION)
		.value("MICROFACET_REFRACTION", MaterialNodeType::MICROFACET_REFRACTION)
		.value("TRANSPARENT", MaterialNodeType::TRANSPARENT)
		.value("EMISSIVE", MaterialNodeType::EMISSIVE)
		.value("WARD", MaterialNodeType::WARD)
		.value("ADD", MaterialNodeType::ADD)
		.value("BLEND", MaterialNodeType::BLEND)
		.value("ARITHMETIC", MaterialNodeType::ARITHMETIC)
		.value("FRESNEL", MaterialNodeType::FRESNEL)
		.value("NORMAL_MAP", MaterialNodeType::NORMAL_MAP)
		.value("IMAGE_TEXTURE", MaterialNodeType::IMAGE_TEXTURE)
		.value("NOISE2D_TEXTURE", MaterialNodeType::NOISE2D_TEXTURE)
		.value("DOT_TEXTURE", MaterialNodeType::DOT_TEXTURE)
		.value("GRADIENT_TEXTURE", MaterialNodeType::GRADIENT_TEXTURE)
		.value("CHECKER_TEXTURE", MaterialNodeType::CHECKER_TEXTURE)
		.value("CONSTANT_TEXTURE", MaterialNodeType::CONSTANT_TEXTURE)
		.value("INPUT_LOOKUP", MaterialNodeType::INPUT_LOOKUP)
		.value("BLEND_VALUE", MaterialNodeType::BLEND_VALUE)
		.value("PASSTHROUGH", MaterialNodeType::PASSTHROUGH)
		.value("ORENNAYAR", MaterialNodeType::ORENNAYAR)
		.value("FRESNEL_SCHLICK", MaterialNodeType::FRESNEL_SCHLICK)
		.value("DIFFUSE_REFRACTION", MaterialNodeType::DIFFUSE_REFRACTION)
		.value("BUMP_MAP", MaterialNodeType::BUMP_MAP)
		.value("VOLUME", MaterialNodeType::VOLUME)
		.value("MICROFACET_ANISOTROPIC_REFLECTION", MaterialNodeType::MICROFACET_ANISOTROPIC_REFLECTION)
		.value("MICROFACET_ANISOTROPIC_REFRACTION", MaterialNodeType::MICROFACET_ANISOTROPIC_REFRACTION)
		.value("TWOSIDED", MaterialNodeType::TWOSIDED)
		.value("UV_PROCEDURAL", MaterialNodeType::UV_PROCEDURAL)
		.value("MICROFACET_BECKMANN", MaterialNodeType::MICROFACET_BECKMANN)
		.value("PHONG", MaterialNodeType::PHONG)
		.value("BUFFER_SAMPLER", MaterialNodeType::BUFFER_SAMPLER)
		.value("UV_TRIPLANAR", MaterialNodeType::UV_TRIPLANAR)
		.value("AO_MAP", MaterialNodeType::AO_MAP)
		.value("USER_TEXTURE_0", MaterialNodeType::USER_TEXTURE_0)
		.value("USER_TEXTURE_1", MaterialNodeType::USER_TEXTURE_1)
		.value("USER_TEXTURE_2", MaterialNodeType::USER_TEXTURE_2)
		.value("USER_TEXTURE_3", MaterialNodeType::USER_TEXTURE_3)
		.value("UBERV2", MaterialNodeType::UBERV2)
		.value("TRANSFORM", MaterialNodeType::TRANSFORM)
		.value("RGB_TO_HSV", MaterialNodeType::RGB_TO_HSV)
		.value("HSV_TO_RGB", MaterialNodeType::HSV_TO_RGB)
		.value("USER_TEXTURE", MaterialNodeType::USER_TEXTURE)
		.value("TOON_CLOSURE", MaterialNodeType::TOON_CLOSURE)
		.value("TOON_RAMP", MaterialNodeType::TOON_RAMP)
		.value("VORONOI_TEXTURE", MaterialNodeType::VORONOI_TEXTURE)
		.value("GRID_SAMPLER", MaterialNodeType::GRID_SAMPLER)
		.value("BLACKBODY", MaterialNodeType::BLACKBODY)
		.value("RAMP", MaterialNodeType::RAMP)
		.value("PRIMVAR_LOOKUP", MaterialNodeType::PRIMVAR_LOOKUP)
		.value("ROUNDED_CORNER", MaterialNodeType::ROUNDED_CORNER)
		.value("MATX_DIFFUSE_BRDF", MaterialNodeType::MATX_DIFFUSE_BRDF)
		.value("MATX_DIELECTRIC_BRDF", MaterialNodeType::MATX_DIELECTRIC_BRDF)
		.value("MATX_GENERALIZED_SCHLICK_BRDF", MaterialNodeType::MATX_GENERALIZED_SCHLICK_BRDF)
		.value("MATX_NOISE3D", MaterialNodeType::MATX_NOISE3D)
		.value("MATX_TANGENT", MaterialNodeType::MATX_TANGENT)
		.value("MATX_NORMAL", MaterialNodeType::MATX_NORMAL)
		.value("MATX_POSITION", MaterialNodeType::MATX_POSITION)
		.value("MATX_ROUGHNESS_ANISOTROPY", MaterialNodeType::MATX_ROUGHNESS_ANISOTROPY)
		.value("MATX_ROTATE3D", MaterialNodeType::MATX_ROTATE3D)
		.value("MATX_NORMALIZE", MaterialNodeType::MATX_NORMALIZE)
		.value("MATX_IFGREATER", MaterialNodeType::MATX_IFGREATER)
		.value("MATX_SHEEN_BRDF", MaterialNodeType::MATX_SHEEN_BRDF)
		.value("MATX_DIFFUSE_BTDF", MaterialNodeType::MATX_DIFFUSE_BTDF)
		.value("MATX_CONVERT", MaterialNodeType::MATX_CONVERT)
		.value("MATX_SUBSURFACE_BRDF", MaterialNodeType::MATX_SUBSURFACE_BRDF)
		.value("MATX_DIELECTRIC_BTDF", MaterialNodeType::MATX_DIELECTRIC_BTDF)
		.value("MATX_CONDUCTOR_BRDF", MaterialNodeType::MATX_CONDUCTOR_BRDF)
		.value("MATX_FRESNEL", MaterialNodeType::MATX_FRESNEL)
		.value("MATX_LUMINANCE", MaterialNodeType::MATX_LUMINANCE)
		.value("MATX_FRACTAL3D", MaterialNodeType::MATX_FRACTAL3D)
		.value("MATX_MIX", MaterialNodeType::MATX_MIX)
		.value("MATX", MaterialNodeType::MATX)
		.value("MATX_ARTISTIC_IOR", MaterialNodeType::MATX_ARTISTIC_IOR)
		.value("MATX_GENERALIZED_SCHLICK_BTDF", MaterialNodeType::MATX_GENERALIZED_SCHLICK_BTDF)
		.value("MATX_LAYER", MaterialNodeType::MATX_LAYER)
		.value("MATX_THIN_FILM", MaterialNodeType::MATX_THIN_FILM)
		.value("MATX_BITANGENT", MaterialNodeType::MATX_BITANGENT)
		.value("MATX_TEXCOORD", MaterialNodeType::MATX_TEXCOORD)
		.value("MATX_MODULO", MaterialNodeType::MATX_MODULO)
		.value("MATX_ABSVAL", MaterialNodeType::MATX_ABSVAL)
		.value("MATX_SIGN", MaterialNodeType::MATX_SIGN)
		.value("MATX_FLOOR", MaterialNodeType::MATX_FLOOR)
		.value("MATX_CEIL", MaterialNodeType::MATX_CEIL)
		.value("MATX_ATAN2", MaterialNodeType::MATX_ATAN2)
		.value("MATX_SQRT", MaterialNodeType::MATX_SQRT)
		.value("MATX_LN", MaterialNodeType::MATX_LN)
		.value("MATX_EXP", MaterialNodeType::MATX_EXP)
		.value("MATX_CLAMP", MaterialNodeType::MATX_CLAMP)
		.value("MATX_MIN", MaterialNodeType::MATX_MIN)
		.value("MATX_MAX", MaterialNodeType::MATX_MAX)
		.value("MATX_MAGNITUDE", MaterialNodeType::MATX_MAGNITUDE)
		.value("MATX_CROSSPRODUCT", MaterialNodeType::MATX_CROSSPRODUCT)
		.value("MATX_REMAP", MaterialNodeType::MATX_REMAP)
		.value("MATX_SMOOTHSTEP", MaterialNodeType::MATX_SMOOTHSTEP)
		.value("MATX_RGBTOHSV", MaterialNodeType::MATX_RGBTOHSV)
		.value("MATX_HSVTORGB", MaterialNodeType::MATX_HSVTORGB)
		.value("MATX_IFGREATEREQ", MaterialNodeType::MATX_IFGREATEREQ)
		.value("MATX_IFEQUAL", MaterialNodeType::MATX_IFEQUAL)
		.value("MATX_SWIZZLE", MaterialNodeType::MATX_SWIZZLE)
		.value("MATX_NOISE2D", MaterialNodeType::MATX_NOISE2D)
		.value("MATX_PLUS", MaterialNodeType::MATX_PLUS)
		.value("MATX_MINUS", MaterialNodeType::MATX_MINUS)
		.value("MATX_DIFFERENCE", MaterialNodeType::MATX_DIFFERENCE)
		.value("MATX_BURN", MaterialNodeType::MATX_BURN)
		.value("MATX_DODGE", MaterialNodeType::MATX_DODGE)
		.value("MATX_SCREEN", MaterialNodeType::MATX_SCREEN)
		.value("MATX_OVERLAY", MaterialNodeType::MATX_OVERLAY)
		.value("MATX_INSIDE", MaterialNodeType::MATX_INSIDE)
		.value("MATX_OUTSIDE", MaterialNodeType::MATX_OUTSIDE)
		.value("MATX_RAMPLR", MaterialNodeType::MATX_RAMPLR)
		.value("MATX_RAMPTB", MaterialNodeType::MATX_RAMPTB)
		.value("MATX_SPLITLR", MaterialNodeType::MATX_SPLITLR)
		.value("MATX_SPLITTB", MaterialNodeType::MATX_SPLITTB)
		.value("MATX_CELLNOISE2D", MaterialNodeType::MATX_CELLNOISE2D)
		.value("MATX_CELLNOISE3D", MaterialNodeType::MATX_CELLNOISE3D)
		.value("MATX_ROTATE2D", MaterialNodeType::MATX_ROTATE2D)
		.value("MATX_DOT", MaterialNodeType::MATX_DOT)
		.value("MATX_RANGE", MaterialNodeType::MATX_RANGE)
		.value("MATX_SWITCH", MaterialNodeType::MATX_SWITCH)
		.value("MATX_EXTRACT", MaterialNodeType::MATX_EXTRACT)
		.value("MATX_COMBINE2", MaterialNodeType::MATX_COMBINE2)
		.value("MATX_COMBINE3", MaterialNodeType::MATX_COMBINE3)
		.value("MATX_COMBINE4", MaterialNodeType::MATX_COMBINE4)
		.value("MATX_TRIPLANARPROJECTION", MaterialNodeType::MATX_TRIPLANARPROJECTION)
		.value("MATX_MULTIPLY", MaterialNodeType::MATX_MULTIPLY)
	;
	nb::enum_<MaterialInput>(m, "MaterialInput")
		.value("COLOR", MaterialInput::COLOR)
		.value("COLOR0", MaterialInput::COLOR0)
		.value("COLOR1", MaterialInput::COLOR1)
		.value("NORMAL", MaterialInput::NORMAL)
		.value("UV", MaterialInput::UV)
		.value("DATA", MaterialInput::DATA)
		.value("ROUGHNESS", MaterialInput::ROUGHNESS)
		.value("IOR", MaterialInput::IOR)
		.value("ROUGHNESS_X", MaterialInput::ROUGHNESS_X)
		.value("ROUGHNESS_Y", MaterialInput::ROUGHNESS_Y)
		.value("ROTATION", MaterialInput::ROTATION)
		.value("WEIGHT", MaterialInput::WEIGHT)
		.value("OP", MaterialInput::OP)
		.value("INVEC", MaterialInput::INVEC)
		.value("UV_SCALE", MaterialInput::UV_SCALE)
		.value("VALUE", MaterialInput::VALUE)
		.value("REFLECTANCE", MaterialInput::REFLECTANCE)
		.value("SCALE", MaterialInput::SCALE)
		.value("SCATTERING", MaterialInput::SCATTERING)
		.value("ABSORBTION", MaterialInput::ABSORBTION)
		.value("EMISSION", MaterialInput::EMISSION)
		.value("G", MaterialInput::G)
		.value("MULTISCATTER", MaterialInput::MULTISCATTER)
		.value("COLOR2", MaterialInput::COLOR2)
		.value("COLOR3", MaterialInput::COLOR3)
		.value("ANISOTROPIC", MaterialInput::ANISOTROPIC)
		.value("FRONTFACE", MaterialInput::FRONTFACE)
		.value("BACKFACE", MaterialInput::BACKFACE)
		.value("ORIGIN", MaterialInput::ORIGIN)
		.value("ZAXIS", MaterialInput::ZAXIS)
		.value("XAXIS", MaterialInput::XAXIS)
		.value("THRESHOLD", MaterialInput::THRESHOLD)
		.value("OFFSET", MaterialInput::OFFSET)
		.value("UV_TYPE", MaterialInput::UV_TYPE)
		.value("RADIUS", MaterialInput::RADIUS)
		.value("SIDE", MaterialInput::SIDE)
		.value("CAUSTICS", MaterialInput::CAUSTICS)
		.value("TRANSMISSION_COLOR", MaterialInput::TRANSMISSION_COLOR)
		.value("THICKNESS", MaterialInput::THICKNESS)
		.value("input_0", MaterialInput::input_0)
		.value("input_1", MaterialInput::input_1)
		.value("input_2", MaterialInput::input_2)
		.value("input_3", MaterialInput::input_3)
		.value("input_4", MaterialInput::input_4)
		.value("SCHLICK_APPROXIMATION", MaterialInput::SCHLICK_APPROXIMATION)
		.value("APPLYSURFACE", MaterialInput::APPLYSURFACE)
		.value("TANGENT", MaterialInput::TANGENT)
		.value("DISTRIBUTION", MaterialInput::DISTRIBUTION)
		.value("BASE", MaterialInput::BASE)
		.value("TINT", MaterialInput::TINT)
		.value("EXPONENT", MaterialInput::EXPONENT)
		.value("AMPLITUDE", MaterialInput::AMPLITUDE)
		.value("PIVOT", MaterialInput::PIVOT)
		.value("POSITION", MaterialInput::POSITION)
		.value("AMOUNT", MaterialInput::AMOUNT)
		.value("AXIS", MaterialInput::AXIS)
		.value("LUMACOEFF", MaterialInput::LUMACOEFF)
		.value("REFLECTIVITY", MaterialInput::REFLECTIVITY)
		.value("EDGE_COLOR", MaterialInput::EDGE_COLOR)
		.value("VIEW_DIRECTION", MaterialInput::VIEW_DIRECTION)
		.value("INTERIOR", MaterialInput::INTERIOR)
		.value("OCTAVES", MaterialInput::OCTAVES)
		.value("LACUNARITY", MaterialInput::LACUNARITY)
		.value("DIMINISH", MaterialInput::DIMINISH)
		.value("WRAP_U", MaterialInput::WRAP_U)
		.value("WRAP_V", MaterialInput::WRAP_V)
		.value("WRAP_W", MaterialInput::WRAP_W)
		.value("input_5", MaterialInput::input_5)
		.value("input_6", MaterialInput::input_6)
		.value("input_7", MaterialInput::input_7)
		.value("input_8", MaterialInput::input_8)
		.value("input_9", MaterialInput::input_9)
		.value("input_10", MaterialInput::input_10)
		.value("input_11", MaterialInput::input_11)
		.value("input_12", MaterialInput::input_12)
		.value("input_13", MaterialInput::input_13)
		.value("input_14", MaterialInput::input_14)
		.value("input_15", MaterialInput::input_15)
		.value("DIFFUSE_RAMP", MaterialInput::DIFFUSE_RAMP)
		.value("SHADOW", MaterialInput::SHADOW)
		.value("MID", MaterialInput::MID)
		.value("HIGHLIGHT", MaterialInput::HIGHLIGHT)
		.value("POSITION1", MaterialInput::POSITION1)
		.value("POSITION2", MaterialInput::POSITION2)
		.value("RANGE1", MaterialInput::RANGE1)
		.value("RANGE2", MaterialInput::RANGE2)
		.value("INTERPOLATION", MaterialInput::INTERPOLATION)
		.value("RANDOMNESS", MaterialInput::RANDOMNESS)
		.value("DIMENSION", MaterialInput::DIMENSION)
		.value("OUTTYPE", MaterialInput::OUTTYPE)
		.value("DENSITY", MaterialInput::DENSITY)
		.value("DENSITYGRID", MaterialInput::DENSITYGRID)
		.value("DISPLACEMENT", MaterialInput::DISPLACEMENT)
		.value("TEMPERATURE", MaterialInput::TEMPERATURE)
		.value("KELVIN", MaterialInput::KELVIN)
		.value("EXTINCTION", MaterialInput::EXTINCTION)
		.value("THIN_FILM", MaterialInput::THIN_FILM)
		.value("TOP", MaterialInput::TOP)
		.value("HIGHLIGHT2", MaterialInput::HIGHLIGHT2)
		.value("SHADOW2", MaterialInput::SHADOW2)
		.value("POSITION_SHADOW", MaterialInput::POSITION_SHADOW)
		.value("POSITION_HIGHLIGHT", MaterialInput::POSITION_HIGHLIGHT)
		.value("RANGE_SHADOW", MaterialInput::RANGE_SHADOW)
		.value("RANGE_HIGHLIGHT", MaterialInput::RANGE_HIGHLIGHT)
		.value("TOON_5_COLORS", MaterialInput::TOON_5_COLORS)
		.value("X", MaterialInput::X)
		.value("Y", MaterialInput::Y)
		.value("Z", MaterialInput::Z)
		.value("W", MaterialInput::W)
		.value("LIGHT", MaterialInput::LIGHT)
		.value("MID_IS_ALBEDO", MaterialInput::MID_IS_ALBEDO)
		.value("SAMPLES", MaterialInput::SAMPLES)
		.value("BASE_NORMAL", MaterialInput::BASE_NORMAL)
		.value("UBER_DIFFUSE_COLOR", MaterialInput::UBER_DIFFUSE_COLOR)
		.value("UBER_DIFFUSE_WEIGHT", MaterialInput::UBER_DIFFUSE_WEIGHT)
		.value("UBER_DIFFUSE_ROUGHNESS", MaterialInput::UBER_DIFFUSE_ROUGHNESS)
		.value("UBER_DIFFUSE_NORMAL", MaterialInput::UBER_DIFFUSE_NORMAL)
		.value("UBER_REFLECTION_COLOR", MaterialInput::UBER_REFLECTION_COLOR)
		.value("UBER_REFLECTION_WEIGHT", MaterialInput::UBER_REFLECTION_WEIGHT)
		.value("UBER_REFLECTION_ROUGHNESS", MaterialInput::UBER_REFLECTION_ROUGHNESS)
		.value("UBER_REFLECTION_ANISOTROPY", MaterialInput::UBER_REFLECTION_ANISOTROPY)
		.value("UBER_REFLECTION_ANISOTROPY_ROTATION", MaterialInput::UBER_REFLECTION_ANISOTROPY_ROTATION)
		.value("UBER_REFLECTION_MODE", MaterialInput::UBER_REFLECTION_MODE)
		.value("UBER_REFLECTION_IOR", MaterialInput::UBER_REFLECTION_IOR)
		.value("UBER_REFLECTION_METALNESS", MaterialInput::UBER_REFLECTION_METALNESS)
		.value("UBER_REFLECTION_NORMAL", MaterialInput::UBER_REFLECTION_NORMAL)
		.value("UBER_REFLECTION_DIELECTRIC_REFLECTANCE", MaterialInput::UBER_REFLECTION_DIELECTRIC_REFLECTANCE)
		.value("UBER_REFRACTION_COLOR", MaterialInput::UBER_REFRACTION_COLOR)
		.value("UBER_REFRACTION_WEIGHT", MaterialInput::UBER_REFRACTION_WEIGHT)
		.value("UBER_REFRACTION_ROUGHNESS", MaterialInput::UBER_REFRACTION_ROUGHNESS)
		.value("UBER_REFRACTION_IOR", MaterialInput::UBER_REFRACTION_IOR)
		.value("UBER_REFRACTION_NORMAL", MaterialInput::UBER_REFRACTION_NORMAL)
		.value("UBER_REFRACTION_THIN_SURFACE", MaterialInput::UBER_REFRACTION_THIN_SURFACE)
		.value("UBER_REFRACTION_ABSORPTION_COLOR", MaterialInput::UBER_REFRACTION_ABSORPTION_COLOR)
		.value("UBER_REFRACTION_ABSORPTION_DISTANCE", MaterialInput::UBER_REFRACTION_ABSORPTION_DISTANCE)
		.value("UBER_REFRACTION_CAUSTICS", MaterialInput::UBER_REFRACTION_CAUSTICS)
		.value("UBER_COATING_COLOR", MaterialInput::UBER_COATING_COLOR)
		.value("UBER_COATING_WEIGHT", MaterialInput::UBER_COATING_WEIGHT)
		.value("UBER_COATING_ROUGHNESS", MaterialInput::UBER_COATING_ROUGHNESS)
		.value("UBER_COATING_MODE", MaterialInput::UBER_COATING_MODE)
		.value("UBER_COATING_IOR", MaterialInput::UBER_COATING_IOR)
		.value("UBER_COATING_METALNESS", MaterialInput::UBER_COATING_METALNESS)
		.value("UBER_COATING_NORMAL", MaterialInput::UBER_COATING_NORMAL)
		.value("UBER_COATING_TRANSMISSION_COLOR", MaterialInput::UBER_COATING_TRANSMISSION_COLOR)
		.value("UBER_COATING_THICKNESS", MaterialInput::UBER_COATING_THICKNESS)
		.value("UBER_SHEEN", MaterialInput::UBER_SHEEN)
		.value("UBER_SHEEN_TINT", MaterialInput::UBER_SHEEN_TINT)
		.value("UBER_SHEEN_WEIGHT", MaterialInput::UBER_SHEEN_WEIGHT)
		.value("UBER_EMISSION_COLOR", MaterialInput::UBER_EMISSION_COLOR)
		.value("UBER_EMISSION_WEIGHT", MaterialInput::UBER_EMISSION_WEIGHT)
		.value("UBER_EMISSION_MODE", MaterialInput::UBER_EMISSION_MODE)
		.value("UBER_TRANSPARENCY", MaterialInput::UBER_TRANSPARENCY)
		.value("UBER_SSS_SCATTER_COLOR", MaterialInput::UBER_SSS_SCATTER_COLOR)
		.value("UBER_SSS_SCATTER_DISTANCE", MaterialInput::UBER_SSS_SCATTER_DISTANCE)
		.value("UBER_SSS_SCATTER_DIRECTION", MaterialInput::UBER_SSS_SCATTER_DIRECTION)
		.value("UBER_SSS_WEIGHT", MaterialInput::UBER_SSS_WEIGHT)
		.value("UBER_SSS_MULTISCATTER", MaterialInput::UBER_SSS_MULTISCATTER)
		.value("UBER_BACKSCATTER_WEIGHT", MaterialInput::UBER_BACKSCATTER_WEIGHT)
		.value("UBER_BACKSCATTER_COLOR", MaterialInput::UBER_BACKSCATTER_COLOR)
		.value("ADDRESS", MaterialInput::ADDRESS)
		.value("TYPE", MaterialInput::TYPE)
		.value("UBER_FRESNEL_SCHLICK_APPROXIMATION", MaterialInput::UBER_FRESNEL_SCHLICK_APPROXIMATION)
	;
	nb::enum_<InterpolationMode>(m, "InterpolationMode")
		.value("NONE", InterpolationMode::NONE)
		.value("LINEAR", InterpolationMode::LINEAR)
		.value("EXPONENTIAL_UP", InterpolationMode::EXPONENTIAL_UP)
		.value("EXPONENTIAL_DOWN", InterpolationMode::EXPONENTIAL_DOWN)
		.value("SMOOTH", InterpolationMode::SMOOTH)
		.value("BUMP", InterpolationMode::BUMP)
		.value("SPIKE", InterpolationMode::SPIKE)
	;
	nb::enum_<UberMaterialMode>(m, "UberMaterialMode")
		.value("PBR", UberMaterialMode::PBR)
		.value("METALNESS", UberMaterialMode::METALNESS)
	;
	nb::enum_<UberMaterialEmissionMode>(m, "UberMaterialEmissionMode")
		.value("SINGLESIDED", UberMaterialEmissionMode::SINGLESIDED)
		.value("DOUBLESIDED", UberMaterialEmissionMode::DOUBLESIDED)
	;
	nb::enum_<MaterialNodeOp>(m, "MaterialNodeOp")
		.value("ADD", MaterialNodeOp::ADD)
		.value("SUB", MaterialNodeOp::SUB)
		.value("MUL", MaterialNodeOp::MUL)
		.value("DIV", MaterialNodeOp::DIV)
		.value("SIN", MaterialNodeOp::SIN)
		.value("COS", MaterialNodeOp::COS)
		.value("TAN", MaterialNodeOp::TAN)
		.value("SELECT_X", MaterialNodeOp::SELECT_X)
		.value("SELECT_Y", MaterialNodeOp::SELECT_Y)
		.value("SELECT_Z", MaterialNodeOp::SELECT_Z)
		.value("COMBINE", MaterialNodeOp::COMBINE)
		.value("DOT3", MaterialNodeOp::DOT3)
		.value("CROSS3", MaterialNodeOp::CROSS3)
		.value("LENGTH3", MaterialNodeOp::LENGTH3)
		.value("NORMALIZE3", MaterialNodeOp::NORMALIZE3)
		.value("POW", MaterialNodeOp::POW)
		.value("ACOS", MaterialNodeOp::ACOS)
		.value("ASIN", MaterialNodeOp::ASIN)
		.value("ATAN", MaterialNodeOp::ATAN)
		.value("AVERAGE_XYZ", MaterialNodeOp::AVERAGE_XYZ)
		.value("AVERAGE", MaterialNodeOp::AVERAGE)
		.value("MIN", MaterialNodeOp::MIN)
		.value("MAX", MaterialNodeOp::MAX)
		.value("FLOOR", MaterialNodeOp::FLOOR)
		.value("MOD", MaterialNodeOp::MOD)
		.value("ABS", MaterialNodeOp::ABS)
		.value("SHUFFLE_YZWX", MaterialNodeOp::SHUFFLE_YZWX)
		.value("SHUFFLE_ZWXY", MaterialNodeOp::SHUFFLE_ZWXY)
		.value("SHUFFLE_WXYZ", MaterialNodeOp::SHUFFLE_WXYZ)
		.value("MAT_MUL", MaterialNodeOp::MAT_MUL)
		.value("SELECT_W", MaterialNodeOp::SELECT_W)
		.value("DOT4", MaterialNodeOp::DOT4)
		.value("LOG", MaterialNodeOp::LOG)
		.value("LOWER_OR_EQUAL", MaterialNodeOp::LOWER_OR_EQUAL)
		.value("LOWER", MaterialNodeOp::LOWER)
		.value("GREATER_OR_EQUAL", MaterialNodeOp::GREATER_OR_EQUAL)
		.value("GREATER", MaterialNodeOp::GREATER)
		.value("EQUAL", MaterialNodeOp::EQUAL)
		.value("NOT_EQUAL", MaterialNodeOp::NOT_EQUAL)
		.value("AND", MaterialNodeOp::AND)
		.value("OR", MaterialNodeOp::OR)
		.value("TERNARY", MaterialNodeOp::TERNARY)
		.value("EXP", MaterialNodeOp::EXP)
		.value("ROTATE2D", MaterialNodeOp::ROTATE2D)
		.value("ROTATE3D", MaterialNodeOp::ROTATE3D)
		.value("NOP", MaterialNodeOp::NOP)
		.value("CEIL", MaterialNodeOp::CEIL)
		.value("ROUND", MaterialNodeOp::ROUND)
		.value("SIGN", MaterialNodeOp::SIGN)
		.value("SQRT", MaterialNodeOp::SQRT)
		.value("CLAMP", MaterialNodeOp::CLAMP)
	;
	nb::enum_<MaterialNodeLookup>(m, "MaterialNodeLookup")
		.value("UV", MaterialNodeLookup::UV)
		.value("N", MaterialNodeLookup::N)
		.value("P", MaterialNodeLookup::P)
		.value("INVEC", MaterialNodeLookup::INVEC)
		.value("OUTVEC", MaterialNodeLookup::OUTVEC)
		.value("UV1", MaterialNodeLookup::UV1)
		.value("P_LOCAL", MaterialNodeLookup::P_LOCAL)
		.value("VERTEX_VALUE0", MaterialNodeLookup::VERTEX_VALUE0)
		.value("VERTEX_VALUE1", MaterialNodeLookup::VERTEX_VALUE1)
		.value("VERTEX_VALUE2", MaterialNodeLookup::VERTEX_VALUE2)
		.value("VERTEX_VALUE3", MaterialNodeLookup::VERTEX_VALUE3)
		.value("SHAPE_RANDOM_COLOR", MaterialNodeLookup::SHAPE_RANDOM_COLOR)
		.value("OBJECT_ID", MaterialNodeLookup::OBJECT_ID)
		.value("PRIMITIVE_RANDOM_COLOR", MaterialNodeLookup::PRIMITIVE_RANDOM_COLOR)
	;
	nb::enum_<MaterialGradientProceduralType>(m, "MaterialGradientProceduralType")
		.value("LINEAR", MaterialGradientProceduralType::LINEAR)
		.value("QUADRATIC", MaterialGradientProceduralType::QUADRATIC)
		.value("EASING", MaterialGradientProceduralType::EASING)
		.value("DIAGONAL", MaterialGradientProceduralType::DIAGONAL)
		.value("SPHERICAL", MaterialGradientProceduralType::SPHERICAL)
		.value("QUAD_SPHERE", MaterialGradientProceduralType::QUAD_SPHERE)
		.value("RADIAL", MaterialGradientProceduralType::RADIAL)
	;
	nb::enum_<MaterialNodeUvtype>(m, "MaterialNodeUvtype")
		.value("PLANAR", MaterialNodeUvtype::PLANAR)
		.value("CYLINDICAL", MaterialNodeUvtype::CYLINDICAL)
		.value("SPHERICAL", MaterialNodeUvtype::SPHERICAL)
		.value("PROJECT", MaterialNodeUvtype::PROJECT)
	;
	nb::enum_<MaterialNodeTransformType>(m, "MaterialNodeTransformType")
		.value("ROTATE_LOCAL_TO_WORLD", MaterialNodeTransformType::ROTATE_LOCAL_TO_WORLD)
	;
	nb::enum_<PostEffectInfo>(m, "PostEffectInfo")
		.value("TYPE", PostEffectInfo::TYPE)
		.value("WHITE_BALANCE_COLOR_SPACE", PostEffectInfo::WHITE_BALANCE_COLOR_SPACE)
		.value("WHITE_BALANCE_COLOR_TEMPERATURE", PostEffectInfo::WHITE_BALANCE_COLOR_TEMPERATURE)
		.value("SIMPLE_TONEMAP_EXPOSURE", PostEffectInfo::SIMPLE_TONEMAP_EXPOSURE)
		.value("SIMPLE_TONEMAP_CONTRAST", PostEffectInfo::SIMPLE_TONEMAP_CONTRAST)
		.value("SIMPLE_TONEMAP_ENABLE_TONEMAP", PostEffectInfo::SIMPLE_TONEMAP_ENABLE_TONEMAP)
		.value("BLOOM_RADIUS", PostEffectInfo::BLOOM_RADIUS)
		.value("BLOOM_THRESHOLD", PostEffectInfo::BLOOM_THRESHOLD)
		.value("BLOOM_WEIGHT", PostEffectInfo::BLOOM_WEIGHT)
		.value("NAME", PostEffectInfo::NAME)
		.value("UNIQUE_ID", PostEffectInfo::UNIQUE_ID)
		.value("CUSTOM_PTR", PostEffectInfo::CUSTOM_PTR)
	;
	nb::enum_<Aov>(m, "Aov")
		.value("COLOR", Aov::COLOR)
		.value("OPACITY", Aov::OPACITY)
		.value("WORLD_COORDINATE", Aov::WORLD_COORDINATE)
		.value("UV", Aov::UV)
		.value("MATERIAL_ID", Aov::MATERIAL_ID)
		.value("GEOMETRIC_NORMAL", Aov::GEOMETRIC_NORMAL)
		.value("SHADING_NORMAL", Aov::SHADING_NORMAL)
		.value("DEPTH", Aov::DEPTH)
		.value("OBJECT_ID", Aov::OBJECT_ID)
		.value("OBJECT_GROUP_ID", Aov::OBJECT_GROUP_ID)
		.value("SHADOW_CATCHER", Aov::SHADOW_CATCHER)
		.value("BACKGROUND", Aov::BACKGROUND)
		.value("EMISSION", Aov::EMISSION)
		.value("VELOCITY", Aov::VELOCITY)
		.value("DIRECT_ILLUMINATION", Aov::DIRECT_ILLUMINATION)
		.value("INDIRECT_ILLUMINATION", Aov::INDIRECT_ILLUMINATION)
		.value("AO", Aov::AO)
		.value("DIRECT_DIFFUSE", Aov::DIRECT_DIFFUSE)
		.value("DIRECT_REFLECT", Aov::DIRECT_REFLECT)
		.value("INDIRECT_DIFFUSE", Aov::INDIRECT_DIFFUSE)
		.value("INDIRECT_REFLECT", Aov::INDIRECT_REFLECT)
		.value("REFRACT", Aov::REFRACT)
		.value("VOLUME", Aov::VOLUME)
		.value("LIGHT_GROUP0", Aov::LIGHT_GROUP0)
		.value("LIGHT_GROUP1", Aov::LIGHT_GROUP1)
		.value("LIGHT_GROUP2", Aov::LIGHT_GROUP2)
		.value("LIGHT_GROUP3", Aov::LIGHT_GROUP3)
		.value("DIFFUSE_ALBEDO", Aov::DIFFUSE_ALBEDO)
		.value("VARIANCE", Aov::VARIANCE)
		.value("VIEW_SHADING_NORMAL", Aov::VIEW_SHADING_NORMAL)
		.value("REFLECTION_CATCHER", Aov::REFLECTION_CATCHER)
		.value("COLOR_RIGHT", Aov::COLOR_RIGHT)
		.value("LPE_0", Aov::LPE_0)
		.value("LPE_1", Aov::LPE_1)
		.value("LPE_2", Aov::LPE_2)
		.value("LPE_3", Aov::LPE_3)
		.value("LPE_4", Aov::LPE_4)
		.value("LPE_5", Aov::LPE_5)
		.value("LPE_6", Aov::LPE_6)
		.value("LPE_7", Aov::LPE_7)
		.value("LPE_8", Aov::LPE_8)
		.value("CAMERA_NORMAL", Aov::CAMERA_NORMAL)
		.value("MATTE_PASS", Aov::MATTE_PASS)
		.value("SSS", Aov::SSS)
		.value("CRYPTOMATTE_MAT0", Aov::CRYPTOMATTE_MAT0)
		.value("CRYPTOMATTE_MAT1", Aov::CRYPTOMATTE_MAT1)
		.value("CRYPTOMATTE_MAT2", Aov::CRYPTOMATTE_MAT2)
		.value("CRYPTOMATTE_MAT3", Aov::CRYPTOMATTE_MAT3)
		.value("CRYPTOMATTE_MAT4", Aov::CRYPTOMATTE_MAT4)
		.value("CRYPTOMATTE_MAT5", Aov::CRYPTOMATTE_MAT5)
		.value("CRYPTOMATTE_OBJ0", Aov::CRYPTOMATTE_OBJ0)
		.value("CRYPTOMATTE_OBJ1", Aov::CRYPTOMATTE_OBJ1)
		.value("CRYPTOMATTE_OBJ2", Aov::CRYPTOMATTE_OBJ2)
		.value("CRYPTOMATTE_OBJ3", Aov::CRYPTOMATTE_OBJ3)
		.value("CRYPTOMATTE_OBJ4", Aov::CRYPTOMATTE_OBJ4)
		.value("CRYPTOMATTE_OBJ5", Aov::CRYPTOMATTE_OBJ5)
		.value("DEEP_COLOR", Aov::DEEP_COLOR)
		.value("LIGHT_GROUP4", Aov::LIGHT_GROUP4)
		.value("LIGHT_GROUP5", Aov::LIGHT_GROUP5)
		.value("LIGHT_GROUP6", Aov::LIGHT_GROUP6)
		.value("LIGHT_GROUP7", Aov::LIGHT_GROUP7)
		.value("LIGHT_GROUP8", Aov::LIGHT_GROUP8)
		.value("LIGHT_GROUP9", Aov::LIGHT_GROUP9)
		.value("LIGHT_GROUP10", Aov::LIGHT_GROUP10)
		.value("LIGHT_GROUP11", Aov::LIGHT_GROUP11)
		.value("LIGHT_GROUP12", Aov::LIGHT_GROUP12)
		.value("LIGHT_GROUP13", Aov::LIGHT_GROUP13)
		.value("LIGHT_GROUP14", Aov::LIGHT_GROUP14)
		.value("LIGHT_GROUP15", Aov::LIGHT_GROUP15)
		.value("MESH_ID", Aov::MESH_ID)
	;
	nb::enum_<PostEffectType>(m, "PostEffectType")
		.value("TONE_MAP", PostEffectType::TONE_MAP)
		.value("WHITE_BALANCE", PostEffectType::WHITE_BALANCE)
		.value("SIMPLE_TONEMAP", PostEffectType::SIMPLE_TONEMAP)
		.value("NORMALIZATION", PostEffectType::NORMALIZATION)
		.value("GAMMA_CORRECTION", PostEffectType::GAMMA_CORRECTION)
		.value("BLOOM", PostEffectType::BLOOM)
	;
	nb::enum_<ColorSpace>(m, "ColorSpace")
		.value("SRGB", ColorSpace::SRGB)
		.value("ADOBE_RGB", ColorSpace::ADOBE_RGB)
		.value("REC2020", ColorSpace::REC2020)
		.value("DCIP3", ColorSpace::DCIP3)
	;
	nb::enum_<MaterialNodeInputType>(m, "MaterialNodeInputType")
		.value("FLOAT4", MaterialNodeInputType::FLOAT4)
		.value("UINT", MaterialNodeInputType::UINT)
		.value("NODE", MaterialNodeInputType::NODE)
		.value("IMAGE", MaterialNodeInputType::IMAGE)
		.value("BUFFER", MaterialNodeInputType::BUFFER)
		.value("GRID", MaterialNodeInputType::GRID)
		.value("DATA", MaterialNodeInputType::DATA)
		.value("LIGHT", MaterialNodeInputType::LIGHT)
	;
	nb::enum_<SubdivBoundaryInteropType>(m, "SubdivBoundaryInteropType")
		.value("EDGE_AND_CORNER", SubdivBoundaryInteropType::EDGE_AND_CORNER)
		.value("EDGE_ONLY", SubdivBoundaryInteropType::EDGE_ONLY)
	;
	nb::enum_<ImageWrapType>(m, "ImageWrapType")
		.value("REPEAT", ImageWrapType::REPEAT)
		.value("MIRRORED_REPEAT", ImageWrapType::MIRRORED_REPEAT)
		.value("CLAMP_TO_EDGE", ImageWrapType::CLAMP_TO_EDGE)
		.value("CLAMP_ZERO", ImageWrapType::CLAMP_ZERO)
		.value("CLAMP_ONE", ImageWrapType::CLAMP_ONE)
	;
	nb::enum_<VoronoiOutType>(m, "VoronoiOutType")
		.value("DISTANCE", VoronoiOutType::DISTANCE)
		.value("COLOR", VoronoiOutType::COLOR)
		.value("POSITION", VoronoiOutType::POSITION)
	;
	nb::enum_<ImageFilterType>(m, "ImageFilterType")
		.value("NEAREST", ImageFilterType::NEAREST)
		.value("LINEAR", ImageFilterType::LINEAR)
	;
	nb::enum_<CompositeInfo>(m, "CompositeInfo")
		.value("TYPE", CompositeInfo::TYPE)
		.value("FRAMEBUFFER_INPUT_FB", CompositeInfo::FRAMEBUFFER_INPUT_FB)
		.value("NORMALIZE_INPUT_COLOR", CompositeInfo::NORMALIZE_INPUT_COLOR)
		.value("NORMALIZE_INPUT_AOVTYPE", CompositeInfo::NORMALIZE_INPUT_AOVTYPE)
		.value("CONSTANT_INPUT_VALUE", CompositeInfo::CONSTANT_INPUT_VALUE)
		.value("LERP_VALUE_INPUT_COLOR0", CompositeInfo::LERP_VALUE_INPUT_COLOR0)
		.value("LERP_VALUE_INPUT_COLOR1", CompositeInfo::LERP_VALUE_INPUT_COLOR1)
		.value("LERP_VALUE_INPUT_WEIGHT", CompositeInfo::LERP_VALUE_INPUT_WEIGHT)
		.value("ARITHMETIC_INPUT_COLOR0", CompositeInfo::ARITHMETIC_INPUT_COLOR0)
		.value("ARITHMETIC_INPUT_COLOR1", CompositeInfo::ARITHMETIC_INPUT_COLOR1)
		.value("ARITHMETIC_INPUT_OP", CompositeInfo::ARITHMETIC_INPUT_OP)
		.value("GAMMA_CORRECTION_INPUT_COLOR", CompositeInfo::GAMMA_CORRECTION_INPUT_COLOR)
		.value("LUT_INPUT_LUT", CompositeInfo::LUT_INPUT_LUT)
		.value("LUT_INPUT_COLOR", CompositeInfo::LUT_INPUT_COLOR)
		.value("NAME", CompositeInfo::NAME)
		.value("UNIQUE_ID", CompositeInfo::UNIQUE_ID)
		.value("CUSTOM_PTR", CompositeInfo::CUSTOM_PTR)
	;
	nb::enum_<CompositeType>(m, "CompositeType")
		.value("ARITHMETIC", CompositeType::ARITHMETIC)
		.value("LERP_VALUE", CompositeType::LERP_VALUE)
		.value("INVERSE", CompositeType::INVERSE)
		.value("NORMALIZE", CompositeType::NORMALIZE)
		.value("GAMMA_CORRECTION", CompositeType::GAMMA_CORRECTION)
		.value("EXPOSURE", CompositeType::EXPOSURE)
		.value("CONTRAST", CompositeType::CONTRAST)
		.value("SIDE_BY_SIDE", CompositeType::SIDE_BY_SIDE)
		.value("TONEMAP_ACES", CompositeType::TONEMAP_ACES)
		.value("TONEMAP_REINHARD", CompositeType::TONEMAP_REINHARD)
		.value("TONEMAP_LINEAR", CompositeType::TONEMAP_LINEAR)
		.value("FRAMEBUFFER", CompositeType::FRAMEBUFFER)
		.value("CONSTANT", CompositeType::CONSTANT)
		.value("LUT", CompositeType::LUT)
	;
	nb::enum_<Grid>(m, "Grid")
		.value("SIZE_X", Grid::SIZE_X)
		.value("SIZE_Y", Grid::SIZE_Y)
		.value("SIZE_Z", Grid::SIZE_Z)
		.value("DATA", Grid::DATA)
		.value("DATA_SIZEBYTE", Grid::DATA_SIZEBYTE)
		.value("INDICES", Grid::INDICES)
		.value("INDICES_NUMBER", Grid::INDICES_NUMBER)
		.value("INDICES_TOPOLOGY", Grid::INDICES_TOPOLOGY)
		.value("NAME", Grid::NAME)
		.value("UNIQUE_ID", Grid::UNIQUE_ID)
		.value("CUSTOM_PTR", Grid::CUSTOM_PTR)
	;
	nb::enum_<HeteroVolume>(m, "HeteroVolume")
		.value("TRANSFORM", HeteroVolume::TRANSFORM)
		.value("ALBEDO_V2", HeteroVolume::ALBEDO_V2)
		.value("DENSITY_V2", HeteroVolume::DENSITY_V2)
		.value("EMISSION_V2", HeteroVolume::EMISSION_V2)
		.value("ALBEDO_LOOKUP_VALUES", HeteroVolume::ALBEDO_LOOKUP_VALUES)
		.value("ALBEDO_LOOKUP_VALUES_COUNT", HeteroVolume::ALBEDO_LOOKUP_VALUES_COUNT)
		.value("DENSITY_LOOKUP_VALUES", HeteroVolume::DENSITY_LOOKUP_VALUES)
		.value("DENSITY_LOOKUP_VALUES_COUNT", HeteroVolume::DENSITY_LOOKUP_VALUES_COUNT)
		.value("EMISSION_LOOKUP_VALUES", HeteroVolume::EMISSION_LOOKUP_VALUES)
		.value("EMISSION_LOOKUP_VALUES_COUNT", HeteroVolume::EMISSION_LOOKUP_VALUES_COUNT)
		.value("ALBEDO_SCALE", HeteroVolume::ALBEDO_SCALE)
		.value("DENSITY_SCALE", HeteroVolume::DENSITY_SCALE)
		.value("EMISSION_SCALE", HeteroVolume::EMISSION_SCALE)
		.value("NAME", HeteroVolume::NAME)
		.value("UNIQUE_ID", HeteroVolume::UNIQUE_ID)
		.value("CUSTOM_PTR", HeteroVolume::CUSTOM_PTR)
	;
	nb::enum_<GridIndicesTopology>(m, "GridIndicesTopology")
		.value("I_U64", GridIndicesTopology::I_U64)
		.value("XYZ_U32", GridIndicesTopology::XYZ_U32)
		.value("I_S64", GridIndicesTopology::I_S64)
		.value("XYZ_S32", GridIndicesTopology::XYZ_S32)
	;
	nb::enum_<Curve>(m, "Curve")
		.value("CONTROLPOINTS_COUNT", Curve::CONTROLPOINTS_COUNT)
		.value("CONTROLPOINTS_DATA", Curve::CONTROLPOINTS_DATA)
		.value("CONTROLPOINTS_STRIDE", Curve::CONTROLPOINTS_STRIDE)
		.value("INDICES_COUNT", Curve::INDICES_COUNT)
		.value("INDICES_DATA", Curve::INDICES_DATA)
		.value("RADIUS", Curve::RADIUS)
		.value("UV", Curve::UV)
		.value("COUNT_CURVE", Curve::COUNT_CURVE)
		.value("SEGMENTS_PER_CURVE", Curve::SEGMENTS_PER_CURVE)
		.value("CREATION_FLAG", Curve::CREATION_FLAG)
		.value("NAME", Curve::NAME)
		.value("UNIQUE_ID", Curve::UNIQUE_ID)
		.value("CUSTOM_PTR", Curve::CUSTOM_PTR)
		.value("TRANSFORM", Curve::TRANSFORM)
		.value("MATERIAL", Curve::MATERIAL)
		.value("VISIBILITY_PRIMARY_ONLY_FLAG", Curve::VISIBILITY_PRIMARY_ONLY_FLAG)
		.value("VISIBILITY_SHADOW", Curve::VISIBILITY_SHADOW)
		.value("VISIBILITY_REFLECTION", Curve::VISIBILITY_REFLECTION)
		.value("VISIBILITY_REFRACTION", Curve::VISIBILITY_REFRACTION)
		.value("VISIBILITY_TRANSPARENT", Curve::VISIBILITY_TRANSPARENT)
		.value("VISIBILITY_DIFFUSE", Curve::VISIBILITY_DIFFUSE)
		.value("VISIBILITY_GLOSSY_REFLECTION", Curve::VISIBILITY_GLOSSY_REFLECTION)
		.value("VISIBILITY_GLOSSY_REFRACTION", Curve::VISIBILITY_GLOSSY_REFRACTION)
		.value("VISIBILITY_LIGHT", Curve::VISIBILITY_LIGHT)
		.value("VISIBILITY_RECEIVE_SHADOW", Curve::VISIBILITY_RECEIVE_SHADOW)
	;
	m.attr("FALSE") = 0u;
	m.attr("TRUE") = 1u;
	nb::class_<rpr_image_desc>(m, "ImageDesc")
.def(nb::init<>())
		.def_rw("width", &rpr_image_desc::image_width)
		.def_rw("height", &rpr_image_desc::image_height)
		.def_rw("depth", &rpr_image_desc::image_depth)
		.def_rw("row_pitch", &rpr_image_desc::image_row_pitch)
		.def_rw("slice_pitch", &rpr_image_desc::image_slice_pitch)
	;
	nb::class_<rpr_buffer_desc>(m, "BufferDesc")
.def(nb::init<>())
		.def_rw("nb_element", &rpr_buffer_desc::nb_element)
		.def_rw("element_type", &rpr_buffer_desc::element_type)
		.def_rw("element_channel_size", &rpr_buffer_desc::element_channel_size)
	;
	nb::class_<rpr_framebuffer_desc>(m, "FrameBufferDesc")
.def(nb::init<>())
		.def_rw("fb_width", &rpr_framebuffer_desc::fb_width)
		.def_rw("fb_height", &rpr_framebuffer_desc::fb_height)
	;
	nb::class_<rpr_render_statistics>(m, "RenderStatistics")
.def(nb::init<>())
		.def_rw("gpumem_usage", &rpr_render_statistics::gpumem_usage)
		.def_rw("gpumem_total", &rpr_render_statistics::gpumem_total)
		.def_rw("gpumem_max_allocation", &rpr_render_statistics::gpumem_max_allocation)
		.def_rw("sysmem_usage", &rpr_render_statistics::sysmem_usage)
	;
	nb::class_<rpr_image_format>(m, "ImageFormat")
.def(nb::init<>())
		.def_rw("num_components", &rpr_image_format::num_components)
		.def_rw("type", &rpr_image_format::type)
	;
	nb::class_<rpr_framebuffer_format>(m, "FramebufferFormat")
.def(nb::init<>())
		.def_rw("num_components", &rpr_framebuffer_format::num_components)
		.def_rw("type", &rpr_framebuffer_format::type)
	;
	nb::class_<rpr_ies_image_desc>(m, "IesImageDesc")
.def(nb::init<>())
		.def_rw("w", &rpr_ies_image_desc::w)
		.def_rw("h", &rpr_ies_image_desc::h)
		.def_rw("data", &rpr_ies_image_desc::data)
		.def_rw("filename", &rpr_ies_image_desc::filename)
	;
	m.def("RegisterPlugin", []( std::string path )
	{

		PYRPR_CHECK_ERROR( rprRegisterPlugin(  path.c_str()   )  );
		return ret;
	});
	m.def("CreateContext", []( rpr_uint api_version,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> pluginIDs,  size_t pluginCount,  rpr_creation_flags creation_flags,  std::vector<void*> props,  std::string cache_path,  PyRprContext* out_context )
	{
		const int32_t* pluginIDs___pycast =    pluginIDs.size() == 0 ? nullptr :     &(((int32_t*)pluginIDs.data())[0]);

		PYRPR_CHECK_ERROR( rprCreateContext(  api_version,  pluginIDs___pycast,  pluginCount,  creation_flags,  &(props[0]),  cache_path.c_str(),  &(out_context->h)   )  );
		return ret;
	});
	m.def("ContextSetActivePlugin", []( PyRprContext* context,  rpr_int pluginID )
	{

		PYRPR_CHECK_ERROR( rprContextSetActivePlugin(  context->h,  pluginID   )  );
		return ret;
	});
	m.def("ContextGetInfo", []( PyRprContext* context,  rpr_context_info context_info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprContextGetInfo(  context->h,  context_info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("ContextGetParameterInfo", []( PyRprContext* context,  int param_idx,  rpr_parameter_info parameter_info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprContextGetParameterInfo(  context->h,  param_idx,  parameter_info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("ContextGetAOV", []( PyRprContext* context,  rpr_aov aov,  PyRprFramebuffer* out_fb )
	{

		PYRPR_CHECK_ERROR( rprContextGetAOV(  context->h,  aov,  &(out_fb->h)   )  );
		return ret;
	});
	m.def("ContextSetAOV", []( PyRprContext* context,  rpr_aov aov,  PyRprFramebuffer* frame_buffer )
	{

		PYRPR_CHECK_ERROR( rprContextSetAOV(  context->h,  aov,  frame_buffer->h   )  );
		return ret;
	});
	m.def("ContextAttachRenderLayer", []( PyRprContext* context,  std::string renderLayerString )
	{

		PYRPR_CHECK_ERROR( rprContextAttachRenderLayer(  context->h,  renderLayerString.c_str()   )  );
		return ret;
	});
	m.def("ContextDetachRenderLayer", []( PyRprContext* context,  std::string renderLayerString )
	{

		PYRPR_CHECK_ERROR( rprContextDetachRenderLayer(  context->h,  renderLayerString.c_str()   )  );
		return ret;
	});
	m.def("FrameBufferSetLPE", []( PyRprFramebuffer* frame_buffer,  std::string lpe )
	{

		PYRPR_CHECK_ERROR( rprFrameBufferSetLPE(  frame_buffer->h,  lpe.c_str()   )  );
		return ret;
	});
	m.def("ContextSetAOVindexLookup", []( PyRprContext* context,  rpr_int key,  rpr_float colorR,  rpr_float colorG,  rpr_float colorB,  rpr_float colorA )
	{

		PYRPR_CHECK_ERROR( rprContextSetAOVindexLookup(  context->h,  key,  colorR,  colorG,  colorB,  colorA   )  );
		return ret;
	});
	m.def("ContextSetCuttingPlane", []( PyRprContext* context,  rpr_int index,  rpr_float a,  rpr_float b,  rpr_float c,  rpr_float d )
	{

		PYRPR_CHECK_ERROR( rprContextSetCuttingPlane(  context->h,  index,  a,  b,  c,  d   )  );
		return ret;
	});
	m.def("ContextSetAOVindicesLookup", []( PyRprContext* context,  rpr_int keyOffset,  rpr_int keyCount,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> colorRGBA )
	{
		const rpr_float* colorRGBA___pycast =    colorRGBA.size() == 0 ? nullptr :      &(((rpr_float*)colorRGBA.data())[0]);

		PYRPR_CHECK_ERROR( rprContextSetAOVindicesLookup(  context->h,  keyOffset,  keyCount,  colorRGBA___pycast   )  );
		return ret;
	});
	m.def("ContextSetUserTexture", []( PyRprContext* context,  rpr_int index,  std::string gpuCode,  void* cpuCode )
	{

		PYRPR_CHECK_ERROR( rprContextSetUserTexture(  context->h,  index,  gpuCode.c_str(),  cpuCode   )  );
		return ret;
	});
	m.def("ContextGetUserTexture", []( PyRprContext* context,  rpr_int index,  size_t bufferSizeByte,  void* buffer,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprContextGetUserTexture(  context->h,  index,  bufferSizeByte,  buffer,  size_ret   )  );
		return ret;
	});
	m.def("ContextSetScene", []( PyRprContext* context,  PyRprScene* scene )
	{

		PYRPR_CHECK_ERROR( rprContextSetScene(  context->h,  scene->h   )  );
		return ret;
	});
	m.def("ContextGetScene", []( PyRprContext* arg0,  PyRprScene* out_scene )
	{

		PYRPR_CHECK_ERROR( rprContextGetScene(  arg0->h,  &(out_scene->h)   )  );
		return ret;
	});
	m.def("ContextSetParameterByKey1u", []( PyRprContext* context,  rpr_context_info in_input,  rpr_uint x )
	{

		PYRPR_CHECK_ERROR( rprContextSetParameterByKey1u(  context->h,  in_input,  x   )  );
		return ret;
	});
	m.def("ContextSetParameterByKeyPtr", []( PyRprContext* context,  rpr_context_info in_input,  void* x )
	{

		PYRPR_CHECK_ERROR( rprContextSetParameterByKeyPtr(  context->h,  in_input,  x   )  );
		return ret;
	});
	m.def("ContextSetParameterByKey1f", []( PyRprContext* context,  rpr_context_info in_input,  rpr_float x )
	{

		PYRPR_CHECK_ERROR( rprContextSetParameterByKey1f(  context->h,  in_input,  x   )  );
		return ret;
	});
	m.def("ContextSetParameterByKey3f", []( PyRprContext* context,  rpr_context_info in_input,  rpr_float x,  rpr_float y,  rpr_float z )
	{

		PYRPR_CHECK_ERROR( rprContextSetParameterByKey3f(  context->h,  in_input,  x,  y,  z   )  );
		return ret;
	});
	m.def("ContextSetParameterByKey4f", []( PyRprContext* context,  rpr_context_info in_input,  rpr_float x,  rpr_float y,  rpr_float z,  rpr_float w )
	{

		PYRPR_CHECK_ERROR( rprContextSetParameterByKey4f(  context->h,  in_input,  x,  y,  z,  w   )  );
		return ret;
	});
	m.def("ContextSetParameterByKeyString", []( PyRprContext* context,  rpr_context_info in_input,  std::string value )
	{

		PYRPR_CHECK_ERROR( rprContextSetParameterByKeyString(  context->h,  in_input,  value.c_str()   )  );
		return ret;
	});
	m.def("ContextSetInternalParameter4f", []( PyRprContext* context,  rpr_uint pluginIndex,  std::string paramName,  rpr_float x,  rpr_float y,  rpr_float z,  rpr_float w )
	{

		PYRPR_CHECK_ERROR( rprContextSetInternalParameter4f(  context->h,  pluginIndex,  paramName.c_str(),  x,  y,  z,  w   )  );
		return ret;
	});
	m.def("ContextSetInternalParameter1u", []( PyRprContext* context,  rpr_uint pluginIndex,  std::string paramName,  rpr_uint x )
	{

		PYRPR_CHECK_ERROR( rprContextSetInternalParameter1u(  context->h,  pluginIndex,  paramName.c_str(),  x   )  );
		return ret;
	});
	m.def("ContextSetInternalParameterBuffer", []( PyRprContext* context,  rpr_uint pluginIndex,  std::string paramName,  void* buffer,  size_t bufferSizeByte )
	{

		PYRPR_CHECK_ERROR( rprContextSetInternalParameterBuffer(  context->h,  pluginIndex,  paramName.c_str(),  buffer,  bufferSizeByte   )  );
		return ret;
	});
	m.def("ContextGetInternalParameter4f", []( PyRprContext* context,  rpr_uint pluginIndex,  std::string paramName,  rpr_float* x,  rpr_float* y,  rpr_float* z,  rpr_float* w )
	{

		PYRPR_CHECK_ERROR( rprContextGetInternalParameter4f(  context->h,  pluginIndex,  paramName.c_str(),  x,  y,  z,  w   )  );
		return ret;
	});
	m.def("ContextGetInternalParameter1u", []( PyRprContext* context,  rpr_uint pluginIndex,  std::string paramName,  rpr_uint* x )
	{

		PYRPR_CHECK_ERROR( rprContextGetInternalParameter1u(  context->h,  pluginIndex,  paramName.c_str(),  x   )  );
		return ret;
	});
	m.def("ContextGetInternalParameterBuffer", []( PyRprContext* context,  rpr_uint pluginIndex,  std::string paramName,  size_t bufferSizeByte,  void* buffer,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprContextGetInternalParameterBuffer(  context->h,  pluginIndex,  paramName.c_str(),  bufferSizeByte,  buffer,  size_ret   )  );
		return ret;
	});
	m.def("ContextRender", []( PyRprContext* context )
	{

		PYRPR_CHECK_ERROR( rprContextRender(  context->h   )  );
		return ret;
	});
	m.def("ContextAbortRender", []( PyRprContext* context )
	{

		PYRPR_CHECK_ERROR( rprContextAbortRender(  context->h   )  );
		return ret;
	});
	m.def("ContextRenderTile", []( PyRprContext* context,  rpr_uint xmin,  rpr_uint xmax,  rpr_uint ymin,  rpr_uint ymax )
	{

		PYRPR_CHECK_ERROR( rprContextRenderTile(  context->h,  xmin,  xmax,  ymin,  ymax   )  );
		return ret;
	});
	m.def("ContextClearMemory", []( PyRprContext* context )
	{

		PYRPR_CHECK_ERROR( rprContextClearMemory(  context->h   )  );
		return ret;
	});
	m.def("ContextCreateImage", []( PyRprContext* context,  rpr_image_format format,  rpr_image_desc* image_desc,  void* data,  PyRprImage* out_image )
	{

		PYRPR_CHECK_ERROR( rprContextCreateImage(  context->h,  format,  image_desc,  data,  &(out_image->h)   )  );
		return ret;
	});
	m.def("ContextCreateBuffer", []( PyRprContext* context,  rpr_buffer_desc* buffer_desc,  void* data,  PyRprBuffer* out_buffer )
	{

		PYRPR_CHECK_ERROR( rprContextCreateBuffer(  context->h,  buffer_desc,  data,  &(out_buffer->h)   )  );
		return ret;
	});
	m.def("ContextCreateImageFromFile", []( PyRprContext* context,  std::string path,  PyRprImage* out_image )
	{

		PYRPR_CHECK_ERROR( rprContextCreateImageFromFile(  context->h,  path.c_str(),  &(out_image->h)   )  );
		return ret;
	});
	m.def("ContextCreateImageFromFileMemory", []( PyRprContext* context,  std::string extension,  void* data,  size_t dataSizeByte,  PyRprImage* out_image )
	{

		PYRPR_CHECK_ERROR( rprContextCreateImageFromFileMemory(  context->h,  extension.c_str(),  data,  dataSizeByte,  &(out_image->h)   )  );
		return ret;
	});
	m.def("ContextCreateScene", []( PyRprContext* context,  PyRprScene* out_scene )
	{

		PYRPR_CHECK_ERROR( rprContextCreateScene(  context->h,  &(out_scene->h)   )  );
		return ret;
	});
	m.def("ContextCreateInstance", []( PyRprContext* context,  PyRprShape* shape,  PyRprShape* out_instance )
	{

		PYRPR_CHECK_ERROR( rprContextCreateInstance(  context->h,  shape->h,  &(out_instance->h)   )  );
		return ret;
	});
	m.def("ContextCreateMesh", []( PyRprContext* context,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> vertices, int vertices____offset,  size_t num_vertices,  rpr_int vertex_stride,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> normals, int normals____offset,  size_t num_normals,  rpr_int normal_stride,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> texcoords, int texcoords____offset,  size_t num_texcoords,  rpr_int texcoord_stride,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> vertex_indices,  rpr_int vidx_stride,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> normal_indices,  rpr_int nidx_stride,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> texcoord_indices,  rpr_int tidx_stride,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> num_face_vertices,  size_t num_faces,  PyRprShape* out_mesh )
	{
		const rpr_float* vertices___pycast =    vertices.size() == 0 ? nullptr :      &(((rpr_float*)vertices.data())[vertices____offset]);
		const rpr_float* normals___pycast =    normals.size() == 0 ? nullptr :      &(((rpr_float*)normals.data())[normals____offset]);
		const rpr_float* texcoords___pycast =    texcoords.size() == 0 ? nullptr :      &(((rpr_float*)texcoords.data())[texcoords____offset]);
		const int32_t* vertex_indices___pycast =    vertex_indices.size() == 0 ? nullptr :     &(((int32_t*)vertex_indices.data())[0]);
		const int32_t* normal_indices___pycast =    normal_indices.size() == 0 ? nullptr :     &(((int32_t*)normal_indices.data())[0]);
		const int32_t* texcoord_indices___pycast =    texcoord_indices.size() == 0 ? nullptr :     &(((int32_t*)texcoord_indices.data())[0]);
		const int32_t* num_face_vertices___pycast =    num_face_vertices.size() == 0 ? nullptr :     &(((int32_t*)num_face_vertices.data())[0]);

		PYRPR_CHECK_ERROR( rprContextCreateMesh(  context->h,  vertices___pycast,  num_vertices,  vertex_stride,  normals___pycast,  num_normals,  normal_stride,  texcoords___pycast,  num_texcoords,  texcoord_stride,  vertex_indices___pycast,  vidx_stride,  normal_indices___pycast,  nidx_stride,  texcoord_indices___pycast,  tidx_stride,  num_face_vertices___pycast,  num_faces,  &(out_mesh->h)   )  );
		return ret;
	});
	m.def("ContextCreateMeshEx", []( PyRprContext* context,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> vertices, int vertices____offset,  size_t num_vertices,  rpr_int vertex_stride,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> normals, int normals____offset,  size_t num_normals,  rpr_int normal_stride,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> perVertexFlag,  size_t num_perVertexFlags,  rpr_int perVertexFlag_stride,  rpr_int numberOfTexCoordLayers,  nb::ndarray<float_t, nb::shape<nb::any,nb::any>, nb::c_contig, nb::device::cpu> texcoords, int texcoords____offset,  nb::ndarray<size_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> num_texcoords,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> texcoord_stride,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> vertex_indices,  rpr_int vidx_stride,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> normal_indices,  rpr_int nidx_stride,  nb::ndarray<int32_t, nb::shape<nb::any,nb::any>, nb::c_contig, nb::device::cpu> texcoord_indices,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> tidx_stride,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> num_face_vertices,  size_t num_faces,  PyRprShape* out_mesh )
	{
		const rpr_float* vertices___pycast =    vertices.size() == 0 ? nullptr :      &(((rpr_float*)vertices.data())[vertices____offset]);
		const rpr_float* normals___pycast =    normals.size() == 0 ? nullptr :      &(((rpr_float*)normals.data())[normals____offset]);
		const int32_t* perVertexFlag___pycast =    perVertexFlag.size() == 0 ? nullptr :     &(((int32_t*)perVertexFlag.data())[0]);
		RPRPY_NDARRY_TO_PPFLOAT(texcoords,texcoords____offset);
		const size_t* num_texcoords___pycast =    num_texcoords.size() == 0 ? nullptr :     &(((size_t*)num_texcoords.data())[0]);
		const int32_t* texcoord_stride___pycast =    texcoord_stride.size() == 0 ? nullptr :     &(((int32_t*)texcoord_stride.data())[0]);
		const int32_t* vertex_indices___pycast =    vertex_indices.size() == 0 ? nullptr :     &(((int32_t*)vertex_indices.data())[0]);
		const int32_t* normal_indices___pycast =    normal_indices.size() == 0 ? nullptr :     &(((int32_t*)normal_indices.data())[0]);
		RPRPY_NDARRY_TO_PPINT32(texcoord_indices,0);
		const int32_t* tidx_stride___pycast =    tidx_stride.size() == 0 ? nullptr :     &(((int32_t*)tidx_stride.data())[0]);
		const int32_t* num_face_vertices___pycast =    num_face_vertices.size() == 0 ? nullptr :     &(((int32_t*)num_face_vertices.data())[0]);

		PYRPR_CHECK_ERROR( rprContextCreateMeshEx(  context->h,  vertices___pycast,  num_vertices,  vertex_stride,  normals___pycast,  num_normals,  normal_stride,  perVertexFlag___pycast,  num_perVertexFlags,  perVertexFlag_stride,  numberOfTexCoordLayers,  texcoords___pycast,  num_texcoords___pycast,  texcoord_stride___pycast,  vertex_indices___pycast,  vidx_stride,  normal_indices___pycast,  nidx_stride,  texcoord_indices___pycast,  tidx_stride___pycast,  num_face_vertices___pycast,  num_faces,  &(out_mesh->h)   )  );
		return ret;
	});
	m.def("ContextCreateMeshEx2", []( PyRprContext* context,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> vertices, int vertices____offset,  size_t num_vertices,  rpr_int vertex_stride,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> normals, int normals____offset,  size_t num_normals,  rpr_int normal_stride,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> perVertexFlag,  size_t num_perVertexFlags,  rpr_int perVertexFlag_stride,  rpr_int numberOfTexCoordLayers,  nb::ndarray<float_t, nb::shape<nb::any,nb::any>, nb::c_contig, nb::device::cpu> texcoords, int texcoords____offset,  nb::ndarray<size_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> num_texcoords,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> texcoord_stride,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> vertex_indices,  rpr_int vidx_stride,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> normal_indices,  rpr_int nidx_stride,  nb::ndarray<int32_t, nb::shape<nb::any,nb::any>, nb::c_contig, nb::device::cpu> texcoord_indices,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> tidx_stride,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> num_face_vertices,  size_t num_faces,  std::vector<uint32_t> mesh_properties,  PyRprShape* out_mesh )
	{
		const rpr_float* vertices___pycast =    vertices.size() == 0 ? nullptr :      &(((rpr_float*)vertices.data())[vertices____offset]);
		const rpr_float* normals___pycast =    normals.size() == 0 ? nullptr :      &(((rpr_float*)normals.data())[normals____offset]);
		const int32_t* perVertexFlag___pycast =    perVertexFlag.size() == 0 ? nullptr :     &(((int32_t*)perVertexFlag.data())[0]);
		RPRPY_NDARRY_TO_PPFLOAT(texcoords,texcoords____offset);
		const size_t* num_texcoords___pycast =    num_texcoords.size() == 0 ? nullptr :     &(((size_t*)num_texcoords.data())[0]);
		const int32_t* texcoord_stride___pycast =    texcoord_stride.size() == 0 ? nullptr :     &(((int32_t*)texcoord_stride.data())[0]);
		const int32_t* vertex_indices___pycast =    vertex_indices.size() == 0 ? nullptr :     &(((int32_t*)vertex_indices.data())[0]);
		const int32_t* normal_indices___pycast =    normal_indices.size() == 0 ? nullptr :     &(((int32_t*)normal_indices.data())[0]);
		RPRPY_NDARRY_TO_PPINT32(texcoord_indices,0);
		const int32_t* tidx_stride___pycast =    tidx_stride.size() == 0 ? nullptr :     &(((int32_t*)tidx_stride.data())[0]);
		const int32_t* num_face_vertices___pycast =    num_face_vertices.size() == 0 ? nullptr :     &(((int32_t*)num_face_vertices.data())[0]);

		PYRPR_CHECK_ERROR( rprContextCreateMeshEx2(  context->h,  vertices___pycast,  num_vertices,  vertex_stride,  normals___pycast,  num_normals,  normal_stride,  perVertexFlag___pycast,  num_perVertexFlags,  perVertexFlag_stride,  numberOfTexCoordLayers,  texcoords___pycast,  num_texcoords___pycast,  texcoord_stride___pycast,  vertex_indices___pycast,  vidx_stride,  normal_indices___pycast,  nidx_stride,  texcoord_indices___pycast,  tidx_stride___pycast,  num_face_vertices___pycast,  num_faces,  &(mesh_properties[0]),  &(out_mesh->h)   )  );
		return ret;
	});
	m.def("ContextCreateCamera", []( PyRprContext* context,  PyRprCamera* out_camera )
	{

		PYRPR_CHECK_ERROR( rprContextCreateCamera(  context->h,  &(out_camera->h)   )  );
		return ret;
	});
	m.def("ContextCreateFrameBuffer", []( PyRprContext* context,  rpr_framebuffer_format format,  rpr_framebuffer_desc* fb_desc,  PyRprFramebuffer* out_fb )
	{

		PYRPR_CHECK_ERROR( rprContextCreateFrameBuffer(  context->h,  format,  fb_desc,  &(out_fb->h)   )  );
		return ret;
	});
	m.def("CameraGetInfo", []( PyRprCamera* camera,  rpr_camera_info camera_info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprCameraGetInfo(  camera->h,  camera_info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("CameraSetFocalLength", []( PyRprCamera* camera,  rpr_float flength )
	{

		PYRPR_CHECK_ERROR( rprCameraSetFocalLength(  camera->h,  flength   )  );
		return ret;
	});
	m.def("CameraSetMotionTransformCount", []( PyRprCamera* camera,  rpr_uint transformCount )
	{

		PYRPR_CHECK_ERROR( rprCameraSetMotionTransformCount(  camera->h,  transformCount   )  );
		return ret;
	});
	m.def("CameraSetMotionTransform", []( PyRprCamera* camera,  rpr_bool transpose,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> transform,  rpr_uint timeIndex )
	{
		const rpr_float* transform___pycast =    transform.size() == 0 ? nullptr :      &(((rpr_float*)transform.data())[0]);

		PYRPR_CHECK_ERROR( rprCameraSetMotionTransform(  camera->h,  transpose,  transform___pycast,  timeIndex   )  );
		return ret;
	});
	m.def("CameraSetFocusDistance", []( PyRprCamera* camera,  rpr_float fdist )
	{

		PYRPR_CHECK_ERROR( rprCameraSetFocusDistance(  camera->h,  fdist   )  );
		return ret;
	});
	m.def("CameraSetTransform", []( PyRprCamera* camera,  rpr_bool transpose,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> transform )
	{
		const rpr_float* transform___pycast =    transform.size() == 0 ? nullptr :      &(((rpr_float*)transform.data())[0]);

		PYRPR_CHECK_ERROR( rprCameraSetTransform(  camera->h,  transpose,  transform___pycast   )  );
		return ret;
	});
	m.def("CameraSetSensorSize", []( PyRprCamera* camera,  rpr_float width,  rpr_float height )
	{

		PYRPR_CHECK_ERROR( rprCameraSetSensorSize(  camera->h,  width,  height   )  );
		return ret;
	});
	m.def("CameraLookAt", []( PyRprCamera* camera,  rpr_float posx,  rpr_float posy,  rpr_float posz,  rpr_float atx,  rpr_float aty,  rpr_float atz,  rpr_float upx,  rpr_float upy,  rpr_float upz )
	{

		PYRPR_CHECK_ERROR( rprCameraLookAt(  camera->h,  posx,  posy,  posz,  atx,  aty,  atz,  upx,  upy,  upz   )  );
		return ret;
	});
	m.def("CameraSetFStop", []( PyRprCamera* camera,  rpr_float fstop )
	{

		PYRPR_CHECK_ERROR( rprCameraSetFStop(  camera->h,  fstop   )  );
		return ret;
	});
	m.def("CameraSetApertureBlades", []( PyRprCamera* camera,  rpr_uint num_blades )
	{

		PYRPR_CHECK_ERROR( rprCameraSetApertureBlades(  camera->h,  num_blades   )  );
		return ret;
	});
	m.def("CameraSetExposure", []( PyRprCamera* camera,  rpr_float exposure )
	{

		PYRPR_CHECK_ERROR( rprCameraSetExposure(  camera->h,  exposure   )  );
		return ret;
	});
	m.def("CameraSetMode", []( PyRprCamera* camera,  rpr_camera_mode mode )
	{

		PYRPR_CHECK_ERROR( rprCameraSetMode(  camera->h,  mode   )  );
		return ret;
	});
	m.def("CameraSetOrthoWidth", []( PyRprCamera* camera,  rpr_float width )
	{

		PYRPR_CHECK_ERROR( rprCameraSetOrthoWidth(  camera->h,  width   )  );
		return ret;
	});
	m.def("CameraSetFocalTilt", []( PyRprCamera* camera,  rpr_float tilt )
	{

		PYRPR_CHECK_ERROR( rprCameraSetFocalTilt(  camera->h,  tilt   )  );
		return ret;
	});
	m.def("CameraSetIPD", []( PyRprCamera* camera,  rpr_float ipd )
	{

		PYRPR_CHECK_ERROR( rprCameraSetIPD(  camera->h,  ipd   )  );
		return ret;
	});
	m.def("CameraSetLensShift", []( PyRprCamera* camera,  rpr_float shiftx,  rpr_float shifty )
	{

		PYRPR_CHECK_ERROR( rprCameraSetLensShift(  camera->h,  shiftx,  shifty   )  );
		return ret;
	});
	m.def("CameraSetTiltCorrection", []( PyRprCamera* camera,  rpr_float tiltX,  rpr_float tiltY )
	{

		PYRPR_CHECK_ERROR( rprCameraSetTiltCorrection(  camera->h,  tiltX,  tiltY   )  );
		return ret;
	});
	m.def("CameraSetOrthoHeight", []( PyRprCamera* camera,  rpr_float height )
	{

		PYRPR_CHECK_ERROR( rprCameraSetOrthoHeight(  camera->h,  height   )  );
		return ret;
	});
	m.def("CameraSetNearPlane", []( PyRprCamera* camera,  rpr_float near )
	{

		PYRPR_CHECK_ERROR( rprCameraSetNearPlane(  camera->h,  near   )  );
		return ret;
	});
	m.def("CameraSetPostScale", []( PyRprCamera* camera,  rpr_float scale )
	{

		PYRPR_CHECK_ERROR( rprCameraSetPostScale(  camera->h,  scale   )  );
		return ret;
	});
	m.def("CameraSetFarPlane", []( PyRprCamera* camera,  rpr_float far )
	{

		PYRPR_CHECK_ERROR( rprCameraSetFarPlane(  camera->h,  far   )  );
		return ret;
	});
	m.def("CameraSetUVDistortion", []( PyRprCamera* camera,  PyRprImage* distortionMap )
	{

		PYRPR_CHECK_ERROR( rprCameraSetUVDistortion(  camera->h,  distortionMap->h   )  );
		return ret;
	});
	m.def("ImageGetInfo", []( PyRprImage* image,  rpr_image_info image_info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprImageGetInfo(  image->h,  image_info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("ImageSetWrap", []( PyRprImage* image,  rpr_image_wrap_type type )
	{

		PYRPR_CHECK_ERROR( rprImageSetWrap(  image->h,  type   )  );
		return ret;
	});
	m.def("ImageSetInternalCompression", []( PyRprImage* image,  rpr_uint compressionEnabled )
	{

		PYRPR_CHECK_ERROR( rprImageSetInternalCompression(  image->h,  compressionEnabled   )  );
		return ret;
	});
	m.def("ImageSetOcioColorspace", []( PyRprImage* image,  std::string ocioColorspace )
	{

		PYRPR_CHECK_ERROR( rprImageSetOcioColorspace(  image->h,  ocioColorspace.c_str()   )  );
		return ret;
	});
	m.def("ImageSetUDIM", []( PyRprImage* imageUdimRoot,  rpr_uint tileIndex,  PyRprImage* imageTile )
	{

		PYRPR_CHECK_ERROR( rprImageSetUDIM(  imageUdimRoot->h,  tileIndex,  imageTile->h   )  );
		return ret;
	});
	m.def("ImageSetFilter", []( PyRprImage* image,  rpr_image_filter_type type )
	{

		PYRPR_CHECK_ERROR( rprImageSetFilter(  image->h,  type   )  );
		return ret;
	});
	m.def("ImageSetGamma", []( PyRprImage* image,  rpr_float type )
	{

		PYRPR_CHECK_ERROR( rprImageSetGamma(  image->h,  type   )  );
		return ret;
	});
	m.def("ImageSetMipmapEnabled", []( PyRprImage* image,  rpr_bool enabled )
	{

		PYRPR_CHECK_ERROR( rprImageSetMipmapEnabled(  image->h,  enabled   )  );
		return ret;
	});
	m.def("ShapeSetTransform", []( PyRprShape* shape,  rpr_bool transpose,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> transform )
	{
		const rpr_float* transform___pycast =    transform.size() == 0 ? nullptr :      &(((rpr_float*)transform.data())[0]);

		PYRPR_CHECK_ERROR( rprShapeSetTransform(  shape->h,  transpose,  transform___pycast   )  );
		return ret;
	});
	m.def("ShapeSetVertexValue", []( PyRprShape* in_shape,  rpr_int setIndex,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> indices,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> values,  rpr_int indicesCount )
	{
		const int32_t* indices___pycast =    indices.size() == 0 ? nullptr :     &(((int32_t*)indices.data())[0]);
		const rpr_float* values___pycast =    values.size() == 0 ? nullptr :      &(((rpr_float*)values.data())[0]);

		PYRPR_CHECK_ERROR( rprShapeSetVertexValue(  in_shape->h,  setIndex,  indices___pycast,  values___pycast,  indicesCount   )  );
		return ret;
	});
	m.def("ShapeSetPrimvar", []( PyRprShape* in_shape,  rpr_uint key,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> data,  rpr_uint floatCount,  rpr_uint componentCount,  rpr_primvar_interpolation_type interop )
	{
		const rpr_float* data___pycast =    data.size() == 0 ? nullptr :      &(((rpr_float*)data.data())[0]);

		PYRPR_CHECK_ERROR( rprShapeSetPrimvar(  in_shape->h,  key,  data___pycast,  floatCount,  componentCount,  interop   )  );
		return ret;
	});
	m.def("ShapeSetSubdivisionFactor", []( PyRprShape* shape,  rpr_uint factor )
	{

		PYRPR_CHECK_ERROR( rprShapeSetSubdivisionFactor(  shape->h,  factor   )  );
		return ret;
	});
	m.def("ShapeSetSubdivisionAutoRatioCap", []( PyRprShape* shape,  rpr_float autoRatioCap )
	{

		PYRPR_CHECK_ERROR( rprShapeSetSubdivisionAutoRatioCap(  shape->h,  autoRatioCap   )  );
		return ret;
	});
	m.def("ShapeSetSubdivisionCreaseWeight", []( PyRprShape* shape,  rpr_float factor )
	{

		PYRPR_CHECK_ERROR( rprShapeSetSubdivisionCreaseWeight(  shape->h,  factor   )  );
		return ret;
	});
	m.def("ShapeAttachRenderLayer", []( PyRprShape* shape,  std::string renderLayerString )
	{

		PYRPR_CHECK_ERROR( rprShapeAttachRenderLayer(  shape->h,  renderLayerString.c_str()   )  );
		return ret;
	});
	m.def("ShapeDetachRenderLayer", []( PyRprShape* shape,  std::string renderLayerString )
	{

		PYRPR_CHECK_ERROR( rprShapeDetachRenderLayer(  shape->h,  renderLayerString.c_str()   )  );
		return ret;
	});
	m.def("LightAttachRenderLayer", []( PyRprLight* light,  std::string renderLayerString )
	{

		PYRPR_CHECK_ERROR( rprLightAttachRenderLayer(  light->h,  renderLayerString.c_str()   )  );
		return ret;
	});
	m.def("LightDetachRenderLayer", []( PyRprLight* light,  std::string renderLayerString )
	{

		PYRPR_CHECK_ERROR( rprLightDetachRenderLayer(  light->h,  renderLayerString.c_str()   )  );
		return ret;
	});
	m.def("ShapeSetSubdivisionBoundaryInterop", []( PyRprShape* shape,  rpr_subdiv_boundary_interfop_type type )
	{

		PYRPR_CHECK_ERROR( rprShapeSetSubdivisionBoundaryInterop(  shape->h,  type   )  );
		return ret;
	});
	m.def("ShapeAutoAdaptSubdivisionFactor", []( PyRprShape* shape,  PyRprFramebuffer* framebuffer,  PyRprCamera* camera,  rpr_int factor )
	{

		PYRPR_CHECK_ERROR( rprShapeAutoAdaptSubdivisionFactor(  shape->h,  framebuffer->h,  camera->h,  factor   )  );
		return ret;
	});
	m.def("ShapeSetDisplacementScale", []( PyRprShape* shape,  rpr_float minscale,  rpr_float maxscale )
	{

		PYRPR_CHECK_ERROR( rprShapeSetDisplacementScale(  shape->h,  minscale,  maxscale   )  );
		return ret;
	});
	m.def("ShapeSetObjectGroupID", []( PyRprShape* shape,  rpr_uint objectGroupID )
	{

		PYRPR_CHECK_ERROR( rprShapeSetObjectGroupID(  shape->h,  objectGroupID   )  );
		return ret;
	});
	m.def("ShapeSetObjectID", []( PyRprShape* shape,  rpr_uint objectID )
	{

		PYRPR_CHECK_ERROR( rprShapeSetObjectID(  shape->h,  objectID   )  );
		return ret;
	});
	m.def("ShapeSetLightGroupID", []( PyRprShape* shape,  rpr_uint lightGroupID )
	{

		PYRPR_CHECK_ERROR( rprShapeSetLightGroupID(  shape->h,  lightGroupID   )  );
		return ret;
	});
	m.def("ShapeSetLayerMask", []( PyRprShape* shape,  rpr_uint layerMask )
	{

		PYRPR_CHECK_ERROR( rprShapeSetLayerMask(  shape->h,  layerMask   )  );
		return ret;
	});
	m.def("ShapeSetDisplacementMaterial", []( PyRprShape* shape,  PyRprMaterialNode* materialNode )
	{

		PYRPR_CHECK_ERROR( rprShapeSetDisplacementMaterial(  shape->h,  materialNode->h   )  );
		return ret;
	});
	m.def("ShapeSetMaterial", []( PyRprShape* shape,  PyRprMaterialNode* node )
	{

		PYRPR_CHECK_ERROR( rprShapeSetMaterial(  shape->h,  node->h   )  );
		return ret;
	});
	m.def("ShapeSetMaterialFaces", []( PyRprShape* shape,  PyRprMaterialNode* node,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> face_indices,  size_t num_faces )
	{
		const int32_t* face_indices___pycast =    face_indices.size() == 0 ? nullptr :     &(((int32_t*)face_indices.data())[0]);

		PYRPR_CHECK_ERROR( rprShapeSetMaterialFaces(  shape->h,  node->h,  face_indices___pycast,  num_faces   )  );
		return ret;
	});
	m.def("ShapeSetVolumeMaterial", []( PyRprShape* shape,  PyRprMaterialNode* node )
	{

		PYRPR_CHECK_ERROR( rprShapeSetVolumeMaterial(  shape->h,  node->h   )  );
		return ret;
	});
	m.def("ShapeSetMotionTransformCount", []( PyRprShape* shape,  rpr_uint transformCount )
	{

		PYRPR_CHECK_ERROR( rprShapeSetMotionTransformCount(  shape->h,  transformCount   )  );
		return ret;
	});
	m.def("ShapeSetMotionTransform", []( PyRprShape* shape,  rpr_bool transpose,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> transform,  rpr_uint timeIndex )
	{
		const rpr_float* transform___pycast =    transform.size() == 0 ? nullptr :      &(((rpr_float*)transform.data())[0]);

		PYRPR_CHECK_ERROR( rprShapeSetMotionTransform(  shape->h,  transpose,  transform___pycast,  timeIndex   )  );
		return ret;
	});
	m.def("ShapeSetVisibilityFlag", []( PyRprShape* shape,  rpr_shape_info visibilityFlag,  rpr_bool visible )
	{

		PYRPR_CHECK_ERROR( rprShapeSetVisibilityFlag(  shape->h,  visibilityFlag,  visible   )  );
		return ret;
	});
	m.def("CurveSetVisibilityFlag", []( PyRprCurve* curve,  rpr_curve_parameter visibilityFlag,  rpr_bool visible )
	{

		PYRPR_CHECK_ERROR( rprCurveSetVisibilityFlag(  curve->h,  visibilityFlag,  visible   )  );
		return ret;
	});
	m.def("ShapeSetVisibility", []( PyRprShape* shape,  rpr_bool visible )
	{

		PYRPR_CHECK_ERROR( rprShapeSetVisibility(  shape->h,  visible   )  );
		return ret;
	});
	m.def("LightSetVisibilityFlag", []( PyRprLight* light,  rpr_light_info visibilityFlag,  rpr_bool visible )
	{

		PYRPR_CHECK_ERROR( rprLightSetVisibilityFlag(  light->h,  visibilityFlag,  visible   )  );
		return ret;
	});
	m.def("CurveSetVisibility", []( PyRprCurve* curve,  rpr_bool visible )
	{

		PYRPR_CHECK_ERROR( rprCurveSetVisibility(  curve->h,  visible   )  );
		return ret;
	});
	m.def("ShapeSetVisibilityInSpecular", []( PyRprShape* shape,  rpr_bool visible )
	{

		PYRPR_CHECK_ERROR( rprShapeSetVisibilityInSpecular(  shape->h,  visible   )  );
		return ret;
	});
	m.def("ShapeSetShadowCatcher", []( PyRprShape* shape,  rpr_bool shadowCatcher )
	{

		PYRPR_CHECK_ERROR( rprShapeSetShadowCatcher(  shape->h,  shadowCatcher   )  );
		return ret;
	});
	m.def("ShapeSetShadowColor", []( PyRprShape* shape,  rpr_float r,  rpr_float g,  rpr_float b )
	{

		PYRPR_CHECK_ERROR( rprShapeSetShadowColor(  shape->h,  r,  g,  b   )  );
		return ret;
	});
	m.def("ShapeSetReflectionCatcher", []( PyRprShape* shape,  rpr_bool reflectionCatcher )
	{

		PYRPR_CHECK_ERROR( rprShapeSetReflectionCatcher(  shape->h,  reflectionCatcher   )  );
		return ret;
	});
	m.def("ShapeSetContourIgnore", []( PyRprShape* shape,  rpr_bool ignoreInContour )
	{

		PYRPR_CHECK_ERROR( rprShapeSetContourIgnore(  shape->h,  ignoreInContour   )  );
		return ret;
	});
	m.def("ShapeSetEnvironmentLight", []( PyRprShape* shape,  rpr_bool envLight )
	{

		PYRPR_CHECK_ERROR( rprShapeSetEnvironmentLight(  shape->h,  envLight   )  );
		return ret;
	});
	m.def("ShapeMarkStatic", []( PyRprShape* in_shape,  rpr_bool in_is_static )
	{

		PYRPR_CHECK_ERROR( rprShapeMarkStatic(  in_shape->h,  in_is_static   )  );
		return ret;
	});
	m.def("LightSetTransform", []( PyRprLight* light,  rpr_bool transpose,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> transform )
	{
		const rpr_float* transform___pycast =    transform.size() == 0 ? nullptr :      &(((rpr_float*)transform.data())[0]);

		PYRPR_CHECK_ERROR( rprLightSetTransform(  light->h,  transpose,  transform___pycast   )  );
		return ret;
	});
	m.def("LightSetGroupId", []( PyRprLight* light,  rpr_uint groupId )
	{

		PYRPR_CHECK_ERROR( rprLightSetGroupId(  light->h,  groupId   )  );
		return ret;
	});
	m.def("ShapeGetInfo", []( PyRprShape* arg0,  rpr_shape_info arg1,  size_t arg2,  void* arg3,  size_t* arg4 )
	{

		PYRPR_CHECK_ERROR( rprShapeGetInfo(  arg0->h,  arg1,  arg2,  arg3,  arg4   )  );
		return ret;
	});
	m.def("MeshGetInfo", []( PyRprShape* mesh,  rpr_mesh_info mesh_info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprMeshGetInfo(  mesh->h,  mesh_info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("CurveGetInfo", []( PyRprCurve* curve,  rpr_curve_parameter curve_info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprCurveGetInfo(  curve->h,  curve_info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("HeteroVolumeGetInfo", []( PyRprHeteroVolume* heteroVol,  rpr_hetero_volume_parameter heteroVol_info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprHeteroVolumeGetInfo(  heteroVol->h,  heteroVol_info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("GridGetInfo", []( PyRprGrid* grid,  rpr_grid_parameter grid_info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprGridGetInfo(  grid->h,  grid_info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("BufferGetInfo", []( PyRprBuffer* buffer,  rpr_buffer_info buffer_info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprBufferGetInfo(  buffer->h,  buffer_info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("InstanceGetBaseShape", []( PyRprShape* shape,  PyRprShape* out_shape )
	{

		PYRPR_CHECK_ERROR( rprInstanceGetBaseShape(  shape->h,  &(out_shape->h)   )  );
		return ret;
	});
	m.def("ContextCreatePointLight", []( PyRprContext* context,  PyRprLight* out_light )
	{

		PYRPR_CHECK_ERROR( rprContextCreatePointLight(  context->h,  &(out_light->h)   )  );
		return ret;
	});
	m.def("PointLightSetRadiantPower3f", []( PyRprLight* light,  rpr_float r,  rpr_float g,  rpr_float b )
	{

		PYRPR_CHECK_ERROR( rprPointLightSetRadiantPower3f(  light->h,  r,  g,  b   )  );
		return ret;
	});
	m.def("ContextCreateSpotLight", []( PyRprContext* context,  PyRprLight* light )
	{

		PYRPR_CHECK_ERROR( rprContextCreateSpotLight(  context->h,  &(light->h)   )  );
		return ret;
	});
	m.def("ContextCreateSphereLight", []( PyRprContext* context,  PyRprLight* light )
	{

		PYRPR_CHECK_ERROR( rprContextCreateSphereLight(  context->h,  &(light->h)   )  );
		return ret;
	});
	m.def("ContextCreateDiskLight", []( PyRprContext* context,  PyRprLight* light )
	{

		PYRPR_CHECK_ERROR( rprContextCreateDiskLight(  context->h,  &(light->h)   )  );
		return ret;
	});
	m.def("SpotLightSetRadiantPower3f", []( PyRprLight* light,  rpr_float r,  rpr_float g,  rpr_float b )
	{

		PYRPR_CHECK_ERROR( rprSpotLightSetRadiantPower3f(  light->h,  r,  g,  b   )  );
		return ret;
	});
	m.def("SpotLightSetImage", []( PyRprLight* light,  PyRprImage* img )
	{

		PYRPR_CHECK_ERROR( rprSpotLightSetImage(  light->h,  img->h   )  );
		return ret;
	});
	m.def("SphereLightSetRadiantPower3f", []( PyRprLight* light,  rpr_float r,  rpr_float g,  rpr_float b )
	{

		PYRPR_CHECK_ERROR( rprSphereLightSetRadiantPower3f(  light->h,  r,  g,  b   )  );
		return ret;
	});
	m.def("SphereLightSetRadius", []( PyRprLight* light,  rpr_float radius )
	{

		PYRPR_CHECK_ERROR( rprSphereLightSetRadius(  light->h,  radius   )  );
		return ret;
	});
	m.def("DiskLightSetRadiantPower3f", []( PyRprLight* light,  rpr_float r,  rpr_float g,  rpr_float b )
	{

		PYRPR_CHECK_ERROR( rprDiskLightSetRadiantPower3f(  light->h,  r,  g,  b   )  );
		return ret;
	});
	m.def("DiskLightSetRadius", []( PyRprLight* light,  rpr_float radius )
	{

		PYRPR_CHECK_ERROR( rprDiskLightSetRadius(  light->h,  radius   )  );
		return ret;
	});
	m.def("DiskLightSetAngle", []( PyRprLight* light,  rpr_float angle )
	{

		PYRPR_CHECK_ERROR( rprDiskLightSetAngle(  light->h,  angle   )  );
		return ret;
	});
	m.def("DiskLightSetInnerAngle", []( PyRprLight* light,  rpr_float innerAngle )
	{

		PYRPR_CHECK_ERROR( rprDiskLightSetInnerAngle(  light->h,  innerAngle   )  );
		return ret;
	});
	m.def("SpotLightSetConeShape", []( PyRprLight* light,  rpr_float iangle,  rpr_float oangle )
	{

		PYRPR_CHECK_ERROR( rprSpotLightSetConeShape(  light->h,  iangle,  oangle   )  );
		return ret;
	});
	m.def("ContextCreateDirectionalLight", []( PyRprContext* context,  PyRprLight* out_light )
	{

		PYRPR_CHECK_ERROR( rprContextCreateDirectionalLight(  context->h,  &(out_light->h)   )  );
		return ret;
	});
	m.def("DirectionalLightSetRadiantPower3f", []( PyRprLight* light,  rpr_float r,  rpr_float g,  rpr_float b )
	{

		PYRPR_CHECK_ERROR( rprDirectionalLightSetRadiantPower3f(  light->h,  r,  g,  b   )  );
		return ret;
	});
	m.def("DirectionalLightSetShadowSoftnessAngle", []( PyRprLight* light,  rpr_float softnessAngle )
	{

		PYRPR_CHECK_ERROR( rprDirectionalLightSetShadowSoftnessAngle(  light->h,  softnessAngle   )  );
		return ret;
	});
	m.def("ContextCreateEnvironmentLight", []( PyRprContext* context,  PyRprLight* out_light )
	{

		PYRPR_CHECK_ERROR( rprContextCreateEnvironmentLight(  context->h,  &(out_light->h)   )  );
		return ret;
	});
	m.def("EnvironmentLightSetImage", []( PyRprLight* env_light,  PyRprImage* image )
	{

		PYRPR_CHECK_ERROR( rprEnvironmentLightSetImage(  env_light->h,  image->h   )  );
		return ret;
	});
	m.def("EnvironmentLightSetIntensityScale", []( PyRprLight* env_light,  rpr_float intensity_scale )
	{

		PYRPR_CHECK_ERROR( rprEnvironmentLightSetIntensityScale(  env_light->h,  intensity_scale   )  );
		return ret;
	});
	m.def("EnvironmentLightAttachPortal", []( PyRprScene* scene,  PyRprLight* env_light,  PyRprShape* portal )
	{

		PYRPR_CHECK_ERROR( rprEnvironmentLightAttachPortal(  scene->h,  env_light->h,  portal->h   )  );
		return ret;
	});
	m.def("EnvironmentLightDetachPortal", []( PyRprScene* scene,  PyRprLight* env_light,  PyRprShape* portal )
	{

		PYRPR_CHECK_ERROR( rprEnvironmentLightDetachPortal(  scene->h,  env_light->h,  portal->h   )  );
		return ret;
	});
	m.def("EnvironmentLightSetEnvironmentLightOverride", []( PyRprLight* in_ibl,  rpr_environment_override overrideType,  PyRprLight* in_iblOverride )
	{

		PYRPR_CHECK_ERROR( rprEnvironmentLightSetEnvironmentLightOverride(  in_ibl->h,  overrideType,  in_iblOverride->h   )  );
		return ret;
	});
	m.def("EnvironmentLightGetEnvironmentLightOverride", []( PyRprLight* in_ibl,  rpr_environment_override overrideType,  PyRprLight* out_iblOverride )
	{

		PYRPR_CHECK_ERROR( rprEnvironmentLightGetEnvironmentLightOverride(  in_ibl->h,  overrideType,  &(out_iblOverride->h)   )  );
		return ret;
	});
	m.def("ContextCreateSkyLight", []( PyRprContext* context,  PyRprLight* out_light )
	{

		PYRPR_CHECK_ERROR( rprContextCreateSkyLight(  context->h,  &(out_light->h)   )  );
		return ret;
	});
	m.def("SkyLightSetTurbidity", []( PyRprLight* skylight,  rpr_float turbidity )
	{

		PYRPR_CHECK_ERROR( rprSkyLightSetTurbidity(  skylight->h,  turbidity   )  );
		return ret;
	});
	m.def("SkyLightSetAlbedo", []( PyRprLight* skylight,  rpr_float albedo )
	{

		PYRPR_CHECK_ERROR( rprSkyLightSetAlbedo(  skylight->h,  albedo   )  );
		return ret;
	});
	m.def("SkyLightSetScale", []( PyRprLight* skylight,  rpr_float scale )
	{

		PYRPR_CHECK_ERROR( rprSkyLightSetScale(  skylight->h,  scale   )  );
		return ret;
	});
	m.def("SkyLightSetDirection", []( PyRprLight* skylight,  rpr_float x,  rpr_float y,  rpr_float z )
	{

		PYRPR_CHECK_ERROR( rprSkyLightSetDirection(  skylight->h,  x,  y,  z   )  );
		return ret;
	});
	m.def("SkyLightAttachPortal", []( PyRprScene* scene,  PyRprLight* skylight,  PyRprShape* portal )
	{

		PYRPR_CHECK_ERROR( rprSkyLightAttachPortal(  scene->h,  skylight->h,  portal->h   )  );
		return ret;
	});
	m.def("SkyLightDetachPortal", []( PyRprScene* scene,  PyRprLight* skylight,  PyRprShape* portal )
	{

		PYRPR_CHECK_ERROR( rprSkyLightDetachPortal(  scene->h,  skylight->h,  portal->h   )  );
		return ret;
	});
	m.def("ContextCreateIESLight", []( PyRprContext* context,  PyRprLight* light )
	{

		PYRPR_CHECK_ERROR( rprContextCreateIESLight(  context->h,  &(light->h)   )  );
		return ret;
	});
	m.def("IESLightSetRadiantPower3f", []( PyRprLight* light,  rpr_float r,  rpr_float g,  rpr_float b )
	{

		PYRPR_CHECK_ERROR( rprIESLightSetRadiantPower3f(  light->h,  r,  g,  b   )  );
		return ret;
	});
	m.def("IESLightSetImageFromFile", []( PyRprLight* env_light,  std::string imagePath,  rpr_int nx,  rpr_int ny )
	{

		PYRPR_CHECK_ERROR( rprIESLightSetImageFromFile(  env_light->h,  imagePath.c_str(),  nx,  ny   )  );
		return ret;
	});
	m.def("IESLightSetImageFromIESdata", []( PyRprLight* env_light,  std::string iesData,  rpr_int nx,  rpr_int ny )
	{

		PYRPR_CHECK_ERROR( rprIESLightSetImageFromIESdata(  env_light->h,  iesData.c_str(),  nx,  ny   )  );
		return ret;
	});
	m.def("LightGetInfo", []( PyRprLight* light,  rpr_light_info info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprLightGetInfo(  light->h,  info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("SceneClear", []( PyRprScene* scene )
	{

		PYRPR_CHECK_ERROR( rprSceneClear(  scene->h   )  );
		return ret;
	});
	m.def("SceneAttachShape", []( PyRprScene* scene,  PyRprShape* shape )
	{

		PYRPR_CHECK_ERROR( rprSceneAttachShape(  scene->h,  shape->h   )  );
		return ret;
	});
	m.def("SceneDetachShape", []( PyRprScene* scene,  PyRprShape* shape )
	{

		PYRPR_CHECK_ERROR( rprSceneDetachShape(  scene->h,  shape->h   )  );
		return ret;
	});
	m.def("SceneAttachHeteroVolume", []( PyRprScene* scene,  PyRprHeteroVolume* heteroVolume )
	{

		PYRPR_CHECK_ERROR( rprSceneAttachHeteroVolume(  scene->h,  heteroVolume->h   )  );
		return ret;
	});
	m.def("SceneDetachHeteroVolume", []( PyRprScene* scene,  PyRprHeteroVolume* heteroVolume )
	{

		PYRPR_CHECK_ERROR( rprSceneDetachHeteroVolume(  scene->h,  heteroVolume->h   )  );
		return ret;
	});
	m.def("SceneAttachCurve", []( PyRprScene* scene,  PyRprCurve* curve )
	{

		PYRPR_CHECK_ERROR( rprSceneAttachCurve(  scene->h,  curve->h   )  );
		return ret;
	});
	m.def("SceneDetachCurve", []( PyRprScene* scene,  PyRprCurve* curve )
	{

		PYRPR_CHECK_ERROR( rprSceneDetachCurve(  scene->h,  curve->h   )  );
		return ret;
	});
	m.def("CurveSetMaterial", []( PyRprCurve* curve,  PyRprMaterialNode* material )
	{

		PYRPR_CHECK_ERROR( rprCurveSetMaterial(  curve->h,  material->h   )  );
		return ret;
	});
	m.def("CurveSetTransform", []( PyRprCurve* curve,  rpr_bool transpose,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> transform )
	{
		const rpr_float* transform___pycast =    transform.size() == 0 ? nullptr :      &(((rpr_float*)transform.data())[0]);

		PYRPR_CHECK_ERROR( rprCurveSetTransform(  curve->h,  transpose,  transform___pycast   )  );
		return ret;
	});
	m.def("ContextCreateCurve", []( PyRprContext* context,  PyRprCurve* out_curve,  size_t num_controlPoints,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> controlPointsData,  rpr_int controlPointsStride,  size_t num_indices,  rpr_uint curveCount,  nb::ndarray<uint32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> indicesData,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> radius,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> textureUV,  nb::ndarray<int32_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> segmentPerCurve,  rpr_uint creationFlag_tapered )
	{
		const rpr_float* controlPointsData___pycast =    controlPointsData.size() == 0 ? nullptr :      &(((rpr_float*)controlPointsData.data())[0]);
		const uint32_t* indicesData___pycast =    indicesData.size() == 0 ? nullptr :     &(((uint32_t*)indicesData.data())[0]);
		const rpr_float* radius___pycast =    radius.size() == 0 ? nullptr :      &(((rpr_float*)radius.data())[0]);
		const rpr_float* textureUV___pycast =    textureUV.size() == 0 ? nullptr :      &(((rpr_float*)textureUV.data())[0]);
		const int32_t* segmentPerCurve___pycast =    segmentPerCurve.size() == 0 ? nullptr :     &(((int32_t*)segmentPerCurve.data())[0]);

		PYRPR_CHECK_ERROR( rprContextCreateCurve(  context->h,  &(out_curve->h),  num_controlPoints,  controlPointsData___pycast,  controlPointsStride,  num_indices,  curveCount,  indicesData___pycast,  radius___pycast,  textureUV___pycast,  segmentPerCurve___pycast,  creationFlag_tapered   )  );
		return ret;
	});
	m.def("SceneAttachLight", []( PyRprScene* scene,  PyRprLight* light )
	{

		PYRPR_CHECK_ERROR( rprSceneAttachLight(  scene->h,  light->h   )  );
		return ret;
	});
	m.def("SceneDetachLight", []( PyRprScene* scene,  PyRprLight* light )
	{

		PYRPR_CHECK_ERROR( rprSceneDetachLight(  scene->h,  light->h   )  );
		return ret;
	});
	m.def("SceneSetEnvironmentLight", []( PyRprScene* in_scene,  PyRprLight* in_light )
	{

		PYRPR_CHECK_ERROR( rprSceneSetEnvironmentLight(  in_scene->h,  in_light->h   )  );
		return ret;
	});
	m.def("SceneGetEnvironmentLight", []( PyRprScene* in_scene,  PyRprLight* out_light )
	{

		PYRPR_CHECK_ERROR( rprSceneGetEnvironmentLight(  in_scene->h,  &(out_light->h)   )  );
		return ret;
	});
	m.def("SceneGetInfo", []( PyRprScene* scene,  rpr_scene_info info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprSceneGetInfo(  scene->h,  info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("SceneSetBackgroundImage", []( PyRprScene* scene,  PyRprImage* image )
	{

		PYRPR_CHECK_ERROR( rprSceneSetBackgroundImage(  scene->h,  image->h   )  );
		return ret;
	});
	m.def("SceneGetBackgroundImage", []( PyRprScene* scene,  PyRprImage* out_image )
	{

		PYRPR_CHECK_ERROR( rprSceneGetBackgroundImage(  scene->h,  &(out_image->h)   )  );
		return ret;
	});
	m.def("SceneSetCameraRight", []( PyRprScene* scene,  PyRprCamera* camera )
	{

		PYRPR_CHECK_ERROR( rprSceneSetCameraRight(  scene->h,  camera->h   )  );
		return ret;
	});
	m.def("SceneGetCameraRight", []( PyRprScene* scene,  PyRprCamera* out_camera )
	{

		PYRPR_CHECK_ERROR( rprSceneGetCameraRight(  scene->h,  &(out_camera->h)   )  );
		return ret;
	});
	m.def("SceneSetCamera", []( PyRprScene* scene,  PyRprCamera* camera )
	{

		PYRPR_CHECK_ERROR( rprSceneSetCamera(  scene->h,  camera->h   )  );
		return ret;
	});
	m.def("SceneGetCamera", []( PyRprScene* scene,  PyRprCamera* out_camera )
	{

		PYRPR_CHECK_ERROR( rprSceneGetCamera(  scene->h,  &(out_camera->h)   )  );
		return ret;
	});
	m.def("FrameBufferGetInfo", []( PyRprFramebuffer* framebuffer,  rpr_framebuffer_info info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprFrameBufferGetInfo(  framebuffer->h,  info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("FrameBufferClear", []( PyRprFramebuffer* frame_buffer )
	{

		PYRPR_CHECK_ERROR( rprFrameBufferClear(  frame_buffer->h   )  );
		return ret;
	});
	m.def("FrameBufferFillWithColor", []( PyRprFramebuffer* frame_buffer,  rpr_float r,  rpr_float g,  rpr_float b,  rpr_float a )
	{

		PYRPR_CHECK_ERROR( rprFrameBufferFillWithColor(  frame_buffer->h,  r,  g,  b,  a   )  );
		return ret;
	});
	m.def("FrameBufferSaveToFile", []( PyRprFramebuffer* frame_buffer,  std::string file_path )
	{

		PYRPR_CHECK_ERROR( rprFrameBufferSaveToFile(  frame_buffer->h,  file_path.c_str()   )  );
		return ret;
	});
	m.def("FrameBufferSaveToFileEx", []( PyRprFramebuffer* framebufferList,  rpr_uint framebufferCount,  std::string filePath,  void* extraOptions )
	{

		PYRPR_CHECK_ERROR( rprFrameBufferSaveToFileEx(  &(framebufferList->h),  framebufferCount,  filePath.c_str(),  extraOptions   )  );
		return ret;
	});
	m.def("ContextResolveFrameBuffer", []( PyRprContext* context,  PyRprFramebuffer* src_frame_buffer,  PyRprFramebuffer* dst_frame_buffer,  rpr_bool noDisplayGamma )
	{

		PYRPR_CHECK_ERROR( rprContextResolveFrameBuffer(  context->h,  src_frame_buffer->h,  dst_frame_buffer->h,  noDisplayGamma   )  );
		return ret;
	});
	m.def("MaterialSystemGetInfo", []( PyRprMaterialSystem* in_material_system,  rpr_material_system_info type,  size_t in_size,  void* in_data,  size_t* out_size )
	{

		PYRPR_CHECK_ERROR( rprMaterialSystemGetInfo(  in_material_system->h,  type,  in_size,  in_data,  out_size   )  );
		return ret;
	});
	m.def("ContextCreateMaterialSystem", []( PyRprContext* in_context,  rpr_material_system_type type,  PyRprMaterialSystem* out_matsys )
	{

		PYRPR_CHECK_ERROR( rprContextCreateMaterialSystem(  in_context->h,  type,  &(out_matsys->h)   )  );
		return ret;
	});
	m.def("MaterialSystemGetSize", []( PyRprContext* in_context,  rpr_uint* out_size )
	{

		PYRPR_CHECK_ERROR( rprMaterialSystemGetSize(  in_context->h,  out_size   )  );
		return ret;
	});
	m.def("MaterialSystemCreateNode", []( PyRprMaterialSystem* in_matsys,  rpr_material_node_type in_type,  PyRprMaterialNode* out_node )
	{

		PYRPR_CHECK_ERROR( rprMaterialSystemCreateNode(  in_matsys->h,  in_type,  &(out_node->h)   )  );
		return ret;
	});
	m.def("MaterialNodeSetID", []( PyRprMaterialNode* in_node,  rpr_uint id )
	{

		PYRPR_CHECK_ERROR( rprMaterialNodeSetID(  in_node->h,  id   )  );
		return ret;
	});
	m.def("MaterialNodeSetInputNByKey", []( PyRprMaterialNode* in_node,  rpr_material_node_input in_input,  PyRprMaterialNode* in_input_node )
	{

		PYRPR_CHECK_ERROR( rprMaterialNodeSetInputNByKey(  in_node->h,  in_input,  in_input_node->h   )  );
		return ret;
	});
	m.def("MaterialNodeSetInputFByKey", []( PyRprMaterialNode* in_node,  rpr_material_node_input in_input,  rpr_float in_value_x,  rpr_float in_value_y,  rpr_float in_value_z,  rpr_float in_value_w )
	{

		PYRPR_CHECK_ERROR( rprMaterialNodeSetInputFByKey(  in_node->h,  in_input,  in_value_x,  in_value_y,  in_value_z,  in_value_w   )  );
		return ret;
	});
	m.def("MaterialNodeSetInputDataByKey", []( PyRprMaterialNode* in_node,  rpr_material_node_input in_input,  void* data,  size_t dataSizeByte )
	{

		PYRPR_CHECK_ERROR( rprMaterialNodeSetInputDataByKey(  in_node->h,  in_input,  data,  dataSizeByte   )  );
		return ret;
	});
	m.def("MaterialNodeSetInputUByKey", []( PyRprMaterialNode* in_node,  rpr_material_node_input in_input,  rpr_uint in_value )
	{

		PYRPR_CHECK_ERROR( rprMaterialNodeSetInputUByKey(  in_node->h,  in_input,  in_value   )  );
		return ret;
	});
	m.def("MaterialNodeSetInputImageDataByKey", []( PyRprMaterialNode* in_node,  rpr_material_node_input in_input,  PyRprImage* image )
	{

		PYRPR_CHECK_ERROR( rprMaterialNodeSetInputImageDataByKey(  in_node->h,  in_input,  image->h   )  );
		return ret;
	});
	m.def("MaterialNodeSetInputLightDataByKey", []( PyRprMaterialNode* in_node,  rpr_material_node_input in_input,  PyRprLight* light )
	{

		PYRPR_CHECK_ERROR( rprMaterialNodeSetInputLightDataByKey(  in_node->h,  in_input,  light->h   )  );
		return ret;
	});
	m.def("MaterialNodeSetInputBufferDataByKey", []( PyRprMaterialNode* in_node,  rpr_material_node_input in_input,  PyRprBuffer* buffer )
	{

		PYRPR_CHECK_ERROR( rprMaterialNodeSetInputBufferDataByKey(  in_node->h,  in_input,  buffer->h   )  );
		return ret;
	});
	m.def("MaterialNodeSetInputGridDataByKey", []( PyRprMaterialNode* in_node,  rpr_material_node_input in_input,  PyRprGrid* grid )
	{

		PYRPR_CHECK_ERROR( rprMaterialNodeSetInputGridDataByKey(  in_node->h,  in_input,  grid->h   )  );
		return ret;
	});
	m.def("MaterialNodeGetInfo", []( PyRprMaterialNode* in_node,  rpr_material_node_info in_info,  size_t in_size,  void* in_data,  size_t* out_size )
	{

		PYRPR_CHECK_ERROR( rprMaterialNodeGetInfo(  in_node->h,  in_info,  in_size,  in_data,  out_size   )  );
		return ret;
	});
	m.def("MaterialNodeGetInputInfo", []( PyRprMaterialNode* in_node,  rpr_int in_input_idx,  rpr_material_node_input_info in_info,  size_t in_size,  void* in_data,  size_t* out_size )
	{

		PYRPR_CHECK_ERROR( rprMaterialNodeGetInputInfo(  in_node->h,  in_input_idx,  in_info,  in_size,  in_data,  out_size   )  );
		return ret;
	});
	m.def("ContextCreateComposite", []( PyRprContext* context,  rpr_composite_type in_type,  PyRprComposite* out_composite )
	{

		PYRPR_CHECK_ERROR( rprContextCreateComposite(  context->h,  in_type,  &(out_composite->h)   )  );
		return ret;
	});
	m.def("ContextCreateLUTFromFile", []( PyRprContext* context,  std::string fileLutPath,  PyRprLut* out_lut )
	{

		PYRPR_CHECK_ERROR( rprContextCreateLUTFromFile(  context->h,  fileLutPath.c_str(),  &(out_lut->h)   )  );
		return ret;
	});
	m.def("ContextCreateLUTFromData", []( PyRprContext* context,  std::string lutData,  PyRprLut* out_lut )
	{

		PYRPR_CHECK_ERROR( rprContextCreateLUTFromData(  context->h,  lutData.c_str(),  &(out_lut->h)   )  );
		return ret;
	});
	m.def("CompositeSetInputFb", []( PyRprComposite* composite,  std::string inputName,  PyRprFramebuffer* input )
	{

		PYRPR_CHECK_ERROR( rprCompositeSetInputFb(  composite->h,  inputName.c_str(),  input->h   )  );
		return ret;
	});
	m.def("CompositeSetInputC", []( PyRprComposite* composite,  std::string inputName,  PyRprComposite* input )
	{

		PYRPR_CHECK_ERROR( rprCompositeSetInputC(  composite->h,  inputName.c_str(),  input->h   )  );
		return ret;
	});
	m.def("CompositeSetInputLUT", []( PyRprComposite* composite,  std::string inputName,  PyRprLut* input )
	{

		PYRPR_CHECK_ERROR( rprCompositeSetInputLUT(  composite->h,  inputName.c_str(),  input->h   )  );
		return ret;
	});
	m.def("CompositeSetInput4f", []( PyRprComposite* composite,  std::string inputName,  float x,  float y,  float z,  float w )
	{

		PYRPR_CHECK_ERROR( rprCompositeSetInput4f(  composite->h,  inputName.c_str(),  x,  y,  z,  w   )  );
		return ret;
	});
	m.def("CompositeSetInput1u", []( PyRprComposite* composite,  std::string inputName,  rpr_uint value )
	{

		PYRPR_CHECK_ERROR( rprCompositeSetInput1u(  composite->h,  inputName.c_str(),  value   )  );
		return ret;
	});
	m.def("CompositeSetInputOp", []( PyRprComposite* composite,  std::string inputName,  rpr_material_node_arithmetic_operation op )
	{

		PYRPR_CHECK_ERROR( rprCompositeSetInputOp(  composite->h,  inputName.c_str(),  op   )  );
		return ret;
	});
	m.def("CompositeCompute", []( PyRprComposite* composite,  PyRprFramebuffer* fb )
	{

		PYRPR_CHECK_ERROR( rprCompositeCompute(  composite->h,  fb->h   )  );
		return ret;
	});
	m.def("CompositeGetInfo", []( PyRprComposite* composite,  rpr_composite_info composite_info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprCompositeGetInfo(  composite->h,  composite_info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("ObjectSetName", []( void* node,  std::string name )
	{

		PYRPR_CHECK_ERROR( rprObjectSetName(  node,  name.c_str()   )  );
		return ret;
	});
	m.def("ObjectSetCustomPointer", []( void* node,  void* customPtr )
	{

		PYRPR_CHECK_ERROR( rprObjectSetCustomPointer(  node,  customPtr   )  );
		return ret;
	});
	m.def("ContextCreatePostEffect", []( PyRprContext* context,  rpr_post_effect_type type,  PyRprPostEffect* out_effect )
	{

		PYRPR_CHECK_ERROR( rprContextCreatePostEffect(  context->h,  type,  &(out_effect->h)   )  );
		return ret;
	});
	m.def("ContextAttachPostEffect", []( PyRprContext* context,  PyRprPostEffect* effect )
	{

		PYRPR_CHECK_ERROR( rprContextAttachPostEffect(  context->h,  effect->h   )  );
		return ret;
	});
	m.def("ContextDetachPostEffect", []( PyRprContext* context,  PyRprPostEffect* effect )
	{

		PYRPR_CHECK_ERROR( rprContextDetachPostEffect(  context->h,  effect->h   )  );
		return ret;
	});
	m.def("PostEffectSetParameter1u", []( PyRprPostEffect* effect,  std::string name,  rpr_uint x )
	{

		PYRPR_CHECK_ERROR( rprPostEffectSetParameter1u(  effect->h,  name.c_str(),  x   )  );
		return ret;
	});
	m.def("PostEffectSetParameter1f", []( PyRprPostEffect* effect,  std::string name,  rpr_float x )
	{

		PYRPR_CHECK_ERROR( rprPostEffectSetParameter1f(  effect->h,  name.c_str(),  x   )  );
		return ret;
	});
	m.def("PostEffectSetParameter3f", []( PyRprPostEffect* effect,  std::string name,  rpr_float x,  rpr_float y,  rpr_float z )
	{

		PYRPR_CHECK_ERROR( rprPostEffectSetParameter3f(  effect->h,  name.c_str(),  x,  y,  z   )  );
		return ret;
	});
	m.def("PostEffectSetParameter4f", []( PyRprPostEffect* effect,  std::string name,  rpr_float x,  rpr_float y,  rpr_float z,  rpr_float w )
	{

		PYRPR_CHECK_ERROR( rprPostEffectSetParameter4f(  effect->h,  name.c_str(),  x,  y,  z,  w   )  );
		return ret;
	});
	m.def("ContextGetAttachedPostEffectCount", []( PyRprContext* context,  rpr_uint* nb )
	{

		PYRPR_CHECK_ERROR( rprContextGetAttachedPostEffectCount(  context->h,  nb   )  );
		return ret;
	});
	m.def("ContextGetAttachedPostEffect", []( PyRprContext* context,  rpr_uint i,  PyRprPostEffect* out_effect )
	{

		PYRPR_CHECK_ERROR( rprContextGetAttachedPostEffect(  context->h,  i,  &(out_effect->h)   )  );
		return ret;
	});
	m.def("PostEffectGetInfo", []( PyRprPostEffect* effect,  rpr_post_effect_info info,  size_t size,  void* data,  size_t* size_ret )
	{

		PYRPR_CHECK_ERROR( rprPostEffectGetInfo(  effect->h,  info,  size,  data,  size_ret   )  );
		return ret;
	});
	m.def("ContextCreateGrid", []( PyRprContext* context,  PyRprGrid* out_grid,  size_t gridSizeX,  size_t gridSizeY,  size_t gridSizeZ,  void* indicesList,  size_t numberOfIndices,  rpr_grid_indices_topology indicesListTopology,  void* gridData,  size_t gridDataSizeByte,  rpr_uint gridDataTopology___unused )
	{

		PYRPR_CHECK_ERROR( rprContextCreateGrid(  context->h,  &(out_grid->h),  gridSizeX,  gridSizeY,  gridSizeZ,  indicesList,  numberOfIndices,  indicesListTopology,  gridData,  gridDataSizeByte,  gridDataTopology___unused   )  );
		return ret;
	});
	m.def("ContextCreateHeteroVolume", []( PyRprContext* context,  PyRprHeteroVolume* out_heteroVolume )
	{

		PYRPR_CHECK_ERROR( rprContextCreateHeteroVolume(  context->h,  &(out_heteroVolume->h)   )  );
		return ret;
	});
	m.def("ShapeSetHeteroVolume", []( PyRprShape* shape,  PyRprHeteroVolume* heteroVolume )
	{

		PYRPR_CHECK_ERROR( rprShapeSetHeteroVolume(  shape->h,  heteroVolume->h   )  );
		return ret;
	});
	m.def("HeteroVolumeSetTransform", []( PyRprHeteroVolume* heteroVolume,  rpr_bool transpose,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> transform )
	{
		const rpr_float* transform___pycast =    transform.size() == 0 ? nullptr :      &(((rpr_float*)transform.data())[0]);

		PYRPR_CHECK_ERROR( rprHeteroVolumeSetTransform(  heteroVolume->h,  transpose,  transform___pycast   )  );
		return ret;
	});
	m.def("HeteroVolumeSetEmissionGrid", []( PyRprHeteroVolume* heteroVolume,  PyRprGrid* grid )
	{

		PYRPR_CHECK_ERROR( rprHeteroVolumeSetEmissionGrid(  heteroVolume->h,  grid->h   )  );
		return ret;
	});
	m.def("HeteroVolumeSetDensityGrid", []( PyRprHeteroVolume* heteroVolume,  PyRprGrid* grid )
	{

		PYRPR_CHECK_ERROR( rprHeteroVolumeSetDensityGrid(  heteroVolume->h,  grid->h   )  );
		return ret;
	});
	m.def("HeteroVolumeSetAlbedoGrid", []( PyRprHeteroVolume* heteroVolume,  PyRprGrid* grid )
	{

		PYRPR_CHECK_ERROR( rprHeteroVolumeSetAlbedoGrid(  heteroVolume->h,  grid->h   )  );
		return ret;
	});
	m.def("HeteroVolumeSetEmissionLookup", []( PyRprHeteroVolume* heteroVolume,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> ptr,  rpr_uint n )
	{
		const rpr_float* ptr___pycast =    ptr.size() == 0 ? nullptr :      &(((rpr_float*)ptr.data())[0]);

		PYRPR_CHECK_ERROR( rprHeteroVolumeSetEmissionLookup(  heteroVolume->h,  ptr___pycast,  n   )  );
		return ret;
	});
	m.def("HeteroVolumeSetDensityLookup", []( PyRprHeteroVolume* heteroVolume,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> ptr,  rpr_uint n )
	{
		const rpr_float* ptr___pycast =    ptr.size() == 0 ? nullptr :      &(((rpr_float*)ptr.data())[0]);

		PYRPR_CHECK_ERROR( rprHeteroVolumeSetDensityLookup(  heteroVolume->h,  ptr___pycast,  n   )  );
		return ret;
	});
	m.def("HeteroVolumeSetAlbedoLookup", []( PyRprHeteroVolume* heteroVolume,  nb::ndarray<float_t, nb::shape<nb::any>, nb::c_contig, nb::device::cpu> ptr,  rpr_uint n )
	{
		const rpr_float* ptr___pycast =    ptr.size() == 0 ? nullptr :      &(((rpr_float*)ptr.data())[0]);

		PYRPR_CHECK_ERROR( rprHeteroVolumeSetAlbedoLookup(  heteroVolume->h,  ptr___pycast,  n   )  );
		return ret;
	});
	m.def("HeteroVolumeSetAlbedoScale", []( PyRprHeteroVolume* heteroVolume,  rpr_float scale )
	{

		PYRPR_CHECK_ERROR( rprHeteroVolumeSetAlbedoScale(  heteroVolume->h,  scale   )  );
		return ret;
	});
	m.def("HeteroVolumeSetEmissionScale", []( PyRprHeteroVolume* heteroVolume,  rpr_float scale )
	{

		PYRPR_CHECK_ERROR( rprHeteroVolumeSetEmissionScale(  heteroVolume->h,  scale   )  );
		return ret;
	});
	m.def("HeteroVolumeSetDensityScale", []( PyRprHeteroVolume* heteroVolume,  rpr_float scale )
	{

		PYRPR_CHECK_ERROR( rprHeteroVolumeSetDensityScale(  heteroVolume->h,  scale   )  );
		return ret;
	});



	RPRPY_ADDITIONAL_DEFINES_rpr;


}
